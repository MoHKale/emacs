# -*- mode: org; coding: utf-8-unix -*-

#+TITLE: mohkale.org
#+STARTUP: content

#+PROPERTY: header-args :tangle init.el :comments link :mkdirp yes :noweb yes :hlines no

* Configuration
  :PROPERTIES:
  :header-args+: :shebang ";; -*- lexical-binding: t -*-"
  :END:

** init.el
*** Startup Optimisations
    optimise emacs startup times as much as possible.

    #+BEGIN_SRC emacs-lisp :shebang ";; -*- lexical-binding: t; coding: utf-8-unix -*-"
      ;; make garbage collector less invasive
      (setq gc-cons-threshold 402653184
            gc-cons-percentage 0.6)

      ;; not needed at startup
      (setq default-file-name-handler-alist file-name-handler-alist
            file-name-handler-alist nil)

      (add-hook 'emacs-startup-hook
                (defun mohkale//post-init-handler (&rest args)
                  ;; reset optimisation changes
                  (setq gc-cons-threshold 800000
                        gc-cons-percentage 0.1
                        file-name-handler-alist default-file-name-handler-alist)

                  ;; switch focus to any error or compilation windows
                  (let* ((window-list  (window-list))
                         (window-count (length window-list))
                         (focus-list   '("*Warnings*"
                                         "*Compile-Log*"))
                         (kill-list    '()))
                    (when (> window-count 1)
                      (dolist (window (window-list))
                        (let ((buffer-name (buffer-name (window-buffer window))))
                          (cond
                           ((member buffer-name focus-list)
                            (select-window window))
                           ((member buffer-name kill-list)
                            (delete-window window)))))))

                  ;; load my custom emacs theme
                  (load-theme 'an-old-hope t)))
    #+END_SRC

*** Emacs Sanitize
    make emacs less like... emacs. use saner defaults and make emacs look nicer in general

    #+BEGIN_SRC emacs-lisp
      (setq delete-old-versions t                                                  ; delete excess backup versions silently
            version-control t                                                      ; use version control
            vc-make-backup-files t                                                 ; make backups in vc as well
            vc-follow-symlinks t                                                   ; no confirmation when opening symlinks
            ring-bell-function 'ignore                                             ; NO ANNOYING RINGS!!!
            sentence-end-double-space nil                                          ; sentence SHOULD end with only a fullstop
            default-fill-column 150                                                ; toggle wrapping text at given character
            delete-by-moving-to-trash t                                            ; don't rm, trash my garbage please :)
            search-whitespace-regexp nil                                           ; SPC means SPC, not any amount of spaces
            enable-local-variables t                                               ; allow safe variables, even alongside unsafe ones
            hl-line-sticky-flag nil                                                ; only highlight line in active window
            auto-save-interval 50                                                  ; auto-save as frequently as possible
            display-line-numbers-type 'relative                                    ; prefer relative line numbers when available
            backup-by-copying t                                                    ; don't clobber symlinks
            which-key-enable-extended-define-key t                                 ; let's you pass a cons to define-key
            kept-new-versions 15                                                   ; keep this many latest versions of file
            kept-old-versions 5                                                    ; keep this many early versions of file
            ;; NOTE kept-new-versions and kept-old-versions are both used to determine the allowed number of backups.
            ;;      there will be at most kept-new-versions + kept-old-versions backups made.
            recenter-positions '(top middle bottom)

            enable-recursive-minibuffers t
            kill-whole-line              t ; kill-line includes eol
            help-window-select           t ; always

            recentf-max-saved-items 2048
            recentf-exclude '("/tmp/"
                              "/ssh:"
                              "/sudo:"
                              ;; ctags
                              "/TAGS$"
                              ;; global
                              "/GTAGS$"
                              "/GRAGS$"
                              "/GPATH$"
                              "tmp\\.[^/\\]*$"
                              ;; binary
                              "\\.mkv$"
                              "\\.mp[34]$"
                              "\\.avi$"
                              "\\.docx?$"
                              ;; subtitles
                              "\\.sub$"
                              "\\.srt$"
                              "\\.ass$")

            ; Always Use UTF8, NO CARRIAGE RETURNS
            ; this... might be overkill. see setq-default
            ;; coding-system-for-read  'utf-8-unix
            ;; coding-system-for-write 'utf-8-unix

            frame-title-format
                ;; sets the title string displayed on the frame above. Format of the command is
                ;; a printf like string. Wrap any code you want evaluated conditionally into a list
                ;; and if the first value of that list is a string, it will be evaluated. You can
                ;; include variables anywhere in the string, including sublists, but no functions.
                ;;
                ;; See the format guide here: https://www.emacswiki.org/emacs/FrameTitle
            `(,(user-login-name)
              "@"
              ,(system-name)
              " [%*] %m"
              (:eval (when (derived-mode-p 'pdf-view-mode)
                       (format "(%d/%d)"
                               (pdf-view-current-page)
                               (pdf-cache-number-of-pages))))
              (buffer-file-name " : %f")))

      (setq-default indent-tabs-mode nil
                    save-place t ; auto enable save-place mode
                    show-trailing-whitespace nil
                    truncate-lines t ; don't split long lines onto next lines
                    scroll-conservatively 101 ; smooth... enough scrolling going line by line
                    scroll-preserve-screen-position t
                    cursor-in-non-selected-windows nil
                    default-buffer-file-coding-system 'utf-8-unix
                    buffer-file-coding-system 'utf-8-unix
                    echo-keystrokes 0.02)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil) ;; re-enable

      (set-face-attribute 'default nil
                          :family "Source Code Pro"
                          ;; height value is 1/10pt. so 100 = 10pt
                          :height (if (eq system-type 'gnu/linux) 110 100)
                          :weight 'normal
                          :width 'normal)

      ;; to make string based hash tables easier to make
      (define-hash-table-test 'string-hash-table-test
        'string-equal 'sxhash-equal)
    #+END_SRC

    Disable annoying GUI enhancemants. minimal emacs is *best* emacs.

    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)     ; dropdown menu list below frame title
      (scroll-bar-mode -1)   ; scrolling bar shown on frames right side
      (tool-bar-mode -1)     ; short mini menu showed below the menu bar
      (blink-cursor-mode -1) ; cursor flashes annoyingly
    #+END_SRC

    Create some aliases for functions that're are hard to remember or weirdly named or just too long.

    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
      (defalias 'regexp-string-match #'string-match)

      (defalias 'path-basename                   #'file-name-nondirectory)
      (defalias 'path-dirname                    #'file-name-directory)
      (defalias 'path-extension                  #'file-name-extension)
      (defalias 'path-without-extension          #'file-name-sans-extension)
      (defalias 'path-basename-without-extension #'file-name-base)

      (defalias 'gnu-debugger     #'gdb)
      (defalias 'gud-gnu-debugger #'gud-gdb)
      (defalias 'perl-debugger    #'perldb)
      (defalias 'java-debugger    #'jdb)
    #+END_SRC

    customise display-buffer-alist to prioritise switching focus to displayed
    buffers, instead of showing them and then making me have to switch to them
    and then exit.

    #+BEGIN_SRC emacs-lisp
      ;; frankly, display buffers alist is badly documented.
      ;; there's a quick and simple article exploring how it
      ;; works [[https://www.simplify.ba/articles/2016/01/25/display-buffer-alist/][here]]
      ;;
      ;; in the meantime, the following is a breif~er~ summary
      ;;   1. the car of each entry should be a regex matching a buffer
      ;;      name or a function taking a buffer and an action argument.
      ;;   2. the second item (car (cdr list)) should be a list of or a
      ;;      single display handler function which takes a buffer and
      ;;      an alist as an argument. Each entry in the list is invoked
      ;;      until one which returns non nil is encountered.
      ;;   3. the remaining list items should be an alists providing options.

      ;; changing at startup messes up the display of the dashboard :(
      (defun mohkale//update-display-buffer-options-handler ()
        (defvar display-buffer--default-fallback-action
          display-buffer-fallback-action
          "the value for fallback actions without my configuration")

        (advice-add 'display-startup-echo-area-message :around #'ignore)

        (defun display-buffer--restore-default-actions (func &rest args)
          (let ((display-buffer-fallback-action
                 display-buffer--default-fallback-action))
            (apply func args)))

        (setq display-buffer-fallback-action
              ;; by default, focus on displayed windows
              '((display-buffer--maybe-same-window-and-focus
                 display-buffer-reuse-window-and-focus
                 display-buffer--maybe-pop-up-frame-or-window-and-focus
                 display-buffer-in-previous-window-and-focus
                 display-buffer-use-some-window-and-focus
                 display-buffer-pop-up-frame-and-focus)))

        (push '("*Async Shell Command*"
                (display-buffer-reuse-window
                 display-buffer-in-side-window-and-focus)
                (side          . bottom)
                (window-height . 0.5))
              display-buffer-alist)

        (push '("*compilation*"
                (display-buffer-reuse-window-and-focus
                 display-buffer-in-side-window-and-focus)
                (side          . bottom)
                (window-height . 0.5))
              display-buffer-alist)

        (dolist (buffer-name '("*image-dired-display-image*"
                               "*Anaconda*"
                               "magit-diff: "
                               "*Flycheck error messages*"
                               "*HTTP Response*"))
          (push `(,buffer-name ,@display-buffer--default-fallback-action)
                display-buffer-alist)))

      (add-hook #'emacs-startup-hook #'mohkale//update-display-buffer-options-handler)
    #+END_SRC

*** Config Variables
    #+BEGIN_SRC emacs-lisp
      (defvar load-me-now-duration 120
        "ideal use-package defer duration.
      after you've been inactive for this long, safe to say you
      can load packages that you've deferred.

      This is used for packages which aren't need at startup, but
      more likely then not I'm going to end up requiring them quite
      soon afterwards.")

      (defvar mohkale-should-compile-config nil
        "when truthy, building the configuration file also compiles the lisp file")

      (defun mohkale/refresh-config-file-p ()
        "true if config org file needs to be retangled and/or compiled
       see https://snipplr.com/view/14292/autocompiled-emacs-file/ for example

       NOTE assumes tangled elisp file exists... otherwise what's calling this."
        ;; checks in order:
        ;;     * compiled file doesn't exist when it should
        ;;     * config file is newer than tangled file
        ;;     * tangled file is newer than compiled file (if it should exists)
        ;;
        ;; That last check shouldn't be necessary, but better safe than sorry.
        (or (and mohkale-should-compile-config
                 (not (file-exists-p mohkale-mohkale-elc-config-file)))
            (file-newer-than-file-p mohkale-mohkale-config-file
                                    mohkale-mohkale-el-config-file)
            (and mohkale-should-compile-config
                 (file-newer-than-file-p mohkale-mohkale-el-config-file
                                         mohkale-mohkale-elc-config-file))))

      ;; (add-hook 'kill-emacs-hook (lambda () (and (mohkale/refresh-config-file-p)
      ;;                                            (mohkale/build-configuration-file))))

      (defun mohkale//display-out-of-date-configuration-warning ()
        (when (mohkale/refresh-config-file-p)
          (display-warning 'init
                           (concat "your configuration file is out of date: "
                                   mohkale-mohkale-config-file))))

      (add-hook 'emacs-startup-hook #'mohkale//display-out-of-date-configuration-warning)

      (setq mohkale-window-map (make-sparse-keymap))
    #+END_SRC

*** Paths Setup
    Set up some ease of use functions for defining paths within the dotemacs namespace.

    #+BEGIN_SRC emacs-lisp
      (if (version<= emacs-version "26.3")
          (require 'cl)
        (require 'cl-lib))

      (defun join-path (root path &rest rest)
        "like python' os.path.join, join a series of paths together."
        (setq path (if (file-name-absolute-p path)
                       path
                     (concat root
                             (unless (string-suffix-p "/" root)
                               "/")
                             path)))
        (if rest (apply 'join-path path rest) path))

      (cl-defmacro dotemacs-initialise-path
          (path-type path &optional &key
                     (alias (intern (concat (symbol-name path-type) "!"))))
        (let* ((path (eval path)) ;; path can be a variable or a string
               (path-type (symbol-name path-type))
               (path-sym (intern (concat "dotemacs-"      path-type "-path")))
               (join-sym (intern (concat "dotemacs-join-" path-type "-path"))))
          `(progn
             (defconst ,path-sym (concat user-emacs-directory ,path))

             (defun ,join-sym (path &rest args)
               ,(concat "join args onto the directory: " path)
               (apply 'join-path ,path-sym path args))

             (when (quote ,alias)
               (defalias (quote ,alias) (symbol-function (quote ,join-sym)))))))
      (put 'dotemacs-initialise-path 'lisp-indent-function 'defun)

      ;; inspiration: https://github.com/emacscollective/no-littering/blob/master/no-littering.el
      (dotemacs-initialise-path etc "etc")
      (dotemacs-initialise-path bin "bin")
      (dotemacs-initialise-path var "var")
      (dotemacs-initialise-path org "org")
    #+END_SRC

    paths related to the current org file and it's tangled representations.

    #+BEGIN_SRC emacs-lisp :var --mohkale-config-file=(buffer-file-name)
      (require 'bytecomp)

      (defconst mohkale-config-root (etc! "mohkale")
        "path to the configuration directory under which my general purpose
      configuration files will reside.")

      (defconst mohkale-package-root (bin! "mohkale")
        "path to where any tangled executeable elisp files should reside")

      (defconst mohkale-mohkale-config-file --mohkale-config-file
        "path to my custom user config file.")

      (defconst mohkale-mohkale-el-config-file (concat (file-name-sans-extension
                                                        mohkale-mohkale-config-file)
                                                       ".el")
        "path to my custom user config file after being tangled into emacs lisp.")

      (defconst mohkale-mohkale-elc-config-file (byte-compile-dest-file mohkale-mohkale-el-config-file)
        "path to my custom user config file after being tangled into emacs lisp and then compiled.")
    #+END_SRC

    stop emacs from littering over my dotemacs directory by specifying alternative values for most
    paths in packages I've installed (at one point or another). This was inspired by [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering.el]].

    #+BEGIN_SRC emacs-lisp :results silent
      (with-no-warnings
        (setq
         ;;; Package Directories
         package-user-dir                                   (bin! "elpa/")
         external-packages-directory                        (bin! "misc")

         ;;; Builtin Emacs Library Path Options
         abbrev-file-name                                   (etc! "abbrev.el")
         auto-insert-directory                              (etc! "auto-insert")
         auto-save-list-file-prefix                         (var! "auto-save" "sessions/")
         bookmark-default-file                              (etc! "bookmarks.el")
         custom-file                                        (etc! "custom.el")
         custom-theme-directory                             (etc! "themes")
         desktop-path                                       `(,(var! "desktop/"))
         diary-file                                         (var! "diary")
         eshell-directory-name                              (var! "eshell")
         eshell-aliases-file                                (var! "eshell" "aliases")
         eshell-login-script                                (etc! "eshell" "loginrc")
         eshell-rc-script                                   (etc! "eshell" "eshrc")
         eww-bookmarks-directory                            (var! "eww/")
         gamegrid-user-score-file-directory                 (var! "gamegrid/")
         ido-save-directory-list-file                       (var! "ido-save-directory-list.el")
         image-dired-db-file                                (var! "image-dired" "db.el") ; tag associations
         image-dired-dir                                    (var! "image-dired/")
         image-dired-gallery-dir                            (var! "image-dired" "gallery/")
         image-dired-temp-image-file                        (var! "image-dired" "temp-image")
         image-dired-temp-rotate-image-file                 (var! "image-dired" "temp-rotate-image")
         kkc-init-file-name                                 (var! "kkc-init.el")
         message-auto-save-directory                        (var! "messages/")
         meghanada-server-install-dir                       (var! "meghanada")
         mohkale-dashboard-banners-directory                (etc! "banners/")
         newsticker-cache-filename                          (var! "newsticker/cache.el")
         newsticker-dir                                     (var! "newsticker/data/")
         nsm-settings-file                                  (var! "nsm-settings.el")
         omnisharp-cache-directory                          (var! "omnisharp/cache")
         org-clock-persist-file                             (var! "org/clock-persist.el")
         org-id-locations-file                              (var! "org/id-locations.el")
         org-publish-timestamp-directory                    (var! "org/timestamps/")
         org-registry-file                                  (var! "org/registry.el")
         recentf-save-file                                  (var! "recentf.el")
         save-place-file                                    (var! "save-place.el")
         savehist-file                                      (var! "savehist.el")
         server-auth-dir                                    (var! "server/")
         shared-game-score-directory                        (var! "gamescore/")
         tramp-auto-save-directory                          (var! "tramp/auto-save/")
         tramp-persistency-file-name                        (etc! "private/tramp/history.el")
         url-cache-directory                                (var! "url/cache/")
         url-configuration-directory                        (var! "url/configuration/")

         ;;; third party
         ac-comphist-file                                   (var! "ac-comphist.el")
         anaconda-mode-installation-directory               (var! "anaconda/")
         bbdb-file                                          (var! "bbdb/bbdb.el")
         bbdb-vcard-directory                               (var! "bbdb/vcard/")
         bm-repository-file                                 (var! "bm-repository.el")
         bmkp-current-bookmark-file                         (var! "bmkp/current-bookmark.el")
         bmkp-last-bookmark-file                            (var! "bmkp/last-bookmark.el")
         bookiez-file                                       (var! "bookiez")
         company-statistics-file                            (var! "company/statistics.el")
         company-tabnine-binaries-folder                    (var! "company/tabnine-binaries")
         debbugs-gnu-persistency-file                       (var! "debbugs.el")
         dired-recent-directories-file                      (var! "dired/recent.el")
         elfeed-db-directory                                (var! "elfeed/db/")
         elfeed-enclosure-default-dir                       (var! "elfeed/enclosures/")
         elmo-msgdb-directory                               (var! "elmo/")
         elmo-split-log-file                                (var! "elmo/split-log")
         emms-directory                                     (var! "emms/")
         emojify-emojis-dir                                 (var! "emojify/")
         geben-temporary-file-directory                     (var! "geben/")
         helm-adaptive-history-file                         (var! "helm/adaptive-history.el")
         helm-backup-path                                   (var! "helm/backup/")
         helm-github-stars-cache-file                       (var! "helm/github-stars-cache.el")
         httpd-root                                         (var! "simple-httpd/")
         indium-chrome-data-dir                             (var! "indium/chrome-profile")
         indium-workspace-file                              (var! "indium/workspaces.el")
         irfc-directory                                     (var! "irfc/")
         junk-file-directory                                (var! "junk-files")
         keyfreq-file                                       (var! "keyfreq.el")
         keyfreq-file-lock                                  (var! "keyfreq.lock")
         logview-cache-filename                             (var! "logview-cache")
         logview-views-file                                 (etc! "logview-views")
         lsp-server-root                                    (var! "lsp/servers")
         lsp-session-file                                   (var! "lsp/session")
         org-ditaa-jar-path                                 (var! "org/bin/ditaa.jar")
         org-ditaa-eps-jar-path                             (var! "org/bin/ditaaEps.jar")
         plantuml-jar-path                                  (var! "org/bin/plantuml.jar")
         org-projectile-projects-directory                  (org! "projects/")
         org-projectile-projects-file                       (org! "projects/global.org")
         mohkale-library-of-babel-file                      (etc! "babel-lib.org")
         multi-compile-history-file                         (var! "multi-compile-history.el")
         pcache-directory                                   (var! "pcache/")
         persp-save-dir                                     (var! "perspectives/")
         prescient-save-file                                (var! "prescient-save.el")
         projectile-cache-file                              (var! "projectile/cache.el")
         projectile-known-projects-file                     (var! "projectile/known-projects.el")
         purpose-default-layout-file                        (etc! "window-purpose/default-layout.el")
         purpose-layout-dirs                                `(,(etc! "window-purpose/layouts/"))
         rake-cache-file                                    (var! "rake.cache")
         request-storage-directory                          (var! "requests")
         smex-save-file                                     (var! "smex-save.el")
         tldr-directory-path                                (var! "tldr/")
         transient-history-file                             (var! "transient/history.el")
         org-pdftools-root-dir                              "~/multimedia/pdfs"
         transient-levels-file                              (etc! "transient/levels.el")
         straight-base-dir                                  (bin! "") ;; weird way to configure it, but okay
         transient-values-file                              (etc! "transient/values.el")
         treemacs-persist-file                              (var! "treemacs/persist.org")
         vimish-fold-dir                                    (var! "vimish-fold/")
         mohkale-snippets-dir                               (etc! "snippets/")
         yas-snippet-dirs                                   '(yasnippet-snippets-dir)
         yasnippet-snippets-dir                             mohkale-snippets-dir
         xkcd-cache-dir                                     (var! "xkcd")
         ))

    #+END_SRC

    For more complicated path based variables. The previous block let you specify them all on one
    line each... sometimes you may have to define it over multiple lines or give more detail. Thats
    what this is for.

    #+BEGIN_SRC emacs-lisp
      (with-no-warnings
        ;;; where do autosave files get stored
        (setq auto-save-file-name-transforms
              `((".*" ,(var! "auto-save" "sessions/") t)))

        ;;; where do backup files get stored
        (setq backup-directory-alist
              `(("." . ,(var! "backups/"))))

        ;;; where do undo-tree auto-saves go.
        (setq undo-tree-history-directory-alist
              `(("." . ,(var! "undo"))))

        ;; depends on platuml-jar-path being defined
        (setq org-plantuml-jar-path plantuml-jar-path)

        ;; installation file for the straight package manager.
        (setq straight-bootstrap-file (concat straight-base-dir
                                              "straight/repos/straight.el/bootstrap.el"))

        (setq undo-tree-skip-autosave-regex+
              (rx
               (or
                ;; match extensions in filename
                (and (or ".pdf" ".log") eol)
                ;; match exact file paths
                (and
                 (or
                  ;; wildcard regexp match. any match is a valid match.
                  (and "[*Org Src")
                  ;; match from the beginning of the line
                  (and
                   bol
                   (or
                    (eval dotemacs-var-path)
                    (eval (concat straight-base-dir "straight/"))
                    (eval package-user-dir)
                    (eval external-packages-directory)
                    (eval bookmark-default-file)
                    (eval mohkale-library-of-babel-file)
                    (eval mohkale-dashboard-banners-directory))))))))

        ;; I've only tested this on window/cygwin but aspell appears to be quite broken :P
        ;;   * I can't specify a path to any directory not within my home directory.
        ;;   * I can't specify any absolute path, even when that path is within my home directory.
        ;;   * If I want to reference a file in a subdirectory of my home directory, the path must begin with a
        ;;     slash.
        ;; THIS IS WAY TOO UNINTUITIVE.
        (setq ispell-personal-dictionary
              (file-relative-name (etc! "/ispell/dict.txt") "~"))

        ;; only accepts absolute paths and doesn't automatically append ".exe" when on windows.
        (setq pdf-info-epdfinfo-program (expand-file-name
                                         (var! (concat "pdf-tools/epdfinfo"
                                                       (when (eq system-type 'windows-nt)
                                                         ".exe"))))))

    #+END_SRC

    Post path setup. Do some stuff with your newly cleaned emacs :smile:.

    #+BEGIN_SRC emacs-lisp
      (push mohkale-package-root load-path)

      (when (file-exists-p custom-file)
        (load custom-file))

      (setenv "EDITOR"
              (concat "emacsclient --no-wait --suppress-output --server-file '"
                      (expand-file-name server-auth-dir) "server'"))

    #+END_SRC


    Add more paths to PATH for emacs to find when looking for executables. This is mostly where
    programs used only (or installed) by emacs will go.

    #+BEGIN_SRC emacs-lisp
      (setq exec-path
            (append exec-path
                    `(,(join-path lsp-server-root "kotlin/bin")
                      ,(join-path lsp-server-root "kotlin/debugger/bin")
                      ,(join-path lsp-server-root "haskell"))))

    #+END_SRC

    Make sure some subset of useful directories exist at startup. This is mostly for crazy
    packages that don't check whether paths exist, before writing to them. **Shame! Shame!
    Shame!**.

    #+BEGIN_SRC emacs-lisp
      (dolist (ensured-path `(,@desktop-path
                              ,eww-bookmarks-directory
                              ,newsticker-dir
                              ,external-packages-directory
                              ,dotemacs-org-path
                              ,yasnippet-snippets-dir
                              ,(var! "org/bin")
                              ,(var! "bbdb/")
                              ,(var! "company/")
                              ,(var! "elfeed/")
                              ,(var! "helm/")
                              ,(var! "projectile/")
                              ,(var! "bmkp/")
                              ,(var! "emojify/")
                              ,(var! "lsp/")
                              ,(var! "pdf-tools/")))
        (mkdir ensured-path t))

    #+END_SRC

*** package-initialise
    initialise installed packages and ensure packages needed to setup configuration
    from scratch is installed.

    #+NAME: setup-packages-list
    - which-key
    - bind-map
    - use-package
    - general
    - dash

    #+BEGIN_SRC emacs-lisp :var startup-requires=setup-packages-list
      ;; disable both package.el autloads
      ;; and selected packages in custom.
      (setq package-enable-at-startup  nil
            package--init-file-ensured nil)

      (package-initialize) ;; TODO find a way to remove this... without breaking everything
      (defalias 'package--save-selected-packages #'ignore) ;; stop messing with custom.el :P

      (defvar package-archives)
      (setq package-archives
            (append '(("melpa" . "https://melpa.org/packages/")
                      ;; ("org"       . "http://orgmode.org/elpa/")
                      ;; ("marmalade" . "http://marmalade-repo.org/packages/")
                      ("gnu"       . "http://elpa.gnu.org/packages/"))))

      (let ((plist-refreshed nil))
        (dolist (package startup-requires)
          ;; iterate for all required packages
          (setq package (intern (car package)))
          (unless (package-installed-p package)
            (unless plist-refreshed
              (package-refresh-contents)
              (setq plist-refreshed t))

            (package-install package))
          (require package)))

      ;; install (then load) the straight package manager.
      ;; ideally I'd like to use straight exclusively, but
      ;; it's really slow when you have a lot of packages.
      (let ((bootstrap-file straight-bootstrap-file)
            (bootstrap-version 5))
        (unless (file-exists-p straight-bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load straight-bootstrap-file nil 'nomessage))

      (setq straight-use-package-by-default nil
            use-package-always-ensure       nil
            straight-allow-recipe-inheritance t)
    #+END_SRC

    make use-package evaluate the :defer argument see [[https://github.com/jwiegley/use-package/issues/815][#815]].

    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'use-package
        (advice-add 'use-package-handler/:defer :around
                    (defun use-package-:defer-eval-wait+ (func name keyword arg &rest args)
                      (apply func name keyword (eval arg) args))))
    #+END_SRC

*** External Packages
    Install the following the packages directly, compare against the hash value when given
    and then begin package initialisation.

    #+NAME: non-melpa-packages
    | name                | hash            | url                                                                                       |
    |---------------------+-----------------+-------------------------------------------------------------------------------------------|
    |                     | <15>            |                                                                                           |
    | hide-comnt          | 9668645eab1fd8d223967ab90d3d34fe6e98aa3af47516f45e18f094137d7c6c | https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/hide-comnt.el          |
    | imenu-tree          | c4b3ae0d8b5c3e5a50c9c4b3f96fd48e309c2fae9a8902a1d649063c7b3b611c | https://www.emacswiki.org/emacs/download/imenu-tree.el                                    |
    | help-fns+           | e12cc9a3c7bd41ffd5be61a6d7b3f01c4ef094241683f6004fcd5cc5b9b2e51d | https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/help-fns%2B.el         |
    | lorem-ipsum         | 54cb139d6c88632aaef6364a2a6c6cadbb9a5082eb5032e69b5139dcc7074d88 | https://www.emacswiki.org/emacs/download/lorem-ipsum.el                                   |
    | profile-dotemacs    | 1d903fc16d4ab4716cf8097ddb88a5cbb3746c9e49fa3421ae147b0c383c3e7f | http://www.randomsample.de/profile-dotemacs.el                                            |
    | open-junk-file      | c0b835b329758dced4ccae6c2f3fd5af16af929437110ddde00ea55dc7d47be3 | https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/open-junk-file.el      |
    | sqlite-dump         | 8277c32f3e9dad7f760b946609c918dd51f32990137f839a000fb6ff5a049939 | https://user42.tuxfamily.org/sqlite-dump/index.html                                       |
    | company-cmake       | 4d682308eb4f6a4be92a4b7dcb2d181b5c26b4337799de0a308969d8babef0a2 | https://raw.githubusercontent.com/purcell/company-cmake/master/company-cmake.el           |
    | transpose-frame     | a40264a07b25d2c1d8d1be341d42952329d1bbfab8c23100904627fef4f4c7b8 | https://www.emacswiki.org/emacs/download/transpose-frame.el                               |
    | hs-lint             | 61bf6d3cfd43f2729d85ed407a7de5fd6b025540229bc0b57c37785d0b6d7450 | https://raw.githubusercontent.com/ndmitchell/hlint/master/data/hs-lint.el                 |
    | hlint-refactor-mode | 55d5a9e99f0384b15eacfdf2b17ae313c6ddbb0343980ed324707fcaaf2b718a | https://raw.githubusercontent.com/mpickering/hlint-refactor-mode/master/hlint-refactor.el |
    | miniedit            | c632c33c099362b084d965c51ec4b933be1278c7064096ce3b97cc830436055b | https://raw.githubusercontent.com/emacsmirror/miniedit/master/miniedit.el                 |
    | ibuffer-persp       | 6395294e2dd368866d79a81d37c27961e0f871937ccd82cff317e5ad67c52652 | https://raw.githubusercontent.com/rakshasa/ibuffer-persp/master/ibuffer-persp.el          |
    | org-link-edit       | ac84061d951ef9ef82794ba7f4416afb6da4283a182490a11ae455077321814c | https://raw.githubusercontent.com/kyleam/org-link-edit/master/org-link-edit.el            |
    | hydra-posframe      | a828d588082f0f011459f13aecf04e8a610ab150c566b6a18cd279c006a881a3 | https://raw.githubusercontent.com/Ladicle/hydra-posframe/master/hydra-posframe.el         |

    #+BEGIN_SRC emacs-lisp :var package-list=non-melpa-packages
      (defun external-packages/download-external-package (url dest-path)
        (let* ((dest-buffer (get-buffer-create "*external-packages*"))
               (download-args `("curl"              ; program
                                nil                 ; input file
                                ,dest-buffer        ; output dest
                                nil                 ; redisplay?
                                ; args
                                "-L"
                                "-o" ,dest-path
                                ,url))
               exit-code)
          (with-current-buffer dest-buffer
            (insert (format "curl: %s\n"
                            (nthcdr 4 download-args)))
            (setq exit-code (apply 'call-process download-args))
            (insert "\n"))

          exit-code))

      (defun external-packages/validate-package-hash (file dest-path hash)
        (let (result)
          (if (string-equal "" hash)
              (progn
                (display-warning 'external-packages (format "package %s has no hash check given: %s"
                                                            file
                                                            url))
                (setq result t))
            (with-temp-buffer
              (insert-file-contents dest-path)
              (let ((hash-result (secure-hash 'sha256 (buffer-string))))
                (if (string-equal hash hash-result)
                    (setq result t)
                  (display-warning 'external-packages (format "package %s failed with hash: %s != %s"
                                                              file
                                                              hash
                                                              hash-result))
                  (delete-file dest-path)))))
          result))

      (let ((install-path external-packages-directory)
            failed-installs)
        (push install-path load-path)
        ;; include packages in load path

        (dolist (row package-list)
          (let* ((file (nth 0 row))
                 (hash (nth 1 row))
                 (url  (nth 2 row))
                 (dest-path (expand-file-name (join-path install-path (concat file ".el"))))
                 download-args exit-code)
            (unless (or (string-equal "" file)
                        (string-equal "" url))
              (unless (file-exists-p dest-path) ;; only download when doesn't already exist
                (unless (and (zerop (external-packages/download-external-package url dest-path))
                             (external-packages/validate-package-hash file dest-path hash))
                  (push file failed-installs))))))

        (if (eq failed-installs nil)
            (let ((buffer (get-buffer "*external-packages*")))
              (and buffer
                   (kill-buffer buffer))) ;; kill process buffer when nothing failed
          (display-warning :warning (format "external-package : failed to download packages: %s" failed-installs))
          ))
    #+END_SRC

** leader
   replicate some +basically all+ the built in spacemacs leader features &
   keys... cause why fix what's not broken.

   #+BEGIN_SRC emacs-lisp
     (use-package spaceleader
       :demand   t
       :straight (spaceleader :type git :host github :repo "mohkale/spaceleader"))
   #+END_SRC

*** emacs-root
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "SPC" "M-x"
        "TAB" "last-buffer")

      (leader/set-keys
        "SPC" 'execute-extended-command
        "TAB" 'switch-to-last-buffer
        ;; "<C-tab>" 'indent-back-to-normal ;; C-TAB doesn't work
        "!" 'shell-command
        "&" 'async-shell-command
        "-" 'line-width
        "." 'repeat
        "1" 'winum-select-window-1
        "2" 'winum-select-window-2
        "3" 'winum-select-window-3
        "4" 'winum-select-window-4
        "5" 'winum-select-window-5
        "6" 'winum-select-window-6
        "7" 'winum-select-window-7
        "8" 'winum-select-window-8
        "9" 'winum-select-window-9
        "0" 'winum-select-window-by-number
        "U" 'universal-argument
        "u" 'smart-universal-argument)

      (general-define-key
        :keymaps 'universal-argument-map
        "M-u" 'universal-argument-batch-increment
        "M-U" 'universal-argument-batch-decrement)
    #+END_SRC

*** applications
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "a" "applications"
        "au" "undo tree")

      (leader/set-keys
        "a:" 'eshell
        "aC" 'calc-dispatch
        "ac" 'calendar
        "ad" 'ido-dired
        "aE" 'package-list-packages
        "af" 'list-faces-display
        "am" 'man
        "aP" 'proced
        "ap" 'list-processes
        "au" 'undo-tree-visualize
        "aX" 'customize)
    #+END_SRC

*** buffers
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "b" "buffers"
        "bt" "buffer-read-only-mode")

      (leader/set-keys
        "b RET" 'create-new-empty-buffer
        "b DEL" 'bury-buffer
        "bb" 'switch-to-buffer
        "bB" 'switch-to-buffer-other-window
        "bd" 'kill-this-buffer
        "be" 'safe-erase-buffer
        "bE" 'erase-buffer
        "bK" 'kill-this-buffer
        "bk" 'kill-this-buffer-and-window-maybe
        "bM" 'switch-to-messages-buffer
        "bm" 'buffer-menu
        "bn" 'next-buffer
        "bN" 'previous-buffer
        "bc" 'rename-buffer
        "bC" 'rename-uniquely
        "bo" 'occur
        "bs" 'switch-to-scratch-buffer
        "bt" 'read-only-mode
        "by" 'copy-whole-buffer-to-clipboard)
    #+END_SRC

*** compile/comments
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix "c" "compile/comments")

      (leader/set-keys
        ;; compile
        "c M-SPC" 'compile
        "cd" 'close-compilation-window ;; WARN not yet implemented
        "cs" 'kill-compilation
        "cr" 'recompile
        "cb" 'display-compilation-buffer

        ;; comment
        "cy" 'yank-and-comment
        "ck" 'comment-kill
        "c[" 'comment-box
        "ci" 'comment-indent

        "cc" 'toggle-comment-at-point
        "cC" 'toggle-comment-at-point-alt)
    #+END_SRC

*** error
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix "e" "errors")

      (leader/set-keys
        ;; TODO make flycheck aliases
        "en" 'next-error
        "eN" 'previous-error
        "ep" 'previous-error)
    #+END_SRC

*** files
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "f"  "files"
        "fC" "files/convert"
        "fe" '("emacs" . "emacs files")
        "fo" "open-externally"

        "fv" "variables")

      (leader/set-keys
        "f\"" 'recover-this-file
        "f'" 'recover-file
        "f~" 'write-backup
        "fa" 'write-autosave
        "fc" 'copy-file
        "fD" 'delete-buffer-file
        "fF" 'find-file-at-point
        "ff" 'find-file
        "fo" 'find-file-other-window
        "fl" 'find-file-literally
        "f|" 'find-file-at-point
        ;; "fo" 'open-file-or-directory-in-external-app ;; TODO implement
        "fR" 'rename-buffer-file
        "fy" 'show-and-copy-buffer-file-name
        "sF" 'find-dired
        "fq" 'find-file-literally

        "fCd" 'unix2dos
        "fCu" 'dos2unix

        "fev" 'emacs-version

        "fvd" 'add-dir-local-variable
        "fvf" 'add-file-local-variable
        "fvp" 'add-file-local-variable-prop-line)
    #+END_SRC

*** help
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "h"  "help"
        "hd" "help-describe")

      (leader/set-keys
        "hn" 'view-emacs-news

        "hdb" 'describe-bindings
        "hdc" 'describe-char
        "hdF" 'describe-face
        "hdk" 'describe-key
        "hdl" 'describe-last-keys ;; WARN not yet implemented
        "hdp" 'describe-package
        "hds" 'describe-system-info
        "hdt" 'describe-theme
        "hdv" 'describe-variable)
    #+END_SRC

*** hydras
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix
        "H" "hydras" "cut off one head, two more shall take it's place")

      (leader/set-keys
        "H TAB" 'hydra-indent/body
        "He"   'hydra-flycheck/body
        "Hc"   'hydra-org-clock/body
        "Hl"   'hydra-persp/body
        "HL"   'hydra-eyebrowse/body
        "Hx"   'hydra-text-zoom/body
        "Hv"   'hydra-vlc-rc/body
        "Hm"   'hydra-visual-move/body
        "Hh"   'hydra-winman/body)
    #+END_SRC

*** insert
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix "i" "insert")

      (leader/set-keys
        "ij" 'custom-insert-line-below
        "ik" 'custom-insert-line-above)
    #+END_SRC

*** jump
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix "j" "jump")
    #+END_SRC

*** modes
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "M" "modes"
        "Md" "dired")

      (leader/set-keys
        "Mz" 'zone
        "Ml" 'emacs-lisp-mode
        "ML" 'lisp-interaction-mode
        "Mc" 'c++-mode
        "MC" 'c-mode
        "Mf" 'flyspell-mode
        "Mt" 'fundamental-mode
        "Mp" 'python-mode
        "Mr" 'enh-ruby-mode
        "Ms" 'shell-script-mode
        "Mw" 'whitespace-mode
        "Mo" 'org-mode
        "Mx" 'hexl-mode
        "M M-d" 'decipher
        "M M-r" 'toggle-rot13-mode
        "Mv" 'visual-line-mode

        "Mdd" 'toggle-editable-dired
        "Mde" 'invoke-editable-dired
        "Md <escape>" 'wdired-abort-changes
        "Mdq" 'wdired-abort-changes)
    #+END_SRC

*** minor
    #+BEGIN_SRC emacs-lisp
      (defvar mohkale-minor-mode-leader-key "q"
        "leader key for minor mode bindings.
      this leader prefix is expected to be muddled and unreliable...
      due to tonnes of different minor modes collabratively binding to it.
      That said... I need a place to put minor-mode keys and this was
      unoccupied.")
    #+END_SRC

*** narrowing & numbers
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix "n" "narrrow/numbers")

      (leader/set-keys
        "nr" 'narrow-to-region
        "np" 'narrow-to-page
        "nw" 'widen)
    #+END_SRC

*** text
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "x" "text")

      (leader/set-keys
        "xa" 'describe-text-properties
        "xf" 'list-faces
        "xc" 'evil-capitalize
        "xp" 'pad-line-with-space-to-length
        "xP" 'pad-line-with-char-to-length
        "xt" 'remove-all-trailing-whitespace)
    #+END_SRC

*** toggles
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "t" "toggles"
        "tn" "toggle-line-numbers")

      (leader/set-keys
        "t TAB" 'set-indent-offset
        "tl" 'toggle-truncate-lines
        "tL" 'toggle-lexical-binding
        "tw" 'toggle-word-wrap
        "t|" 'toggle-scroll-bar
        "t-" 'toggle-horizontal-scroll-bar
        "td" 'toggle-debug-on-error
        "tq" 'toggle-debug-on-quit
        "tm" 'toggle-frame-maximized
        "tn" 'display-line-numbers-mode
        "tf" 'toggle-frame-fullscreen
        "tg" 'toggle-tool-bar-mode-from-frame
        "tG" 'toggle-menu-bar-mode-from-frame
        "tu" 'toggle-uniquify-buffer-names
        "te" 'toggle-indicate-empty-lines
        "ta" 'toggle-text-mode-auto-fille
        "tR" 'read-only-mode
        "tr" 'toggle-relative-linum
        "tc" 'toggle-case-fold-search
        "ti" 'toggle-input-method
        "ts" 'toggle-save-place-globally)
    #+END_SRC

*** search
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "s" "search/symbol")

      (leader/set-keys
        "sg" 'rgrep
        "sF" 'find-dired
        "sf" 'find-grep-dired)
    #+END_SRC

*** window
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix "w" "windows")

      (with-eval-after-load mohkale-mohkale-el-config-file
        (leader/set-keys
          "w" mohkale-window-map))
    #+END_SRC

** Global Bindings
   #+BEGIN_SRC emacs-lisp
     (general-define-key
       ;; ("ESC"   . nil) ;; WARN never do this... it broke everything

       ;; Control     for comamnd,
       ;; Meta        for command on region
       ;; Control-Alt for command on buffer
       "C-|"             'shell-command
       "M-|"             'shell-command-on-region
       "C-M-|"           'shell-command-on-buffer
       "C-&"             'async-shell-command
       "M-&"             'async-shell-command-on-region
       "C-M-&"           'async-shell-command-on-buffer

       ;; "C-SPC"           nil ;; emacs like binding
       "C-@" (general-simulate-key "C-SPC") ;; C-SPC in terminal

       "M-l"             'recenter-top-bottom
       "M-h"             nil
       ;; "M-l"             'kill-sentence
       ;; "M-h"             'backward-kill-sentence
       "M-L"             'downcase-word
       "M-H"             'upcase-word
       "C-M-a"           'mark-whole-buffer
       "C-/"             'toggle-comment-at-point
       "C-S-/"           'toggle-comment-at-point-alt
       "C-M-\\"          nil ;; was indent-region
       "C-M--"           'indent-region
       "C-M-h"           'left-word
       "C-M-l"           'right-word
       "M-j"             'custom-insert-line-below
       "M-k"             'custom-insert-line-above
       "M-r"             'revert-buffer
       "C-k"             nil
       "C-q"             'quit-window
       "C-j"             'newline-and-indent
       "C-<tab>"         'next-buffer
       "C-S-<tab>"       'previous-buffer
       "C-<iso-lefttab>" 'previous-buffer
       "RET"             'newline-and-indent
       "<C-M-return>"    'comment-indent-new-line
       "<C-backspace>"   'evil-delete-backward-word)

     (general-define-key
       :states leader-norm-states
       "gr"    'revert-buffer
       "gR"    'read-only-mode
       "gz"    'recenter-top-bottom)

     (general-define-key
       :states leader-nnorm-states
       ;; "S-SPC" 'insert-whitespace-after-point
       "M-DEL"   'delete-forward-char
       "<C-S-backspace>" 'kill-word)

     (general-define-key
       "C-w" '(:prefix-command mohkale-window-map
                               :which-key "windows"))

     (general-define-key
       :keymaps 'mohkale-window-map
       "m"   'window-zen
       "C-m" 'window-zen
       "M"   'window-zen-restore
       "M-m" 'window-zen-restore)

     (defmacro defun-save-excursion-insert-char (char-name char)
       (setq char (eval char))

       (let* ((char-name (symbol-name char-name))
              (func-name (intern (concat "save-excursion-insert-" char-name))))
         `(defun ,func-name (prefix)
            (interactive "P")
            (save-excursion
              (insert-char ,char (prefix-numeric-value prefix))))))

     (general-define-key
      :states leader-nnorm-states
      "S-M-SPC" (defun-save-excursion-insert-char space ? ))
   #+END_SRC

** Mohkale
*** Happy Birthday
    animate-birthday-present on your birthday... yippeee :)

    #+BEGIN_SRC emacs-lisp
      ;; (time-since '(0 0 0 8 12 1999 3 nil nil))

      (when (string-equal (format-time-string "%d.%m" (current-time))
                          "08.12")
        (add-hook 'emacs-startup-hook
                  'animate-birthday-present))
    #+END_SRC

*** Syntax
    Adjust the syntax entries for the given modes so that functions like evil word
    skip over them.

    #+NAME: underscore-supported-modes
    - c++
    - c
    - markdown
    - lisp
    - shell
    - enh-ruby

    #+BEGIN_SRC emacs-lisp :var modes=underscore-supported-modes
      (defun mohkale//adjust-syntax-entry ()
        "includes underscores in the syntax entry"
        (modify-syntax-entry ?_ "w"))

      (dolist (mode modes)
        (let ((hook-name (concat (car mode) "-mode-hook")))
          (add-hook (intern hook-name) #'mohkale//adjust-syntax-entry)))
    #+END_SRC

** Methods
   Define methods for a bunch of purposes within the configuration here. This includes

*** Core
    basic syntax sugar functions, inspired by [[https://github.com/hlissner/doom-emacs/blob/develop/core/core-lib.el][doom]].

    #+BEGIN_SRC emacs-lisp
      (defmacro lambda! (&rest body)
        "Expands to (lambda () (interactive) ,@body).
      A factory for quickly producing interaction commands, particularly for keybinds
      or aliases."
        (declare (doc-string 1) (pure t) (side-effect-free t))
        `(lambda () (interactive) ,@body))

      (defmacro plist-pop! (list prop &optional default)
        "delete PROP from plist LIST, returning value of PROP.
      if PROP isn't in LIST, DEFAULT will be returned."
        `(prog1
             (or (plist-get ,list ,prop) ,default)
           (cl-remf ,list ,prop)))

      (defun keyword-sym-normalise! (sym)
        "convert a keyword symbol, SYM, to a non-keyword symbol.
      eg. (keyword-sym-normalise! :hello) ;; => 'hello"
        (let ((sym-string (symbol-name sym)))
          (if (string-prefix-p ":" sym-string)
              (intern (substring sym-string 1))
            sym)))

      (cl-defmacro plist-bind! ((list &rest props) &rest body)
        "declare local bindings in BODY using a property list LIST.
      This functions exists as an alternative to `cl-defmacro's very limited support
      for variable argument lists alongside keyword argument lists. A use case I've
      encountered so often, it merited creating this.

      This function accepts a LIST argument and then a bunch of property specifications.
      For every property in PROPS, that property is popped from LIST and then included
      in the local scope of BODY. A property can be specified as an ALIST, in which case
      the `car' of the list is the property name and the `cdr' is the default value for
      the property.

      WARN LIST should be an identifier for a list variable... not a LIST by itself.

      The remaining value of LIST is all the properties which were not provided in the
      spec.
      "
        `(let* ((,list (cl-copy-list ,list))
                ,@(cl-loop for prop in props
                           with default = nil
                             when (listp prop)
                               do (setq default (cdr prop) prop (car prop))
                             end
                             collect (list (keyword-sym-normalise! prop)
                                           `(plist-pop! ,list ,prop ,default))))
           ,@body))
      (put 'plist-bind! 'lisp-indent-function 'defun)
    #+END_SRC

**** Misc
     #+BEGIN_SRC emacs-lisp
       (use-package mohkale-core
         :defer t
         :commands (with-no-write-messages))
     #+END_SRC

     Still core functions... just not so essential that they should be loaded at startup.

    #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-core.el
      (defmacro with-no-write-messages (&rest body)
        "execute BODY while supressing \"Wrote: file\" messages"
        `(let ((save-silently t))
           ;; replace the VISIT argument of write-region with something
           ;; that'll supress the write message
           (cl-letf* (((symbol-function 'actual-write-region)
                       (symbol-function 'write-region))
                      ((symbol-function 'write-region)
                       (lambda (a b c &optional d &rest args)
                         (apply #'actual-write-region a b c d 'nomsg (cdr args)))))
             ,@body)))
      (put 'with-no-write-messages 'lisp-indent-function 'defun)

    #+END_SRC

*** Mohkale
    User related functions. Find users dot file or some specific org files.

   #+BEGIN_SRC emacs-lisp
     (use-package mohkale
       :straight (mohkale :type built-in)
       :defer load-me-now-duration
       :commands (mohkale/eval-configuration-file
                  mohkale/build-configuration-file
                  mohkale/find-configuration-file
                  mohkale/find-tangled-config-file
                  mohkale/eval-configuration-file
                  mohkale/build-configuration-file
                  mohkale//tangle-configuration-file
                  mohkale//compile-configuration-files
                  mohkale/find-dotfile-file
                  mohkale/find-capture-notes-file
                  mohkale/find-org-university-file)
       :init
       (setq mohkale--server-leader-key "y")

       (leader/declare-prefix*
         "on" "find-notes-file"
         "ou" "find-uni-file"
         "feb" "build-config"
         "fec" "find-config"
         "fer" "eval-config"
         "fet" "find-tangled-config"
         "fed" "find-dotfile")

       (leader/set-keys
         "on" 'mohkale/find-capture-notes-file
         "ou" 'mohkale/find-org-university-file
         "feb" 'mohkale/build-configuration-file
         "fec" 'mohkale/find-configuration-file
         "fer" 'mohkale/eval-configuration-file
         "fed" 'mohkale/find-dotfile-file
         "fet" 'mohkale/find-tangled-config-file))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale.el
     (defmacro mohkale/defun-mohkale-find-package-file (file-type file-path &optional root)
       (setq file-path (eval file-path))

       (when root
         (setq file-path (concat (eval root) "/" file-path)))

       (let ((func-name (intern (concat "mohkale/find-" (symbol-name file-type) "-file"))))
         `(defun ,func-name (&optional prefix)
            (interactive "P")
            (if (not (file-exists-p ,file-path))
                (progn
                  (if (not prefix)
                      (error (concat "mohkale(error) : mohkale-find-file file not found: " ,file-path))
                    (make-directory (file-name-directory ,file-path))
                    (find-file ,file-path)))
              (find-file ,file-path)))))

     (mohkale/defun-mohkale-find-package-file dotfile        "init.el" user-emacs-directory)
     (mohkale/defun-mohkale-find-package-file configuration  mohkale-mohkale-config-file)
     (mohkale/defun-mohkale-find-package-file tangled-config mohkale-mohkale-el-config-file)

     (mohkale/defun-mohkale-find-package-file capture-notes  (org! "notes.org"))
     (mohkale/defun-mohkale-find-package-file org-university (org! "university.org"))

     (defun mohkale/eval-configuration-file ()
       (interactive)
       (org-babel-load-file mohkale-mohkale-config-file))

     (defun mohkale//tangle-configuration-file ()
       (let ((file    mohkale-mohkale-config-file)
             (el-file mohkale-mohkale-el-config-file))
         (when (file-newer-than-file-p file el-file)
           (require 'org)
           (org-babel-tangle-file file el-file))))

     (defun mohkale//compile-configuration-files ()
       (require 'bytecomp)
       (byte-compile-file mohkale-mohkale-el-config-file)

       (let ((tangled-files (directory-files-recursively dotemacs-bin-path
                                                         ".*\\.el$"))
             (packages-dir (expand-file-name package-user-dir)))
         (dolist (file tangled-files)
           (unless (string-prefix-p packages-dir file)
             (byte-compile-file file)))))

     (defun mohkale/build-configuration-file ()
       (interactive)
       (mohkale//tangle-configuration-file)

       (when mohkale-should-compile-config
         (mohkale//compile-configuration-files)))

     (provide 'mohkale)
   #+END_SRC

*** File
    #+BEGIN_SRC emacs-lisp
      (use-package mohkale-file
        :straight (mohkale-file :type built-in)
        :defer load-me-now-duration
        :commands (rename-buffer-file
                   delete-buffer-file
                   show-and-copy-buffer-file-name
                   write-kill-buffer
                   write-backup
                   write-autosave
                   jump-to-directory
                   jump-to-directory-other-window)
        :init
        (leader/set-keys
          "fj" 'jump-to-directory
          "jd" 'jump-to-directory
          "jD" 'jump-to-directory-other-window))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-file.el
      (defun rename-buffer-file (buffer &optional new-name)
        "renames the file associated with the buffer `buffer'
      if the buffer isn't visiting a file, this function is
      equivalent to `rename-buffer' followed by setting the
      file visited by the buffer."
        (interactive (list (current-buffer)))

        (with-current-buffer buffer
          (or new-name (setq new-name (read-file-name "new-name: ")))
          (let ((buffer-file (buffer-file-name buffer)))
            (if (get-buffer new-name)
                (message "a buffer with that name already exists: %s" new-name)
              (when (or (not (file-exists-p new-name))
                        (yes-or-no-p "file already exists, overwrite it:"))
                ;; destination doesn't exist, so can write
                ;; or
                ;; user agrees to overwrite, so can write
                (when (and buffer-file
                           (file-exists-p buffer-file))
                  ;; only rename buffer file if it exists
                  (rename-file buffer-file new-name t)
                  (message "moved file '%s' to '%s'" buffer-file new-name))
                (rename-buffer new-name)
                (set-visited-file-name new-name)
                (set-buffer-modified-p nil))))))

      (defun delete-buffer-file ()
        (interactive)
        (let ((buffer (current-buffer))
              (filename (buffer-file-name))
              (name (buffer-name)))
          (if (not filename)
              (message "buffer %s is not visiting a file" name)
            (when (yes-or-no-p "Are you sure you want to delete this file? ")
              (when (file-exists-p filename)
                (delete-file filename t))

              (kill-buffer buffer)))))

      (defun show-and-copy-buffer-file-name (&optional prefix)
        "Displays the current buffers name in the echo area & yanks it
      when a prefix arg is given, the buffer name is also inserted into
      the buffer. When a double prefix arg is given, the filename is
      inserted but the point is not moved. With a positive numerical
      prefix greater than 0, that many parent directories will be
      navigated to before yanking."
        (interactive "P")
        (let ((bufname (or (buffer-file-name)
                           (and (derived-mode-p 'dired-mode)
                                (string-trim-right (dired-current-directory) "/"))
                           "")))
          (cond
           ((consp prefix)
            (if (eq (car prefix) 4)
                (insert bufname)
              (save-excursion
                (insert bufname))))
           (prefix
            (while (and (> prefix 0)
                        bufname)
              (setq bufname (string-trim-right (file-name-directory bufname) "/")
                    prefix  (- prefix 1)))

            (or bufname (setq bufname ""))))

          (message bufname)
          (kill-new bufname)))

      (defalias 'jump-to-directory 'dired-jump)
      (defalias 'jump-to-directory-other-window 'dired-jump-other-window)

      (cl-defun write-backup (&optional prefix (silent t))
        "manually force emacs to backup the current buffer.
      By default doesn't do anything when the current buffer hasn't been modified.
      Pass a single-prefix `C-u` to force backing-up even if the buffer has not been
      modified. Pass two prefixes `C-u C-u`to backup the buffer and then save; this
      in affect backs up the last save and then saves the current buffer."
        (interactive "P")
        (let* ((modified (buffer-modified-p))
               (save-after (and (listp prefix)
                                (eq (car prefix) 8)))
               (save-before (and (not save-after)
                                 modified)))
          (if (and (not prefix)
                   (not modified))
              (or silent
                  (message "buffer not modified since last save"))
            (or save-before (save-buffer))

            ;; buffer-backed-up is permenently buffer-local so you have to account
            ;; for when it's already been backed up and when you first back it up.
            (if buffer-backed-up
                (let (buffer-backed-up)
                  (backup-buffer))
              (backup-buffer))

            (or save-after (save-buffer)))))

      (defalias 'write-autosave 'do-auto-save)

      (defun write-kill-buffer (&optional buffer-or-name confirm)
        "write buffer to file and then kill it"
        (interactive)
        (let ((buffer (get-buffer (or buffer-or-name (current-buffer)))))
          (when (buffer-modified-p)
            (write-file (or (buffer-file-name) (read-file-name "write file: "))
                        confirm))

          (when (or (not confirm)
                    (y-or-no-p (format "are you sure you want to kill this buffer (%s): " buffer)))
            (let ((window (get-buffer-window buffer)))
              (kill-buffer buffer)
              (when (and window (> (length (window-list)) 1))
                (delete-window window))))))

      (provide 'mohkale-file)
    #+END_SRC

*** Hooks/Handlers
    #+BEGIN_SRC emacs-lisp
      (defun no-junk-please-were-unixish ()
        "auto convert found files to use unix EOL formats"
        (let ((coding-str (symbol-name buffer-file-coding-system)))
          (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
            (set-buffer-file-coding-system 'unix))))

      (add-hook 'find-file-hook 'no-junk-please-were-unixish)

      (add-hook 'prog-mode-hook        'display-line-numbers-mode)
      (add-hook 'fundamental-mode-hook 'display-line-numbers-mode)

      (setq command-error-function
            (defun mohkale--command-error-function (data context caller)
              "hide some error message"
              (when (not (memq (car data) '(;; buffer-read-only
                                            beginning-of-buffer
                                            end-of-buffer)))
                (command-error-default-function data context caller))))

      (defun inhibit-messages-wrapper (func &rest args)
        (let ((inhibit-message t))
          (apply func args)))

      ;;; switch to buffer hook
      (defvar switch-to-buffer-hook nil
        "hook run when you switch to a buffer.")

      (advice-add 'switch-to-buffer
                  :after (defun switch-to-buffer--execute-hook (&rest args)
                           (apply 'run-hook-with-args 'switch-to-buffer-hook args)))

      ;;; theme loading hook
      (defvar after-load-theme-hook nil
        "hook which is executed after loading a theme")

      (advice-add 'load-theme
                  :after (defun load-theme-execute-hooks (&rest args)
                           (run-hooks 'after-load-theme-hook)))

      ;;; whitespace exemption
      (defvar mohkale--whitespace-exempt-modes '(help-mode
                                                 Buffer-menu-mode
                                                 ibuffer-mode
                                                 eshell-mode
                                                 term-mode
                                                 minibuffer-inactive-mode
                                                 eshell-mode)
        "modes under which no trailing whitespace is shown")

      (defvar mohkale--whitespace-exempt-buffers '("\\*Ibuffer confirmation\\*"
                                                   "\\*Org Export Dispatcher\\*")
        "regular expressions matching buffer names under which no trailing
      whitespace is shown.")

      (defun chain-match-regexp (string &rest regexps)
        "checks for string-match against STRING using regexps
      returns true if any of the regexps match the string."
        (let (match-found regexp)
          (while (and (not match-found)
                      (setq regexp (car regexps)))
            (setq match-found (string-match-p regexp string)
                  regexps (cdr regexps)))
          (not (not match-found))))

      (defun mohkale//set-trailing-whitespace--mode-based (&optional dont-set)
        "check the mode of the current buffer, to see whether trailing
      whitespace should be shown. with the optional parameter `dont-set'
      trailing whitespace will not be set.

      This function returns what the desired value of `show-trailing-whitespace'
      should be."
        (let ((show (not (and mohkale--whitespace-exempt-modes
                              (apply 'derived-mode-p
                                     mohkale--whitespace-exempt-modes)))))
          (prog1
              show
            (unless dont-set
              (setq show-trailing-whitespace show)))))

      (defun mohkale//set-trailing-whitespace--name-based (&optional dont-set)
        "check the name of the current buffer, to see whether trailing
      whitespace should be shown. see `mohkale//set-trailing-whitespace--mode-based'."
        (let ((show (not (and mohkale--whitespace-exempt-buffers
                              (apply 'chain-match-regexp
                                     (buffer-name)
                                     mohkale--whitespace-exempt-buffers)))))
          (prog1
              show
            (unless dont-set
              (setq show-trailing-whitespace show)))))

      (defun mohkale/set-trailing-whitespace (&rest args)
        (setq show-trailing-whitespace
              (and (mohkale//set-trailing-whitespace--mode-based t)
                   (mohkale//set-trailing-whitespace--name-based t))))

      ;; add switch-to-buffer hook because some functions, such as ibuffers confirmation
      ;; popup use switch-to-buffer instead of display buffer and there's no easy way
      ;; to modify it.
      (add-hook 'switch-to-buffer-hook #'mohkale/set-trailing-whitespace)
      (add-hook 'after-change-major-mode-hook (lambda (&rest args) (mohkale//set-trailing-whitespace--mode-based)))

      ;; indent configuration
      (defvar mohkale-indent-config '((t . 4))
        "alist configuring preferred indentation for buffers.
      the car of an entry is used to match which buffer it's applied to
      and cdr is used to determine the value of it.

      the car can be a symbol, a string, a function or some expression
      which evaluates to t. if it's a symbol, the major mode of the
      buffer is compared against it. if it's a string the name of the
      buffer is matched against it.

      the cons can be a number, a function or some expression which
      evaluates to a number.

      NOTE: indentation is set exclusively when a buffer-mode change
            occurs, changing the buffer name doesn't alter the indent.
      ")

      (defun set-indent-offset (&optional indent)
        "set the indentation level of the current buffer.
      this method uses `mohkale-indent-config' to determine what
      the indentation of the current buffer should be and then sets
      it. Also setting any mode dependent, specific indent bindings,
      alongside it.

      You can pass a specific value for the indent as an argument and
      the current buffers indentation will be set to that."
        (interactive "Nindent: ")
        (let* ((buffer (current-buffer))
               (buffer-name (buffer-name buffer))
               (indent-config mohkale-indent-config)
               _)
          (while (and (not indent)
                      (setq _ (pop indent-config)))
            (let ((matcher (car _)))
              (setq indent
                    (when (cond
                           ((eq matcher t) t)
                           ((symbolp matcher)
                            (eq matcher major-mode))
                           ((stringp matcher)
                            (string-match-p matcher buffer-name))
                           ((functionp matcher)
                            (funcall matcher))
                           (t (eval matcher)))
                      (cdr _)))))

          (if (not indent)
              (message "set-indent-offset::warn() unable to determine indent for current buffer.")
            (setq evil-shift-width indent)
            (setq-local tab-width indent)

            (when (= 0 (% indent 2))
              (setq-local tab-stop-list (number-sequence indent 40 indent)))

            ;; major mode dependent configurations
            (cond
             ((eq major-mode 'python-mode)
              (setq-local python-indent-offset indent))
             ((eq major-mode 'ruby-mode)
              (setq-local ruby-indent-level indent))
             ((eq major-mode 'enh-ruby-mode)
              (setq-local enh-ruby-indent-level indent))
             ((eq major-mode 'c-mode)
              (setq-local c-basic-offset indent))
             ((eq major-mode 'plantum-mode)
              (setq-local plantuml-indent-level indent))
             ((eq major-mode 'yaml-mode)
              (setq-local yaml-indent-offset indent))
             ((eq major-mode 'web-mode)
              (setq-local css-indent-offset indent)
              (setq-local web-mode-markup-indent-offset indent)
              (setq-local web-mode-css-indent-offset indent)
              (setq-local web-mode-code-indent-offset indent))))))

      (add-hook 'after-change-major-mode-hook #'set-indent-offset)

    #+END_SRC

    A neat idea, but feels like more hassle than it's worth. Maybe recheck if I face
    any more issues where this would come in useful.

    #+BEGIN_SRC emacs-lisp :tangle no
      ;; auto clear echo area after given delay... when the echo area just
      ;; remains static for a while, I can't tell whether emacs is still
      ;; working or is active and just waiting for input. This should make
      ;; it clearer after a little while.
      (defun clear-echo-area ()
        (message nil))

      (defvar auto-clear-echo-area-interval 5
        "clear the echo area after this many seconds have elapsed.
      set to nil to not disable echo area auto clear.")

      (defvar auto-clear-echo-area--timer nil)

      (advice-add 'message :after
                  (defun auto-clear-echo-area (string &rest args)
                    (when (and string
                               auto-clear-echo-area-interval)
                      (when auto-clear-echo-area--timer
                        (cancel-timer auto-clear-echo-area--timer))

                      (setq auto-clear-echo-area--timer
                            (run-with-idle-timer
                             auto-clear-echo-area-interval
                             nil
                             #'clear-echo-area)))))

      ;; eldoc should't be removed after idle delay... it's designed to be looked at.
      (advice-add 'eldoc-message :around
                  (defun eldoc-message--disable-auto-clear-echo-area (func &rest args)
                    (when auto-clear-echo-area--timer
                      ;; cancel any existing timers beforehand.
                      (cancel-timer auto-clear-echo-area--timer)
                      (setq auto-clear-echo-area--timer nil))

                    (let (auto-clear-echo-area-interval) ;; disable interval
                      (apply func args))))
    #+END_SRC

*** Yank Indent Adjust
    adjust indentation of yanked text in some modes... because doing so manually is
    a pain :tongue_out:.

    #+BEGIN_SRC emacs-lisp
      ;; initially sourced from: https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el#L99-L124
      (require 'dash)

      (defvar yank-indent-modes '(prog-mode
                                  sgml-mode
                                  js2-mode)
        "Modes in which to indent regions that are yanked (or yank-popped)
      set to nil, if you want to indent yanked text everywhere.")

      (defvar yank-advised-indent-threshold 1000
        "Threshold (# chars) over which indentation does not automatically occur.")

      (defun yank-advised-indent-function (beg end)
        "Do indentation, as long as the region isn't too large."
        (if (<= (- end beg) yank-advised-indent-threshold)
            (indent-region beg end nil)))

      (defmacro with-auto-indent-satisfied (prefix-var &rest body)
        `(when (and (not ,prefix-var)
                    (--any? (derived-mode-p it) yank-indent-modes))
           ,@body))
      (put 'with-auto-indent-satisfied 'lisp-indent-function 'defun)

      (defun yank--auto-indent (&optional arg)
        "if mode is in `yank-indent-modes' indent yanked text
      doesn't do anything if a prefix arg is given."
        (with-auto-indent-satisfied arg
          (let ((transient-mark-mode nil))
            (yank-advised-indent-function
             (region-beginning) (region-end)))))

      (advice-add 'yank     :after #'yank--auto-indent)
      (advice-add 'yank-pop :after #'yank--auto-indent)

      (defun evil-visual-paste--auto-indent (count &optional register yank-handler)
        ;; not sure what yank handler is for, leave it in, to avoid errors
        "same as `yank--auto-indent', but for evil visual yank replace."
        (with-auto-indent-satisfied register
          (let ((transient-mark-mode nil))
            (yank-advised-indent-function
             (region-beginning) (region-end)))))

      (advice-add 'evil-visual-paste :after #'evil-visual-paste--auto-indent)
      (advice-add 'evil-paste-after  :after #'evil-visual-paste--auto-indent)
      (advice-add 'evil-paste-before :after #'evil-visual-paste--auto-indent)

      (defun yank-unindented ()
        (interactive)
        (yank 1))
    #+END_SRC

*** Display Functions
    #+BEGIN_SRC emacs-lisp
      (use-package mohkale-buffer-display
       :defer t
       :commands (display-buffer--maybe-same-window-and-focus
                  display-buffer--maybe-pop-up-frame-or-window-and-focus
                  display-buffer-reuse-window-and-focus
                  display-buffer-in-previous-window-and-focus
                  display-buffer-in-side-window-and-focus
                  display-buffer-use-some-window-and-focus
                  display-buffer-pop-up-frame-and-focus
                  display-buffer-below-selected-and-focus
                  display-buffer-left
                  display-buffer-right
                  display-buffer-left-and-focus
                  display-buffer-right-and-focus))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-buffer-display.el
      (defmacro display-buffer--create-focus-method (func)
        `(defun ,(intern (concat (symbol-name func) "-and-focus")) (buffer alist)
           (let ((window (,func buffer alist)))
             (when window
               (select-window window)))))

      (display-buffer--create-focus-method display-buffer--maybe-same-window)
      (display-buffer--create-focus-method display-buffer-reuse-window)
      (display-buffer--create-focus-method display-buffer--maybe-pop-up-frame-or-window)
      (display-buffer--create-focus-method display-buffer-in-previous-window)
      (display-buffer--create-focus-method display-buffer-in-side-window)
      (display-buffer--create-focus-method display-buffer-use-some-window)
      (display-buffer--create-focus-method display-buffer-pop-up-frame)
      (display-buffer--create-focus-method display-buffer-below-selected)

      ;; See also: https://stackoverflow.com/questions/21542914/make-buffer-list-always-appear-in-horizontal-split/21544307#21544307
      (defun display-buffer-left (buffer alist)
        "display a buffer to the left of the current buffer.
      (1) If `buffer` is already displayed, then display it again in the same window.
      (2) If `buffer` is not already displayed, and if there is a window to the left,
          then display that `buffer` in said window.
      (3) If `buffer` is not already displayed, and if there is a window to the right, then
          use the selected window.
      (4) If all else fails, then create a new window to the left and display `buffer` there.
      (5) Select the target window which displays `buffer`."
        (let ((window
               (cond
                ((get-buffer-window buffer (selected-frame)))
                ;; ((window-in-direction 'above))
                ((window-in-direction 'left))
                ((window-in-direction 'right)
                 (selected-window))
                (t
                 (split-window (selected-window) nil 'left)))))
          (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)))

      (defun display-buffer-right (buffer alist)
        "display a buffer to the right of the current buffer.
      (1) If `buffer` is already displayed, then display it again in the same window.
      (2) If `buffer` is not already displayed, and if there is a window to the right,
          then display that `buffer` in said window.
      (3) If `buffer` is not already displayed, and if there is a window to the left, then
          use the selected window.
      (4) If all else fails, then create a new window to the right and display `buffer` there.
      (5) Select the target window which displays `buffer`."
        (let ((window
               (cond
                ((get-buffer-window buffer (selected-frame)))
                ;; ((window-in-direction 'above))
                ((window-in-direction 'right))
                ((window-in-direction 'left)
                 (selected-window))
                (t
                 (split-window (selected-window) nil 'right)))))
          (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)))

      (display-buffer--create-focus-method display-buffer-left)
      (display-buffer--create-focus-method display-buffer-right)

      (provide 'mohkale-buffer-display)
    #+END_SRC

*** Misc
    #+BEGIN_SRC emacs-lisp
      (use-package mohkale-misc
        :defer t
        :commands (toggle-lexical-binding
                   keymaps-at-point
                   show-prefix
                   toggle-relative-linum))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-misc.el
      (defun toggle-lexical-binding (&optional prefix)
        (interactive "P")
        (if (not prefix)
            (setq lexical-binding (not lexical-binding))
          (cond
           ((or (listp prefix) (> prefix 0))
            (setq lexical-binding t))
           (t
            (setq lexical-binding nil))))

        (message "lexical binding: %s" (if lexical-binding
                                           (propertize "enabled" 'face 'compilation-info)
                                         (propertize "disabled" 'face 'compilation-error))))

      (defun show-prefix (&optional prefix)
        (interactive "P")
        (message "prefix is: %s" prefix))

      (defun toggle-relative-linum (&optional prefix)
        "toggle relative line numbers in the current buffer
      by default, doesn't do anything if line numbers aren't visible.

      pass the prefix argument to force display of line numbers first."
        (interactive "P")
        (when (or prefix display-line-numbers)
          (setq display-line-numbers
                (if (eq display-line-numbers 'relative)
                    t
                  'relative))))

      (defun keymaps-at-point ()
        "List entire keymaps present at point."
        (interactive)
        (let ((map-list
               (list
                (mapcar (lambda (overlay)
                          (overlay-get overlay 'keymap))
                        (overlays-at (point)))
                (mapcar (lambda (overlay)
                          (overlay-get overlay 'local-map))
                        (overlays-at (point)))
                (get-text-property (point) 'keymap)
                (get-text-property (point) 'local-map))))
          (apply #'message
                 (concat 
                  "Overlay keymap: %s\n"
                  "Overlay local-map: %s\n"
                  "Text-property keymap: %s\n"
                  "Text-property local-map: %s")
                 map-list)))

      (provide 'mohkale-misc)
    #+END_SRC

*** Text
    #+BEGIN_SRC emacs-lisp
      (use-package mohkale-text-query
        :defer t
        :straight (mohkale-text-query :type built-in)
        :commands (line-width
                   column-number
                   point-to-coordinates
                   line-empty-p
                   list-faces))

      (use-package mohkale-text
        :defer t
        :straight (mohkale-text :type built-in)
        :commands (dos2unix
                   unix2dos
                   pad-line-with-char-to-length
                   insert-whitespace-after-point
                   pad-line-with-space-to-length
                   remove-all-trailing-whitespace
                   toggle-comment-at-point
                   tab-to-tab-stop-with-prefix
                   indent-back-to-normal
                   back-to-tab-stop
                   toggle-comment-at-point-alt
                   custom-insert-line
                   custom-insert-line-below
                   custom-insert-line-above
                   evil-join-backwards))
    #+END_SRC

**** Querying
     functions for querying information about the text at point or retrieve other relevent information.

     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-text-query.el
       (defun line-width (char-pos)
         "returns the number of columns on the line at char-pos"
         (interactive (if current-prefix-arg
                          (list current-prefix-arg)
                        (list (point))))
         (save-excursion
           (if (not (eql char-pos (point)))
             (goto-char char-pos))
           (let ((line-width (max (- (line-end-position) (line-beginning-position) 1) 0)))
             (if (called-interactively-p 'any)
                 (message (format "Line Width: %03d" line-width)))

             line-width)))

       (defun column-number (point)
         "returns the column number at point"
         (interactive "")
         (save-excursion
           (goto-char point)
           (current-column)))

       (defun point-to-coordinates (&optional point)
         "convert a point to an XY coordinate alist"
         (or point (setq point (point)))
         `(,(line-number-at-pos point) . ,(column-number point)))

       (defun line-empty-p (&optional point)
         (save-excursion
           (and point (goto-char point))
           (beginning-of-line)
           (looking-at "[[:space:]]*$")))

       (defun list-faces (&optional point)
         (interactive "d")
         (or point (setq point (point)))
         (let ((faces (remq nil
                            `(,(get-char-property point 'read-face-name)
                              ,(get-char-property point 'face)
                              ,(plist-get (text-properties-at point) 'face)))))
           (and (called-interactively-p 'any) (message (format "%s" faces)))
           faces))

       (provide 'mohkale-text-query)
     #+END_SRC

**** Formatting
***** Chunks
      manipulate chunks of text, such as leading indentation or sequential padding.

      #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-text.el
        (defun dos2unix ()
          "Not exactly but it's easier to remember"
          (interactive)
          (set-buffer-file-coding-system 'unix 't))

        (defun unix2dos ()
          (interactive)
          (set-buffer-file-coding-system 'dos 't))

        (defun pad-line-with-char-to-length (desired-length char)
          "appends char as many times as required from cursor position"
          (interactive "Nline length: \nccharacter: \nd")
          (barf-if-buffer-read-only) ; can't pad read only buffer

          (save-excursion
            (let* ((line-char-count (line-width (point))))
              (if (>= line-char-count desired-length)
                  (error (format "line of length %03d is already larger than desired: %03d" line-char-count desired-length))
                (insert (make-string (- desired-length line-char-count) char))))))

        (defun pad-line-with-space-to-length (desired-length)
          "invokes pad-line-with-char-to-length with char as space"
          (interactive "Nline length: \n")
          (pad-line-with-char-to-length desired-length ?\s))

        ;; (defun remove-indentation-spaces ()
        ;;   "remove TAB-WIDTH spaces from the beginning of this line"
        ;;   (interactive)
        ;;   (if (save-excursion (re-search-backward "[^ \t]" (line-beginning-position) t))
        ;;       (delete-backward-char 1)
        ;;     (indent-rigidly (line-beginning-position) (line-end-position) (- tab-width))))

        (defun remove-all-trailing-whitespace (start end)
          "removes all trailing whitespace from every line in buffer"
          (interactive (if (region-active-p)
                           (list (region-beginning) (region-end))
                         (list (point-min) (point-max))))

          (barf-if-buffer-read-only) ; can't remove from current buffer

          (save-excursion
            (goto-char end) ; start from end so delete can work forward

            (while (and (> (point) start)
                        (re-search-backward " +$" nil t))
              (delete-region (point) (line-end-position)))))

        (defun indent-back-to-normal (&optional column)
          "indents the current line using indent region.
        this'll either reset indentation to it's normal position, or
        bring you to the beginning of an empty line. Specify a column
        value to force that column to be used by indent region."
          (interactive "P")

          (let ((inhibit-message t))
            (indent-region (line-beginning-position) (1+ (line-end-position)) column)))

        (defun insert-whitespace-after-point (&optional count)
          "inserts whitespace from point upto COUNT times
        without moving point."
          (interactive "P")
          (or  count         (setq count 1))
          (and (listp count) (setq count (car count)))

          (save-excursion
            (insert (make-string count ? ))))

        ;; https://emacs.stackexchange.com/questions/32816/backwards-tab-to-tab-stop
        (defun tab-to-tab-stop-with-prefix (&optional prev)
          "Like `tab-to-tab-stop', but toggle direction with prefix."
          (interactive "P")
          (let ((nexttab (indent-next-tab-stop (current-column) prev)))
            (delete-horizontal-space t)
            (indent-to nexttab)))

        (defun back-to-tab-stop ()
          (interactive)
          (let ((current-prefix-arg 1))
            (call-interactively #'tab-to-tab-stop-with-prefix)))
      #+END_SRC

***** Commenting
      comment regions of text or by default, the current line.

      #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-text.el
        (defun toggle-comment-at-point (start end)
          "toggle comment on line or region
        pass a prefix argument to bulk toggle across multiple lines.
        This function will always comment the line your point is on,

        prefix behaviour:
        | prefix range | behaviour                                        |
        |--------------+--------------------------------------------------|
        | 0            | current line only                                |
        | >1           | current line and upto prefix-1 lines after point |
        | <1           | current line and upto prefix lines before point  |

        the behaviour is mapped to exactly replicate the vim dd command."
          (interactive (let ((prefix current-prefix-arg))
                         (if (region-active-p)
                             ;; always use region when region available
                             (list (region-beginning) (region-end))
                           (if (or (not prefix)
                                   (listp prefix) ;; regular prefix
                                   (zerop prefix))
                               ;; no prefix, comment current line only
                               (list (line-beginning-position) (line-end-position))
                             ;; prefix given, use it to determine comment region
                             (let* ((prefix-positive (> prefix 0))
                                    (current-pos (if prefix-positive
                                                     (line-beginning-position)
                                                   (line-end-position))))
                               (save-excursion
                                 (if prefix-positive
                                     (progn
                                       (evil-next-line (- prefix 1))
                                       (list current-pos (line-end-position)))
                                   (evil-next-line prefix)
                                   (list (line-beginning-position) current-pos))))))))
          (comment-or-uncomment-region start end))

        (defun toggle-comment-at-point-alt ()
          "variant of toggle-comment-at-point which conforms to relative line numbers

        prefix behaviour:
        | prefix range | behaviour                                         |
        |--------------+---------------------------------------------------|
        | 0            | current line only                                 |
        | >1           | current line and upto prefix-1 lines after point  |
        | <1           | current line and upto prefix+1 lines before point |
        "
          (interactive)
          (let ((current-prefix-arg (and current-prefix-arg
                                         (cond
                                          ((>= current-prefix-arg 1) (1+ current-prefix-arg))
                                          ;; ((<  current-prefix-arg 0) (1- current-prefix-arg))
                                          (t current-prefix-arg)))))
            (call-interactively 'toggle-comment-at-point)))

        (defun yank-and-comment (&optional prefix)
          (interactive "P")
          (when (> (length kill-ring)
                   0)
            (save-excursion
              (let ((beginning (point)))
                (call-interactively 'yank)
                (comment-region beginning (point))))
            (evil-forward-word))) ;; move to beginning of comment
      #+END_SRC

***** Line Insertion
      line insertion and joining functions.

      #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-text.el
        (defun custom-insert-line (&optional prefix)
          "inserts a line above or below point

        if a prefix argument of 0 or more (or none) is given, the
        line is inserted below the point. Otherwise its inserted
        above the point.

        The absolute value of the prefix determines how many lines
        are inserted.

        Eg: A prefix of:
          ,* nil - inserts a single line below the cursor
          ,* -1  - inserts a single line above the cursor
          ,* 0   - inserts a single line below the cursor
          ,* 1   - inserts a single line below the cursor
          ,* -10 - inserts 10 lines above the cursor
          ,* 10  - inserts 10 lines below the cursor"
          (interactive "P")

          (save-excursion
            (let ((move-arg (if (or (not prefix)
                                    (>= prefix 0))
                                nil ; if prefix xor prefix >= 0
                              0)))
              (move-end-of-line move-arg)
              (open-line (max 1 (abs prefix))))))

        (defun custom-insert-line-below (&optional prefix)
          (interactive "P")
          (custom-insert-line (abs (or prefix 1))))

        (defun custom-insert-line-above (&optional prefix)
          (interactive "P")
          (custom-insert-line (- (abs (or prefix 1)))))

        (defun evil-join-backwards (&optional prefix)
          "same as join line, except joins line immeadiately before point"
          (interactive "p")
          (let ((start nil)
                (end   nil))
            (if (evil-visual-state-p)
                (let ((range (evil-visual-range)))
                  (setq start (nth 0 range))
                  (setq end   (nth 1 range)))
              ;; not visual, calculate ranges
              (setq end (point))
                (save-excursion
                  (forward-line (- (abs prefix)))
                  (setq start (point))))
            ;; remove excursion block if you wan't to
            ;; reallign point to start of line on join
            (save-excursion
              (if (line-empty-p start)
                  ;; when joining onto an empty line
                  ;; maintain leading whitespace
                  (evil-join-whitespace start end)
                ;; otherwise trim to single space
                (evil-join start end)))))

        (provide 'mohkale-text)
      #+END_SRC

*** Buffers, Windows & Frames
    #+BEGIN_SRC emacs-lisp
      (use-package mohkale-bufwin
        :straight (mohkale-bufwin :type built-in)
        :defer load-me-now-duration
        :commands (switch-to-scratch-buffer
                   kill-this-buffer-and-window-maybe
                   switch-to-last-buffer
                   kill-all-windows-and-return-to-home
                   halt-and-catch-fire
                   switch-to-messages-buffer
                   force-set-all-visible-windows-dedication
                   window-zen
                   window-zen-restore
                   display-last-buffer
                   vertical-display-last-buffer
                   shell-command-on-buffer
                   set-window-dedication
                   async-shell-command-on-buffer
                   safe-erase-buffer
                   create-new-empty-buffer
                   copy-whole-buffer-to-clipboard
                   split-window-right-and-focus
                   split-window-below-and-focus)
        :init
        (general-define-key
          :keymaps 'mohkale-window-map
          "T" 'force-set-all-visible-windows-dedication
          "o"   'display-last-buffer
          "C-o" 'display-last-buffer
          "D"   'set-window-dedication
          "M-d" 'set-window-dedication
          "O"   'vertical-display-last-buffer
          "M-o" 'vertical-display-last-buffer))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-bufwin.el
      (defvar scratch-buffer-name "*scratch*"
        "name of users scratch buffer")

      (defun create-new-empty-buffer (&optional buffer-name)
        "creates and returns a new empty scratch like buffer
      with prefix it prompts you for the name of the buffer.
      if called interactively, the new buffer is switched to."
        (interactive "P")
        (let* ((def-buf-name scratch-buffer-name)
               (buffer-name
                (cond
                 ((stringp buffer-name) buffer-name)
                 (buffer-name (read-buffer "buffer name: " def-buf-name))
                 (t                     def-buf-name)))
               (buffer-name (generate-new-buffer-name buffer-name))
               (buffer (get-buffer-create buffer-name)))
          (with-current-buffer buffer
            (funcall-interactively initial-major-mode))
          (when (called-interactively-p)
            (switch-to-buffer buffer))
          buffer))

      (defun switch-to-scratch-buffer (&optional prefix)
        "switch to the scratch buffer
      with prefix, prompts for which buffer names like the scratch
      buffer to switch to. If none exists, a new scratch buffer will
      be made. If only one exists, it will be switched to and if more
      than one exists then prompts for it."
        (interactive "P")
        (if (not prefix)
            ;; switch to original scratch buffer
            (let ((buffer (get-buffer scratch-buffer-name)))
              (if buffer
                  (switch-to-buffer buffer)
                (call-interactively 'create-new-empty-buffer)))
          (let* ((buffer-list (seq-filter (lambda (x)
                                            (string-match
                                             (regexp-quote scratch-buffer-name)
                                             (buffer-name x) 0))
                                          (sort (buffer-list) (lambda (x y) (string<
                                                                        (buffer-name x)
                                                                        (buffer-name y))))))
                 (buffer-names (mapcar #'buffer-name buffer-list))
                 buffer)
            (cond
             ((zerop (length buffer-list))
              (setq buffer (create-new-empty-buffer)))
             ((eq 1 (length buffer-list))
              (setq buffer (car buffer-list)))
             (t
              (require 'counsel)
              (setq buffer (ivy-read "Switch to buffer: " buffer-names
                                     :require-match t
                                     :keymap ivy-switch-buffer-map
                                     :matcher #'ivy--switch-buffer-matcher
                                     :caller 'switch-to-scratch-buffer
                                     :unwind #'counsel--switch-buffer-unwind
                                     :update-fn 'counsel--switch-buffer-update-fn))))
            (when (called-interactively-p)
              (switch-to-buffer buffer))
            buffer)))

      (defun switch-to-messages-buffer ()
        "switches to messages buffer"
        (interactive)
        (switch-to-buffer (messages-buffer)))

      (defun switch-to-last-buffer ()
        (interactive)
        (switch-to-buffer nil))

      (defun kill-this-buffer-and-window-maybe ()
        "kills the currently open buffer and the window if another is open"
        (interactive)
        (let ((window-count (length (window-list))))
          (if (> window-count 1)
              (kill-buffer-and-window)
            (kill-this-buffer))))

      (defun kill-all-windows-and-return-to-home ()
        "kills every other window and returns to home buffer"
        (interactive)
        (dolist (window (cdr (window-list)))
          ;; window-list starts with current window
          (delete-window window))
        (goto-home-buffer))

      (defalias 'halt-and-catch-fire #'kill-all-windows-and-return-to-home)

      (defun force-set-all-visible-windows-dedication (&optional dedicate)
        "allows you to set the dedication of all visible windows
      dedicate if truthy, will result in all windows recieving a dedication.
      if falsy, all windows will have their dedication removed"
        (interactive "P")
        ;; TODO require persp-mode here
        (and dedicate (setq dedicate t))      ; rationalise value as bool
        (or  dedicate (setq dedicate nil))    ; rationalise value as nil

        (dolist (window (window-list))
          (when (not (eq dedicate (window-dedicated-p window)))
            (set-window-dedicated-p window dedicate))))

      (let ((window-zen-register ?_))
        (defun window-zen (&optional prefix)
          "Maximize buffer or undo maximize buffer
      pass prefix to also restore original point."
          ;; from https://gist.github.com/3402786
          (interactive "P")
          (if (and (= 1 (length (window-list)))
                   (assoc window-zen-register register-alist))
              (window-zen-restore prefix)
            (window-configuration-to-register window-zen-register)
            (delete-other-windows)))

        (defun window-zen-restore (&optional prefix)
          "force restoration of window, instead of replacement of previous zen.
      like `window-zen' pass prefix argument to save excursion"
          (interactive)
          (unless (assoc window-zen-register register-alist)
            (user-error "no previous zen found."))

          (if prefix
              (jump-to-register window-zen-register)
            (save-excursion
              (jump-to-register window-zen-register)))))

      (defun shell-command-on-buffer (&optional prefix)
        "Asks for a command and executes it in inferior shell with current buffer
      as input. if prefix is given, output of command is inserted in current buffer
      at point. Again... how is this not a built in command :(."
        (interactive "P")
        (let ((command (read-shell-command "Shell command on buffer: "))
              (input-buffer (current-buffer)) output-buffer process-output)
          (with-temp-buffer ;; needed for process output
            (setq output-buffer (current-buffer))

            (with-current-buffer input-buffer
              (shell-command-on-region (point-min) (point-max) command output-buffer nil output-buffer))

            (setq process-output (buffer-string)))

          (if prefix
              (insert process-output)
            (message process-output))))

      (defun async-shell-command-on-region (&optional start end prefix)
        "same as `async-shell-command', but also sends the current region
      as stdin to the asynchronous process... why this isn't a built in
      command escapes me."
        (interactive "r\nP")
        (require 'subr-x) ;; needed for string-empty-p

        (unless (eq start end) ;; region is not active
          (let ((command (read-shell-command "Async shell command on buffer: ")))
            (unless (string-empty-p command)
              (async-shell-command command) ;; XXX WHY??? don't you return the process :P
              (let ((program-buffer (get-buffer "*Async Shell Command*")))

                (process-send-region (get-buffer-process program-buffer) start end)

                (with-current-buffer program-buffer
                  (comint-send-eof)
                  (evil-normal-state)

                  (unless (get-buffer-process program-buffer)
                    (funcall-interactively 'initial-major-mode)))

                (display-buffer program-buffer))))))

      (defun async-shell-command-on-buffer (&optional prefix)
        "same as `async-shell-command-on-region' but sends buffer as region"
        (interactive "P")
        (async-shell-command-on-region (point-min) (point-max) prefix))

      (defun safe-erase-buffer (&optional prefix)
        "prompts to really erase and then erases the current buffer"
        (interactive "P")
        (barf-if-buffer-read-only)
        (when (or prefix
                  (y-or-n-p (concat "Erase content of buffer "
                                    (buffer-name)
                                    " ?")))
            (erase-buffer)))

      (defun split-window-right-and-focus ()
        (interactive)
        (split-window-horizontally)
        (other-window 1))

      (defun split-window-below-and-focus ()
        (interactive)
        (split-window-vertically)
        (other-window 1))

      (defun copy-whole-buffer-to-clipboard (buffer)
        (interactive (list (current-buffer)))
        (with-current-buffer buffer
          (copy-region-as-kill (point-min) (point-max))))

      (defun display-last-buffer ()
        (interactive)
        (display-buffer
         (other-buffer)
         '((display-buffer-below-selected-and-focus
            display-buffer-in-previous-window-and-focus
            display-buffer-use-some-window-and-focus
            display-buffer-pop-up-frame-and-focus))))

      (defun vertical-display-last-buffer ()
        (interactive)
        (display-buffer
         (other-buffer)
         (cons '(display-buffer-right-and-focus
                 display-buffer-in-previous-window-and-focus
                 display-buffer-use-some-window-and-focus
                 display-buffer-pop-up-frame-and-focus)
               '((side . right)
                 (window-width . 0.5)))))

      (cl-defmacro window-route (&rest paths)
        "macro to see which window exists at the end of a route
      from the current window.

      Accepts up, down, left & right as direction markers & every
      route begins from the top left hand side of the current window."
        `(let ((paths ',paths))
           (if (not paths)
               (selected-window)
             (condition-case err
                 (save-excursion
                   ;; goto start to ensure route begins from
                   ;; top left hand side of current window.
                   (goto-char (max (point-min) (window-start)))
                   (goto-char (line-beginning-position))
                   (save-selected-window
                     (let (head)
                       ;; TODO check whether to goto top left hand side here.
                       (while (setq head (pop paths))
                         (cond
                          ((eq head 'up)    (windmove-up))
                          ((eq head 'down)  (windmove-down))
                          ((eq head 'left)  (windmove-left))
                          ((eq head 'right) (windmove-right))))
                       (selected-window))) )
               (user-error (message "window-route: %s" err))))))

      ;; (defun window-expand-up ()
      ;;   "Expand current window into region of window above.

      ;;                          Begun from 3           Begun from 2
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1             |      | 1        | 3  |      | 2        | 1  |
      ;; |               |  |-> |          |    |  |-> |          |    |
      ;; |---------+-----|      |----------+    |      |          +----|
      ;; | 2       | 3   |      | 2        |    |      |          | 3  |
      ;; +---------------+      +---------------+      +---------------+

      ;; "
      ;;   )

      ;; (defun window-expand-down ()
      ;;   "Expand current window into region of window below.

      ;;                          Begun from 2           Begun from 1
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1       | 2   |      | 1        | 2  |      | 1        | 2  |
      ;; |         |     |  |-> |          |    |  |-> |          |    |
      ;; |---------+-----|      |----------+    |      |          +----|
      ;; | 3             |      | 3        |    |      |          | 3  |
      ;; +---------------+      +---------------+      +---------------+
      ;; "
      ;;   )

      ;; (defun window-expand-right ()
      ;;   "Expand current window into region of window to the right.

      ;;                          Begun from 1           Begun from 3
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1       | 2   |      | 1             |      | 1        | 2  |
      ;; |         |     |  |-> |               |  |-> |          |    |
      ;; |---------+     |      |----------+----|      |----------+----|
      ;; | 3       |     |      | 3        | 2  |      | 3             |
      ;; +---------------+      +---------------+      +---------------+
      ;; "
      ;;   )

      ;; (defun window-expand-left ()
      ;;   "Expand current window into region of window to the left.

      ;;                          Begun from 2           Begun from 3
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1       | 2   |      | 2             |      | 1        | 2  |
      ;; |         |     |  |-> |               |  |-> |          |    |
      ;; |         +-----|      |----------+----|      |----------+----|
      ;; |         | 3   |      | 1        | 3  |      | 3             |
      ;; +---------------+      +---------------+      +---------------+
      ;; "
      ;;   )

      (defun set-window-dedication (&optional prefix window)
        "Set the dedication value for the current window.
      By default it toggles the dedication. Supply a prefix arg
      to explicitly enable or disable.

      When a window is dedicated, you can't change the buffer for it.
      "
        (interactive "P")
        (when (and prefix
                   (listp prefix))
          (setq prefix (car prefix)))
        (or window (setq window (selected-window)))

        (set-window-dedicated-p
         window
         (if prefix
             (> prefix 0)
           (not (window-dedicated-p window)))))

      (provide 'mohkale-bufwin)
    #+END_SRC

*** evil
    #+BEGIN_SRC emacs-lisp
      (use-package mohkale-evil
        :defer t
        :after evil
        :commands (evil-capitalize
                   evil-reverse
                   evil-adjust-eval-print-last-sexp
                   evil-adjust-eval-last-sexp
                   evil-adjust-eval-replace-last-sexp
                   evil-toggle-comment
                   evil-narrow-yank
                   evil-shift-normal-state))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/mohkale-evil.el
      (require 'evil)

      (evil-define-operator evil-capitalize (beg end)
        (capitalize-region beg end))

      (defun evil-shift-normal-state (&optional arg)
        "return to normal state while also removing
      any trailing whitespace from the current line"
        (interactive "P")
        (remove-all-trailing-whitespace (line-beginning-position)
                                        (line-end-position))
        (evil-normal-state arg))

      (evil-define-operator evil-narrow-yank (beg end type register yank-handler)
        "`evil-yank' except block yanks are yanked as their own lines.
      evil by default yanks them such that you can compose them onto other lines.
      this isn't always desirable (especially when you want to filter a region onto
      it's own lines, thus this method satifies that requirement.

      eg:
      `evil-yank' cfj then `evil-paste-after'.
        ab|c|   >   abc|c
        de|f|   >   deff
        gh|j|   >   ghjj

      `evil-narrow-yank' cfj then `evil-paste-after'.
        ab|c|   >   abc
        de|f|   >   |c
        gh|i|   >   f
                >   j
                >   def
                >   ghj
      "
        (evil-visual-restore)
        (if (eq type 'block)
            (progn
              (copy-rectangle-as-kill beg end)

              (with-temp-buffer
                (yank-rectangle)
                (evil-yank (point-min) (point-max) 'line register yank-handler)))
          (evil-yank beg end type register yank-handler)))

      (evil-define-operator evil-toggle-comment (beg end)
        :type        line
        :repeat      t
        :move-point  nil
        :keep-visual nil
        "run `toggle-comment-at-point' using evil motion."
        (toggle-comment-at-point beg end))

      (defun-evil-adjust-to-eol evil-adjust-eval-print-last-sexp (&optional arg)
        (interactive "P")
        (eval-print-last-sexp arg)
        (message nil))

      (defun-evil-adjust-to-eol evil-adjust-eval-replace-last-sexp (&optional prefix)
        (interactive "P")
        (eval-replace-last-sexp prefix)
        (message nil))

      (defun-evil-adjust-to-eol evil-adjust-eval-last-sexp (&optional arg)
        (interactive "P")
        (eval-last-sexp arg))

      (evil-define-operator evil-reverse (beg end)
        :type line
        :repeat t
        "evil command to reverse lines over range."
        (reverse-region beg end))

      (provide 'mohkale-evil)
    #+END_SRC

*** Hydras
    #+BEGIN_SRC emacs-lisp
      (dolist (hydra '(hydra-eyebrowse
                       hydra-flycheck
                       hydra-ibuffer
                       hydra-indent
                       hydra-ein
                       hydra-flyspell
                       hydra-ivy-custom
                       hydra-org-navigate
                       hydra-org-link
                       hydra-org-agenda
                       hydra-visual-move
                       hydra-evil-multiedit
                       hydra-org-clock
                       hydra-persp
                       hydra-text-zoom
                       hydra-vdiff
                       hydra-vlc-rc
                       hydra-winman))
        (let ((hydra-func (intern (concat (symbol-name hydra) "/body")))
              (hydra-file (join-path mohkale-package-root "hydras"
                                     (concat (symbol-name hydra) ".el"))))
          (autoload hydra-func hydra-file nil t)))

      (general-define-key
        :keymaps 'mohkale-window-map
        "." 'hydra-winman/body
        "w" 'hydra-eyebrowse/body
        "C-w" 'hydra-winman/body)

      (general-define-key
        "C-x TAB" 'hydra-indent/body)

      (leader/declare-prefix*
        "x." "hydra-text-zoom"
        "l"  "layouts")

      (leader/set-keys
        "x." 'hydra-text-zoom/body
        "l"  'hydra-persp/body)
    #+END_SRC

**** text-zoom
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-text-zoom.el

       ;;  _            _
       ;; | |_ _____  _| |_     _______   ___  _ __ ___
       ;; | __/ _ \ \/ / __|___|_  / _ \ / _ \| '_ ` _ \
       ;; | ||  __/>  <| ||_____/ / (_) | (_) | | | | | |
       ;;  \__\___/_/\_\\__|   /___\___/ \___/|_| |_| |_|
       ;;

       (defhydra hydra-text-zoom ()
         ("+" text-scale-increase "increase")
         ("-" text-scale-decrease "decrease")
         ("0" (text-scale-increase 0) "reset")
         ("a" text-scale-increase)
         ("x" text-scale-decrease)
         ("z" (text-scale-increase 0))
         ("q" nil nil :exit t)
         ("<escape>" nil nil :exit t))

     #+END_SRC

**** window-management
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-winman.el

       ;;           _           _
       ;; __      _(_)_ __   __| | _____      __     _ __ ___   __ _ _ __   __ _  __ _  ___ _ __
       ;; \ \ /\ / / | '_ \ / _` |/ _ \ \ /\ / /____| '_ ` _ \ / _` | '_ \ / _` |/ _` |/ _ \ '__|
       ;;  \ V  V /| | | | | (_| | (_) \ V  V /_____| | | | | | (_| | | | | (_| | (_| |  __/ |
       ;;   \_/\_/ |_|_| |_|\__,_|\___/ \_/\_/      |_| |_| |_|\__,_|_| |_|\__,_|\__, |\___|_|
       ;;                                                                        |___/

       (defhydra hydra-winman (:exit nil :foreign-keys nil :hint nil)
         "
       ^create^               ^move^      ^shift^          ^numbers^               ^resize^
       ^-^------------------  ^-^-------  ^-^------------  ^-^--^-^--------------  ^-^----------------               (__)
       _c_ create             _h_ left    _H_ move-left    _1_.._9_ window-n       _>_ increase-width                (00)
       _d_ delete             _j_ down    _J_ move-down    _0_  ^ ^ window-by-num  _<_ decrease-width          /------\\/
       _s_ split              _k_ up      _K_ move-up      ^ ^  ^ ^                _+_ increase-height        / |    ||
       _v_ vsplit             _l_ right   _L_ move-right   ^ ^  ^ ^                _-_ decrease-height       *  /\\---/\\
       _S_ split-and-focus    _n_ next    ^ ^              ^ ^  ^ ^                ^ ^                          ~~   ~~
       _V_ vsplit-and-focus   _p_ prev

       "
         ("d" evil-window-delete)
         ("c" evil-window-create)
         ("s" evil-window-split)
         ("v" evil-window-vsplit)
         ("S" split-window-below-and-focus)
         ("V" split-window-right-and-focus)

         ("h" evil-window-left)
         ("k" evil-window-up)
         ("j" evil-window-down)
         ("l" evil-window-right)
         ("n" evil-window-next)
         ("p" evil-window-prev)

         ("H" buf-window-left)
         ("J" buf-window-up)
         ("K" buf-window-down)
         ("L" buf-window-right)

         ("0" window-select-window-by-number)
         ("1" winum-select-window nil)
         ("2" winum-select-window nil)
         ("3" winum-select-window nil)
         ("4" winum-select-window nil)
         ("5" winum-select-window nil)
         ("6" winum-select-window nil)
         ("7" winum-select-window nil)
         ("8" winum-select-window nil)
         ("9" winum-select-window nil)

         ("C-0" digit-argument)
         ("C-1" digit-argument)
         ("C-2" digit-argument)
         ("C-3" digit-argument)
         ("C-4" digit-argument)
         ("C-5" digit-argument)
         ("C-6" digit-argument)
         ("C-7" digit-argument)
         ("C-8" digit-argument)
         ("C-9" digit-argument)

         (">" evil-window-increase-width)
         ("<" evil-window-decrease-width)
         ("+" evil-window-increase-height)
         ("-" evil-window-decrease-height)
         ("_" evil-window-decrease-height)

         ("u" winner-undo "undo")
         ("r" winner-redo "redo" :exit t)

         ("w" hydra-eyebrowse/body "workgroups" :exit t)
         ("p" hydra-perspectives/body "perspective" :exit t)

         ("m" window-zen "zen" :exit t)
         ("q" nil "quit" :exit t)
         ("<escape>" nil "quit" :exit t)) ;; prevent evil-escape

     #+END_SRC

**** eyebrowse
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-eyebrowse.el

       (require 'eyebrowse)

       ;;                  _
       ;;   ___ _   _  ___| |__  _ __ _____      _____  ___
       ;;  / _ \ | | |/ _ \ '_ \| '__/ _ \ \ /\ / / __|/ _ \
       ;; |  __/ |_| |  __/ |_) | | | (_) \ V  V /\__ \  __/
       ;;  \___|\__, |\___|_.__/|_|  \___/ \_/\_/ |___/\___|
       ;;       |___/

       (defhydra hydra-eyebrowse (:hint nil)
         ("0" eyebrowse-switch-to-window-config-0 :exit t)
         ("1" eyebrowse-switch-to-window-config-1 :exit t)
         ("2" eyebrowse-switch-to-window-config-2 :exit t)
         ("3" eyebrowse-switch-to-window-config-3 :exit t)
         ("4" eyebrowse-switch-to-window-config-4 :exit t)
         ("5" eyebrowse-switch-to-window-config-5 :exit t)
         ("6" eyebrowse-switch-to-window-config-6 :exit t)
         ("7" eyebrowse-switch-to-window-config-7 :exit t)
         ("8" eyebrowse-switch-to-window-config-8 :exit t)
         ("9" eyebrowse-switch-to-window-config-9 :exit t)

         ("M-0" eyebrowse-switch-to-window-config-0)
         ("M-1" eyebrowse-switch-to-window-config-1)
         ("M-2" eyebrowse-switch-to-window-config-2)
         ("M-3" eyebrowse-switch-to-window-config-3)
         ("M-4" eyebrowse-switch-to-window-config-4)
         ("M-5" eyebrowse-switch-to-window-config-5)
         ("M-6" eyebrowse-switch-to-window-config-6)
         ("M-7" eyebrowse-switch-to-window-config-7)
         ("M-8" eyebrowse-switch-to-window-config-8)
         ("M-9" eyebrowse-switch-to-window-config-9)

         ("c" eyebrowse-create-window-config)
         ("d" eyebrowse-close-window-config)
         ("r" eyebrowse-rename-window-config)
         ("n" eyebrowse-next-window-config)
         ("l" eyebrowse-next-window-config)
         ("N" eyebrowse-prev-window-config)
         ("h" eyebrowse-prev-window-config)
         ("TAB" eyebrowse-last-window-config)
         ("u" (progn (winner-undo) (setq this-command 'winner-undo)))
         ("U" winner-redo :exit t)
         ("?" (setq hydra-eyebrowse/verbose-p (not hydra-eyebrowse/verbose-p)))
         ("t" (setq hydra-eyebrowse/show-wconfig-names (not hydra-eyebrowse/show-wconfig-names)))
         ("m" hydra-winman/body :exit t)
         ("p" hydra-persp/body :exit t)

         ("q" nil :exit t))

       (defvar hydra-eyebrowse/verbose-p nil
         "when true, hydra hint doesn't show keybindings")

       (defvar hydra-eyebrowse/show-wconfig-names t
         "when true, wconfigs in the hydra header will includes names (when applicable)")

       (defmacro hydra-eyebrowse/generate-set-binding (kbd value)
         ;; `(unless (eq (lookup-key hydra-eyebrowse/keymap ,kbd)
         ;;              ,value)
         ;;    (define-key hydra-eyebrowse/keymap ,kbd ,value))
         `(define-key hydra-eyebrowse/keymap ,kbd ,value))
       (put 'hydra-eyebrowse/generate-set-binding 'lisp-indent-function 'defun)

       (defface hydra-eyebrowse/active-wconfig-face
         '((t :inherit mode-line))
         "face for inactive windows in the header string")

       (setq hydra-eyebrowse/complete-command-docstring
             "
       Jump                        Actions
       ^^^^—————————————————————  —^—^———————————————————————————^—^————————————————
       [_0_.._9_] nth wconfig     [_c_] create new wconfig      [_m_] window-manager
       [_TAB_] previous wconfig^^ [_d_] delete current wconfig  [_p_] perspectives
       ^^^^                       [_r_] rename current wconfig
       [_h_/_N_] wconfig left
       [_l_/_n_] wconfig right    [_u_/_U_] undo/redo wconfig
       ")

       (defmacro eyebrowse-window-list-to-title (window-list)
         "extract window config title from list.
       is either the title or a nil value."
         `(let ((title (car (cdr (cdr ,window-list)))))
            (unless (string-empty-p title)
              title)))

       (setq hydra-eyebrowse/hint
             ;; TODO break when too long
             '(let ((current-wconfig-num (eyebrowse--get 'current-slot))
                    header-s wconfig-item-s)
                (dolist (wconfig-counter (number-sequence 0 9))
                  (let ((wconfig-item (eyebrowse--window-config-present-p wconfig-counter)))
                    (if (not wconfig-item)
                        ;; ;; disable binding for non existent wconfig
                        ;; (hydra-eyebrowse/generate-set-binding
                        ;;   (number-to-string wconfig-counter) nil)
                        nil

                      ;; ;; re-enable binding for existent wconfig
                      ;; (let* ((wconfig-counter-s (number-to-string wconfig-counter))
                      ;;        (invoking-function (intern (concat "hydra-eyebrowse/eyebrowse-switch-to-window-config-"
                      ;;                                           (number-to-string wconfig-counter)))))
                      ;;   ;; re-enable bindings for workgroups which do exist or have been created
                      ;;   (hydra-eyebrowse/generate-set-binding wconfig-counter-s invoking-function))

                      ;; include wconfig in header string
                      (let ((win-name (eyebrowse-window-list-to-title wconfig-item)))
                        (setq wconfig-item-s (if (and win-name
                                                      hydra-eyebrowse/show-wconfig-names)
                                                 (format "[%d:%s]" wconfig-counter win-name)
                                               (format "[%d]" wconfig-counter)))

                        (when (eq wconfig-counter
                                  current-wconfig-num)
                          (setq wconfig-item-s (propertize wconfig-item-s
                                                           'face 'hydra-eyebrowse/active-wconfig-face)))

                        (setq header-s (concat header-s wconfig-item-s " "))))))

                (setq header-s (format "\n%s %s (_?_ help)\n"
                                       (propertize "Window Configs"
                                                   'face 'font-lock-string-face)
                                       (s-trim header-s)))
                (eval (hydra--format nil
                                     '(nil nil :hint nil)
                                     (if (not hydra-eyebrowse/verbose-p)
                                         header-s
                                       (concat header-s
                                               hydra-eyebrowse/complete-command-docstring))
                                     hydra-eyebrowse/heads))))
     #+END_SRC

**** emacs-ipython-notebook
     sourced from [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%252Blang/ipython-notebook/packages.el][here]].

     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-ein.el
       (defhydra hydra-ein (:hint nil)
               "
        Operations on Cells^^^^^^            On Worksheets^^^^              Other
        ----------------------------^^^^^^   ------------------------^^^^   ----------------------------------^^^^
        [_k_/_j_]^^     select prev/next     [_h_/_l_]   select prev/next   [_t_]^^         toggle output
        [_K_/_J_]^^     move up/down         [_H_/_L_]   move left/right    [_C-l_/_C-S-l_] clear/clear all output
        [_C-k_/_C-j_]^^ merge above/below    [_1_.._9_]  open [1st..last]   [_C-o_]^^       open console
        [_O_/_o_]^^     insert above/below   [_+_/_-_]   create/delete      [_C-s_/_C-r_]   save/rename notebook
        [_y_/_p_/_d_]   copy/paste           ^^^^                           [_x_]^^         close notebook
        [_u_]^^^^       change type          ^^^^                           [_q_]^^         quit transient-state
        [_RET_]^^^^     execute"
               ("q" nil :exit t)
               ("?" spacemacs//ipython-notebook-ms-toggle-doc)
               ("h" ein:notebook-worksheet-open-prev-or-last)
               ("j" ein:worksheet-goto-next-input)
               ("k" ein:worksheet-goto-prev-input)
               ("l" ein:notebook-worksheet-open-next-or-first)
               ("H" ein:notebook-worksheet-move-prev)
               ("J" ein:worksheet-move-cell-down)
               ("K" ein:worksheet-move-cell-up)
               ("L" ein:notebook-worksheet-move-next)
               ("t" ein:worksheet-toggle-output)
               ("d" ein:worksheet-kill-cell)
               ("R" ein:worksheet-rename-sheet)
               ("y" ein:worksheet-copy-cell)
               ("p" ein:worksheet-yank-cell)
               ("o" ein:worksheet-insert-cell-below)
               ("O" ein:worksheet-insert-cell-above)
               ("u" ein:worksheet-change-cell-type)
               ("RET" ein:worksheet-execute-cell-and-goto-next)
               ;; Output
               ("C-l" ein:worksheet-clear-output)
               ("C-S-l" ein:worksheet-clear-all-output)
               ;;Console
               ("C-o" ein:console-open)
               ;; Merge cells
               ("C-k" ein:worksheet-merge-cell)
               ("C-j" spacemacs/ein:worksheet-merge-cell-next)
               ;; Notebook
               ("C-s" ein:notebook-save-notebook-command)
               ("C-r" ein:notebook-rename-command)
               ("1" ein:notebook-worksheet-open-1th)
               ("2" ein:notebook-worksheet-open-2th)
               ("3" ein:notebook-worksheet-open-3th)
               ("4" ein:notebook-worksheet-open-4th)
               ("5" ein:notebook-worksheet-open-5th)
               ("6" ein:notebook-worksheet-open-6th)
               ("7" ein:notebook-worksheet-open-7th)
               ("8" ein:notebook-worksheet-open-8th)
               ("9" ein:notebook-worksheet-open-last)
               ("+" ein:notebook-worksheet-insert-next)
               ("-" ein:notebook-worksheet-delete)
               ("x" ein:notebook-close))
     #+END_SRC

**** persp-mode
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-persp.el
       (require 'persp-mode)

       (defhydra hydra-persp (:hint nil)
         ;; missing commands
         ;;   * last-layout
         ;;   * buffer in layout
         ;;   * layout with helm/ivy
         ;;   * add buffer
         ;;   * add all from layout

         ("1" (switch-to-persp-by-num 0) :exit t)
         ("2" (switch-to-persp-by-num 1) :exit t)
         ("3" (switch-to-persp-by-num 2) :exit t)
         ("4" (switch-to-persp-by-num 3) :exit t)
         ("5" (switch-to-persp-by-num 4) :exit t)
         ("6" (switch-to-persp-by-num 5) :exit t)
         ("7" (switch-to-persp-by-num 6) :exit t)
         ("8" (switch-to-persp-by-num 7) :exit t)
         ("9" (switch-to-persp-by-num 8) :exit t)
         ("0" (switch-to-persp-by-num (read-number "perspective: ")) :exit t)

         ("M-1" (switch-to-persp-by-num 0))
         ("M-2" (switch-to-persp-by-num 1))
         ("M-3" (switch-to-persp-by-num 2))
         ("M-4" (switch-to-persp-by-num 3))
         ("M-5" (switch-to-persp-by-num 4))
         ("M-6" (switch-to-persp-by-num 5))
         ("M-7" (switch-to-persp-by-num 6))
         ("M-8" (switch-to-persp-by-num 7))
         ("M-9" (switch-to-persp-by-num 8))
         ("M-0" (switch-to-persp-by-num (read-number "perspective: ")))

         ("c" persp-add-new) ;; create new perspective
         ("C" persp-copy) ;; copy current perspective
         ("k" persp-kill) ;; remove current perspective
         ("d" persp-kill-current) ;; remove current perspective
         ("r" persp-rename) ;; rename current perspective

         ("?" (setq hydra-persp/verbose-p (not hydra-persp/verbose-p)))
         ("t" (setq hydra-persp/show-perspective-names (not hydra-persp/show-perspective-names)))

         ("b" persp-switch-to-buffer :exit t) ;; switch to buffer in perspective
         ("B" persp-temporarily-display-buffer :exit t) ;; from outside of perspective

         ("h" persp-prev)
         ("l" persp-next)
         ("p" persp-prev)
         ("n" persp-next)

         ("i" persp-import-win-conf) ;; import window configuration from perspecive
         ("I" persp-import-buffers) ;; import buffers from perspective.

         ("[" persp-window-switch) ;; create/switch to perspective in a window
         ("]" persp-frame-switch) ;; create/switch to perspective

         ("s" persp-save-state-to-file) ;; save perspectives to file.
         ("S" persp-save-state-to-file-by-names) ;; save perspectives subset to file.
         ("f" persp-load-state-from-file) ;; load perspectives from file.
         ("F" persp-load-state-from-file-by-names) ;; load perspectives subset from file.

         ("H" persp-move-layout-left)
         ("<" persp-move-layout-left)
         ("L" persp-move-layout-right)
         (">" persp-move-layout-right)

         ("o" mohkale/switch-to-custom-perspective :exit t)
         ("w" hydra-eyebrowse/body :exit t)
         ("q"   nil :exit t)
         ("RET" nil :exit t))

       (defvar hydra-persp/verbose-p nil
         "when true, hydra hint doesn't show keybindings")

       (defvar hydra-persp/show-perspective-names t
         "when true, wconfigs in the hydra header will includes names (when applicable)")

       (setq hydra-persp/complete-command-docstring
         "
       Go To                  ^^^^  Layouts                  ^^^   Actions
       ^^^^———————————————————————  ^^^—————————————————————————   ^^^^^^—————————————————————————————————————
       [_1_.._9_] nth/new layout    [_c_]^ create new layout       ^^[_b_/_B_] persp/temporarily switch buffer
       [_0_] layout by number     ^^[_C_]^ clone current layout    ^^[_i_/_I_] import window-config/buffers
       [_RET_] quit-to-layout     ^^[_k_]^ kill layout             ^^[_s_/_S_] save state to file/by-name
       [_h_/_l_] layout left/right  [_d_]^ kill current layout     ^^[_f_/_F_] load state from file/by-name
       [_H_/_<_] move layout left   [_r_]^ rename layout
       [_L_/_>_] move layout right  [_[_/_]_]^ switch window/frame   [_o_]: custom [_w_]: workgroups [_q_]: quit
       ")

       (defface hydra-persp/active-perspective-face
         '((t :inherit mode-line))
         "face for inactive windows in the header string")

       (defmacro hydra-persp/safe-persp-name (persp)
         `(if ,persp (persp-name ,persp) "default"))

       (setq hydra-persp/hint
             '(let* ((persp-list (nreverse (persp-persps)))
                     (current-persp (get-current-persp))
                     (current-persp-name (hydra-persp/safe-persp-name current-persp))
                     (persp-counter 0)
                     header-s persp-item-s)
                (dolist (persp persp-list)
                  (let* ((persp-name (hydra-persp/safe-persp-name persp))
                         (persp-is-current (string-equal persp-name
                                                         current-persp-name)))
                    (setq persp-item-s (if hydra-persp/show-perspective-names
                                           (format "[%d:%s]" (1+ persp-counter) persp-name)
                                         (format "[%d]" (1+ persp-counter))))
                    (setq header-s (concat header-s
                                           (if persp-is-current
                                               (propertize persp-item-s 'face 'hydra-persp/active-perspective-face)
                                             persp-item-s)
                                           " ")))

                  (incf persp-counter))
                (setq header-s (format "\n%s %s (_?_ help)\n" (propertize "Layouts:" 'face 'font-lock-string-face) (s-trim header-s)))

                (eval (hydra--format nil
                                     '(nil nil :hint nil)
                                     (if hydra-persp/verbose-p
                                         (concat header-s hydra-persp/complete-command-docstring)
                                       header-s)
                                     hydra-persp/heads))))
     #+END_SRC

**** flycheck
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-flycheck.el
       ;; source https://github.com/abo-abo/hydra/wiki/Flycheck

       (defhydra hydra-flycheck
         (:pre (let ((buffer-window (selected-window)))
                 (flycheck-list-errors)
                 (select-window buffer-window))
          :post (quit-windows-on "*Flycheck errors*")
          :hint nil)
         "Errors"
         ("f"  flycheck-error-list-set-filter "Filter")
         ("j"  flycheck-next-error "Next")
         ("k"  flycheck-previous-error "Previous")
         ("gg" flycheck-first-error "First")
         ("G"  flycheck-last-error "Last")
         ("q"  nil :exit t))
     #+END_SRC

**** ibuffer
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-ibuffer.el
       ;; source: https://github.com/abo-abo/hydra/wiki/Ibuffer

       (defhydra hydra-ibuffer-main (:color pink :hint nil)
         "
        ^ ^ ^   ^ ^ ^ | Marks [_*_] | Actions [_a_]     | View       ^^| Select      ^^|
        _k_ ^ ↑ ^ _h_ +-^-^---------+-^-^---------------+-^-^----------+-^-^-----------+
        ^ ^ _RET_ ^ ^ | _m_ark      | _D_: delete       | _g_: refresh | _TAB_: toggle |
        _j_ ^ ↓ ^ _l_ | _u_nmark    | _s_: save marked  | _S_: sort    | _o_: open     |
        ^ ^ ^   ^ ^ ^ | _t_oggle    | _._: toggle hydra | _/_: filter  | _q_: quit     |
       "
         ("m" ibuffer-mark-forward)
         ("u" ibuffer-unmark-forward)
         ("*" hydra-ibuffer-mark/body :exit t)
         ("M" hydra-ibuffer-mark/body :exit t)
         ("t" ibuffer-toggle-marks)

         ("D" ibuffer-do-delete)
         ("s" ibuffer-do-save)
         ("a" hydra-ibuffer-action/body :exit t)

         ("g" ibuffer-update)
         ("S" hydra-ibuffer-sort/body :exit t)
         ("/" hydra-ibuffer-filter/body :exit t)
         ("H" describe-mode :exit t)

         ("h" ibuffer-backward-filter-group)
         ("k" ibuffer-backward-line)
         ("l" ibuffer-forward-filter-group)
         ("j" ibuffer-forward-line)
         ("RET" ibuffer-visit-buffer :exit t)

         ("TAB" ibuffer-toggle-filter-group)

         ("o" ibuffer-visit-buffer-other-window :exit t)
         ("Q" quit-window :exit t)
         ("q" nil :exit t)
         ("." nil :exit t))

       (defalias 'hydra-ibuffer/body #'hydra-ibuffer-main/body)

       (defhydra hydra-ibuffer-mark (:color teal :columns 5 :after-exit (hydra-ibuffer-main/body))
         "Mark"
         ("*" ibuffer-unmark-all "unmark all")
         ("M" ibuffer-mark-by-mode "mode")
         ("m" ibuffer-mark-modified-buffers "modified")
         ("u" ibuffer-mark-unsaved-buffers "unsaved")
         ("s" ibuffer-mark-special-buffers "special")
         ("r" ibuffer-mark-read-only-buffers "read-only")
         ("/" ibuffer-mark-dired-buffers "dired")
         ("e" ibuffer-mark-dissociated-buffers "dissociated")
         ("h" ibuffer-mark-help-buffers "help")
         ("z" ibuffer-mark-compressed-file-buffers "compressed")
         ("b" hydra-ibuffer-main/body "back" :exit t))

       (defhydra hydra-ibuffer-action (:color teal :columns 4
                                       :after-exit
                                       (if (eq major-mode 'ibuffer-mode)
                                           (hydra-ibuffer-main/body)))
         "Action"
         ("A" ibuffer-do-view "view")
         ("E" ibuffer-do-eval "eval")
         ("F" ibuffer-do-shell-command-file "shell-command-file")
         ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
         ("H" ibuffer-do-view-other-frame "view-other-frame")
         ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
         ("M" ibuffer-do-toggle-modified "toggle-modified")
         ("O" ibuffer-do-occur "occur")
         ("P" ibuffer-do-print "print")
         ("Q" ibuffer-do-query-replace "query-replace")
         ("R" ibuffer-do-rename-uniquely "rename-uniquely")
         ("T" ibuffer-do-toggle-read-only "toggle-read-only")
         ("U" ibuffer-do-replace-regexp "replace-regexp")
         ("V" ibuffer-do-revert "revert")
         ("W" ibuffer-do-view-and-eval "view-and-eval")
         ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
         ("b" nil "back"))

       (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
         "Sort"
         ("i" ibuffer-invert-sorting "invert")
         ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
         ("v" ibuffer-do-sort-by-recency "recently used")
         ("s" ibuffer-do-sort-by-size "size")
         ("f" ibuffer-do-sort-by-filename/process "filename")
         ("m" ibuffer-do-sort-by-major-mode "mode")
         ("b" hydra-ibuffer-main/body "back" :exit t))

       (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
         "Filter"
         ("m" ibuffer-filter-by-used-mode "mode")
         ("M" ibuffer-filter-by-derived-mode "derived mode")
         ("n" ibuffer-filter-by-name "name")
         ("c" ibuffer-filter-by-content "content")
         ("e" ibuffer-filter-by-predicate "predicate")
         ("f" ibuffer-filter-by-filename "filename")
         (">" ibuffer-filter-by-size-gt "size")
         ("<" ibuffer-filter-by-size-lt "size")
         ("/" ibuffer-filter-disable "disable")
         ("b" hydra-ibuffer-main/body "back" :exit t))
     #+END_SRC

**** ivy
     the actual ivy hydra has trailing whitespace and is inseperably tied to C-o for both entry and exit, despite me not liking the former and changing the latter. This is my variant, much of the same functionality, just different display.

     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-ivy-custom.el
       (require 'ivy-hydra)

       (defhydra hydra-ivy (:foreign-keys run :hint nil)
         "
        ^ ^   ^ ^   ^ ^ | call        ^^^^| finish         ^^^^| Options | Action _n_/_p_: %s(ivy-action-name)
       -^-^---^-^---^-^-+^^^^-------------+----------------^^^^+---------+--------------------------^^^^^^^^^^^^^^^^^^^^^^^^|
        ^ ^   _J_   ^ ^ | _<_/_+_ grow    | _RET_/_d_ done     | _r_egex-switch:   %18s(ivy--matcher-desc) ^^^^^^^^^^^^^^^^^|
        ^ ^   _j_   ^ ^ | _>_/_-_ shrink  | _C-RET_ dispatch ^^| _c_alling:        %18s(if ivy-calling \"on\" \"off\") ^^^^^|
        _h_   ^+^   _l_ | _t_oggle-mark ^^| _M-RET_ call     ^^| _C_ase-fold:      %18s`ivy-case-fold-search ^^^^^^^^^^^^^^^|
        ^ ^   _k_   ^ ^ | _u_n/_m_ark     | _S-SPC_ restrict ^^| _T_runcate-lines: %18s(if truncate-lines \"on\" \"off\") ^^|
        ^ ^   _K_   ^ ^ | occ_U_r _q_uit  | ^   ^ ^ ^          | _f_ilter:         %18s(if ivy-use-ignore \"on\" \"off\") ^^|
       "
         ;; movement
         ("h" ivy-beginning-of-buffer)
         ("j" ivy-next-line)
         ("k" ivy-previous-line)
         ("l" ivy-end-of-buffer)
         ("J" ivy-scroll-up-command)
         ("K" ivy-scroll-down-command)

         ;; finish + marking
         ("RET"   ivy-alt-done :exit t)
         ("d"     ivy-alt-done :exit t)
         ("C-RET" ivy-dispatching-done :exit t)
         ("M-RET" ivy-call :exit t)
         ("S-SPC" ivy-restrict-to-matches)
         ("SPC"   ivy-mark)
         ("m"     ivy-mark)
         ("DEL"   ivy-unmark-backward)
         ("u"     ivy-unmark)
         ("t"     ivy-toggle-mark)
         ("T"     ivy-toggle-marks)

         ;; actions
         ("n" ivy-next-action)
         ("p" ivy-prev-action)
         ;; ("r" ivy-read-action) ;; poisons local bindings

         (">" ivy-minibuffer-grow)
         ("+" ivy-minibuffer-grow)
         ("<" ivy-minibuffer-shrink)
         ("-" ivy-minibuffer-shrink)

         ("U" ivy-occur :exit t)
         ("c" ivy-toggle-calling)
         ("C" ivy-toggle-case-fold)
         ("r" ivy-rotate-preferred-builders) ;; change regex
         ("f" ivy-toggle-ignore)
         ("T" (setq truncate-lines (not truncate-lines)))

         ;; hidden commands
         ("1" digit-argument)
         ("2" digit-argument)
         ("3" digit-argument)
         ("4" digit-argument)
         ("5" digit-argument)
         ("6" digit-argument)
         ("7" digit-argument)
         ("8" digit-argument)
         ("9" digit-argument)
         ("0" digit-argument)

         ("g" ivy-beginning-of-buffer)
         ("G" ivy-end-of-buffer)
         ("C-u" ivy-scroll-down-command) ;; overriden for uniarg

         ;; exit commands
         ;; nil                  means exit the hydra
         ;; keyboard-escape-quit means exit the ivy session
         ("q"        nil :exit t)
         ("i"        nil :exit t)
         ("<escape>" nil :exit t)
         ("C-."      nil :exit t)
         ("C-g" keyboard-escape-quit :exit t))

       ;; for some reason, can't be bound within hydra
       (general-define-key
         :keymaps 'hydra-ivy/keymap
         "M-o" 'ivy-beginning-of-buffer)

       ;; escape keys for ivy-dispatching-done-hydra
       (setq ivy-dispatching-done-hydra-exit-keys '(("ESC" nil) ("C-g" nil)))

       (defalias 'hydra-ivy-custom #'hydra-ivy)

       (advice-add 'ivy-read :after
                   (defun hydra-ivy--auto-exit-with-ivy (&rest args)
                     (hydra-ivy/nil)))

       (provide 'hydra-ivy-custom)
     #+END_SRC

**** org
***** agenda
      sourced from [[https://github.com/abo-abo/hydra/wiki/Org-agenda][here]]

     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-org-agenda.el
       (defhydra hydra-org-agenda (:pre  (setq which-key-inhibit t)
                                   :post (setq which-key-inhibit nil)
                                   :hint none
                                   :foreign-keys run)
         "
       Org agenda (_q_uit)

       ^Clock^      ^Visit entry^              ^Date^             ^Other^
       ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
       _ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
       _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
       _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
       _cj_ jump    _o_   link                 _+_  do later
       ^^           ^^                         _-_  do earlier

       ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
       ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
       _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
       _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
       _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
       _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
       _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
       _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
       _vp_ prev span
       _vr_ reset

       "
         ;; Entry
         ("hA" org-agenda-archive-default)
         ("hk" org-agenda-kill)
         ("hp" org-agenda-priority)
         ("hr" org-agenda-refile)
         ("h:" org-agenda-set-tags)
         ("ht" org-agenda-todo)
         ;; Visit entry
         ("o"   link-hint-open-link :exit t)
         ("<tab>" org-agenda-goto :exit t)
         ("TAB" org-agenda-goto :exit t)
         ("SPC" org-agenda-show-and-scroll-up)
         ("RET" org-agenda-switch-to :exit t)
         ;; Date
         ("dt" org-agenda-date-prompt)
         ("dd" org-agenda-deadline)
         ("+" org-agenda-do-date-later)
         ("-" org-agenda-do-date-earlier)
         ("ds" org-agenda-schedule)
         ;; View
         ("vd" org-agenda-day-view)
         ("vw" org-agenda-week-view)
         ("vt" org-agenda-fortnight-view)
         ("vm" org-agenda-month-view)
         ("vy" org-agenda-year-view)
         ("vn" org-agenda-later)
         ("vp" org-agenda-earlier)
         ("vr" org-agenda-reset-view)
         ;; Toggle mode
         ("ta" org-agenda-archives-mode)
         ("tA" (org-agenda-archives-mode 'files))
         ("tr" org-agenda-clockreport-mode)
         ("tf" org-agenda-follow-mode)
         ("tl" org-agenda-log-mode)
         ("td" org-agenda-toggle-diary)
         ;; Filter
         ("fc" org-agenda-filter-by-category)
         ("fx" org-agenda-filter-by-regexp)
         ("ft" org-agenda-filter-by-tag)
         ("fr" org-agenda-filter-by-tag-refine)
         ("fh" org-agenda-filter-by-top-headline)
         ("fd" org-agenda-filter-remove-all)
         ;; Clock
         ("cq" org-agenda-clock-cancel)
         ("cj" org-agenda-clock-goto :exit t)
         ("ci" org-agenda-clock-in :exit t)
         ("co" org-agenda-clock-out)
         ;; Other
         ("q" nil :exit t)
         ("gd" org-agenda-goto-date)
         ("." org-agenda-goto-today)
         ("gr" org-agenda-redo))
      #+END_SRC

***** clock & timers
      sourced from [[https://github.com/abo-abo/hydra/wiki/Org-clock-and-timers][here]].

     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-org-clock.el
       (defhydra hydra-org-clock (:color blue :hint nil)
         "
       ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
       -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
       (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
        ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
        ^ ^     _o_ut        ^ ^      _R_eport     |  ^ ^      _p_ause toggle
        ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
       "
         ("i" org-clock-in)
         ("c" org-clock-in-last)
         ("o" org-clock-out)

         ("e" org-clock-modify-effort-estimate)
         ("q" org-clock-cance)

         ("g" org-clock-goto)
         ("d" org-clock-display)
         ("R" org-clock-report)
         ("?" (org-info "Clocking commands"))

         ("r" org-timer-start)
         ("n" org-timer-set-timer)
         ("p" org-timer-pause-or-continue)
         ("s" org-timer-stop)

         ("m" org-timer)
         ("t" org-timer-item)
         ("z" (org-info "Timers")))
      #+END_SRC

***** links
      sourced from [[https://github.com/abo-abo/hydra/wiki/Org-mode-links][here]].

     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-org-link.el
        (require 'org-link-edit)

        (defun org-link-unlinkify ()
          "Replace an org-link with the description, or if this is absent, the path."
          (interactive)
          (let ((eop (org-element-context)))
            (when (eq 'link (car eop))
              (message "%s" eop)
              (let* ((start (org-element-property :begin eop))
                     (end (org-element-property :end eop))
                     (contents-begin (org-element-property :contents-begin eop))
                     (contents-end (org-element-property :contents-end eop))
                     (path (org-element-property :path eop))
                     (desc (and contents-begin
                                contents-end
                                (buffer-substring contents-begin contents-end))))
                (setf (buffer-substring start end)
                      (concat (or desc path)
                              (make-string (org-element-property :post-blank eop) ?\s)))))))

        (defhydra hydra-org-link (:color red)
          "Org Link Edit"
          ("j" org-link-edit-forward-slurp  "forward slurp")
          ("k" org-link-edit-forward-barf   "forward barf")
          ("u" org-link-edit-backward-slurp "backward slurp")
          ("i" org-link-edit-backward-barf  "backward barf")
          ("r" org-link-unlinkify "remove link")
          ("q" nil "cancel" :exit t))
      #+END_SRC

***** navigation
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-org-navigate.el
       (defun hydra-org-navigate--end-of-current-branch ()
         (interactive)
         (let ((last-point (point))
               current-point)
           (while (not (eq last-point
                           current-point))
             (setq last-point (point))
             (org-forward-heading-same-level nil)
             (setq current-point (point)))))

       (defun hydra-org-navigate--beginning-of-current-branch ()
         (interactive)
         (let ((last-point (point))
               current-point)
           (while (not (eq last-point
                           current-point))
             (setq last-point (point))
             (org-backward-heading-same-level nil)
             (setq current-point (point)))))

       (defun hydra-org-navigate--get-pretty-outline-path ()
         "like `org-display-outline-path' except returns
       the propertised string instead of displaying it."
         (interactive)
         (let ((separator nil)
               (current nil)
               (path (org-get-outline-path))
               (file (buffer-file-name (buffer-base-buffer))))
           (ignore-errors
               (setq path
                     (add-to-list 'path (save-excursion
                                          (org-back-to-heading t)
                                          (when (looking-at org-complex-heading-regexp)
                                            (let ((text (match-string 4)))
                                              (set-text-properties 0 (length text) nil text)
                                              text)))
                                  t)))

           (if path
               (org-format-outline-path
                path
                (1- (frame-width))
                (and file (concat (file-name-nondirectory file) ": "))
                separator)
             (and file (concat (file-name-nondirectory file) ": /")))))

       (defvar hydra-org-navigate/verbose-p nil
         "display extended help message for hydra-org-navigate/body")

       (defhydra hydra-org-navigate (:hint nil :foreign-keys run)
         ;; ("h" org-previous-visible-heading)
         ;; ("p" org-previous-visible-heading)
         ("h" org-outline-smart-up-level)
         ("j" org-forward-heading-same-level)
         ("k" org-backward-heading-same-level)
         ("l" org-next-visible-heading)
         ("J" org-next-visible-heading)
         ("K" org-previous-visible-heading)
         ("?" (setq hydra-org-navigate/verbose-p (not hydra-org-navigate/verbose-p)))
         ("g" hydra-org-navigate--beginning-of-current-branch)
         ("G" hydra-org-navigate--end-of-current-branch)
         ("f" counsel-org-goto)
         ("F" counsel-org-goto-all)
         ("n" org-next-block)
         ("N" org-previous-block)
         ("b" org-previous-block)
         ("q" nil :exit t))

       (defvar hydra-org-navigate/header-hint
         "
         %s(hydra-org-navigate--get-pretty-outline-path) (_?_ help)")

       (setq
        hydra-org-navigate/complete-command-docstring
        "
       [_h_]: parent         [_g_]: first child    [_n_]: next block
       [_j_]: sibling down   [_G_]: last child     [_b_]: prev block
       [_k_]: sibling up     [_f_]: find node
       [_l_]: next           [_F_]: find any node
       ")

       (setq hydra-org-navigate/hint
             '(eval (hydra--format
                     nil
                     '(nil nil :hint nil)
                     (concat hydra-org-navigate/header-hint
                             (when hydra-org-navigate/verbose-p
                               hydra-org-navigate/complete-command-docstring))
                     hydra-org-navigate/heads)))
      #+END_SRC

**** vlc-rc
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-vlc-rc.el
       (require 'vlc-rc)

       ;; NOTE comments with @ means add current value indicator

       (defhydra hydra-vlc-rc (:hint nil)
         "
       ^ ^             | media          ^^| general commands  ^^^^| toggle                          ^^^^^^|       *@*
       ^-^-------------+-^-^--------------+-------------------^^^^+---------------------------------^^^^^^|       :::
       _d_elete-socket | _f_ind-file      | _F_ull-screen       ^^| _tl_/_tr_/_ts_ loop/repeat/shuffle    |      .   .
       _k_ill-process  | _e_nqueue-file   | _v_olume-ctrl       ^^| _oa_/_od_ ^  ^ set audio track/device |     =@@@@@=
       _q_uit/exit     | _c_lear-playlist | stream-_p_osition   ^^| _or_ ^  ^ ^  ^ set aspect ratio       |     -*###*-
       ^ ^             | _n_ext-item      | _=_   ^ ^ reset speed | _os_ ^  ^ ^  ^ set subtitle track     |  :*:       :*:
       ^ ^             | _p_rev-item      | _S-+_/_+_ raise speed | _oz_ ^  ^ ^  ^ set video zoom         |  @@@/**+**\\@@@
       ^ ^             | _._ goto-item    | _S--_/_-_ lower speed | ^  ^ ^  ^ ^  ^                        | +@@@@@@@@@@@@@+
       "
         ("SPC" vlc/toggle-play)
         ("f" vlc/add-file)

         ;; speed
         ("+" vlc/increase-speed)
         ("=" vlc/reset-speed)
         ("-" vlc/decrease-speed)
         ("S-+" vlc/fast-forward)
         ("S--" vlc/rewind)

         ;; exit
         ("d" vlc/kill-connection)
         ("k" vlc/kill-process)

         ;; playlist
         ("c" vlc/clear)
         ("f" vlc/add-file)
         ("e" vlc/enqueue-file)
         ("n" vlc/next)
         ("p" vlc/previous)

         ;; commands
         ("F" vlc/toggle-fullscreen)
         ("v" vlc/volume-ctrl) ;; @
         ("s" vlc/screenshot)
         ("|" vlc/screenshot)
         ("p" vlc/set-stream-position)
         ("'" vlc/set-stream-position)
         ("." vlc/goto-playlist-item)

         ;; toggle/options
         ("tl" vlc/toggle-loop)    ;; @
         ("tr" vlc/toggle-repeat)  ;; @
         ("ts" vlc/toggle-shuffle) ;; @
         ("oa" vlc/set-audio-track)
         ("oc" vlc/set-video-crop)
         ("od" vlc/set-audio-device)
         ("or" vlc/set-aspect-ratio)
         ("os" vlc/set-subtitle-track)
         ("oz" vlc/set-zoom) ;; @

         ("q" nil :exit t))
     #+END_SRC


**** visual-move
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-visual-move.el
       (defhydra hydra-visual-move (:foreign-keys run)
         ("gj" evil-next-line "next-line")
         ("gk" evil-previous-line "prev-line")
         ("j"  evil-next-visual-line "next-visual-line")
         ("k"  evil-previous-visual-line "prev-visual-line")
         ("q"  nil "quit" :exit t))
     #+END_SRC

**** indentation
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-indent.el
       (defmacro hydra-indent--keep-visual-state-active (&rest body)
         "when body is invoked with evil-visual, restore the state after body"
         `(let ((visual-active (evil-visual-state-p)))
            ,@body
            (when visual-active
              (evil-normal-state)
              (evil-visual-restore))))
       (put 'hydra-indent--keep-visual-state-active 'elisp-indent-function 'defun)

       (defun hydra-indent--get-region ()
         "return the active region, or the current lines region"
         (if (region-active-p)
             (list (region-beginning) (region-end))
           (list (line-beginning-position) (line-end-position))))

       (defun hydra-indent--join-args-to-region (&rest args)
         (let ((region (hydra-indent--get-region)))
           (apply 'list
                  (car   region)
                  (nth 1 region)
                  args)))

       (defun hydra-indent-set-column (&optional column)
         "set indentation of line or region such that it reaches COLUMN
       when a region is active, function works by moving from the start of the
       region downwards until a non-empty (whitespace does not count) line is
       encountered, and then calculates the offset required to make that lines
       indentation the same as the COLUMN and then applies that offset to every
       line in the region.

       Negative values for COLUMN will be coerced to be +ve and unless called
       interactively, COLUMN will default to 1 when not specified."
         (interactive "P")
         (or column (setq column
                          (if (not (called-interactively-p))
                              +1
                            (read-number "column: "))))

         (and (< column 0) (setq column 0)) ;; ensure +ve

         (save-excursion
           (let* ((region-boundary (hydra-indent--get-region))
                  (start           (car   region-boundary))
                  (end             (nth 1 region-boundary))
                  indent-diff)
             (goto-char start) ;; start of indenting section

             (while (and (<= start end)
                         (line-empty-p)
                         (not (eobp)))
               ;; move forward until indent-able line encountered
               (next-line))

             (unless (or (eobp)
                         (> start end))
               (setq indent-diff (- column (current-indentation)))
               (indent-rigidly start end indent-diff)))))

       (defvar hydra-indent--ascii-art
         "
       "
         "cool ascii art, which can't be in docstring because it has ___")

       (defhydra hydra-indent (:foreign-keys run :hint nil)
         "
        ^ ^    ^ ^    ^ ^ |  ^ ^         |       dMP dMMMMb  dMMMMb  dMMMMMP dMMMMb dMMMMMMP .aMMMb dMMMMMMP dMP .aMMMb  dMMMMb
        _H_    ^ ^    ^ ^ | [_q_]: quit  |      amr dMP dMP dMP VMP dMP     dMP dMP   dMP   dMP\"dMP   dMP   amr dMP\"dMP dMP dMP
        _h_   _RET_   _l_ | [_s_]: break |     dMP dMP dMP dMP dMP dMMMP   dMP dMP   dMP   dMMMMMP   dMP   dMP dMP dMP dMP dMP
        ^ ^    ^ ^    _L_ |  ^ ^         |    dMP dMP dMP dMP.aMP dMP     dMP dMP   dMP   dMP dMP   dMP   dMP dMP.aMP dMP dMP
        ^ ^    ^ ^    ^ ^ |  ^ ^         |   dMP dMP dMP dMMMMP\" dMMMMMP dMP dMP   dMP   dMP dMP   dMP   dMP  VMMMP\" dMP dMP
       "
       ;;   "
       ;;  ^ ^    ^ ^    ^ ^ |  ^ ^         |           .         .       .             . . .
       ;;  _H_    ^ ^    ^ ^ | [_q_]: quit  |   o       |         |       |   o         | | |
       ;;  _h_   _RET_   _l_ | [_s_]: break |   . ;-. ,-| ,-. ;-. |-  ,-: |-  . ,-. ;-. | | |
       ;;  ^ ^    ^ ^    _L_ |  ^ ^         |   | | | | | |-' | | |   | | |   | | | | |
       ;;  ^ ^    ^ ^    ^ ^ |  ^ ^         |   ' ' ' `-' `-' ' ' `-' `-` `-' ' `-' ' ' o o o
       ;; "

         ("h" (hydra-indent--keep-visual-state-active
               (apply 'indent-rigidly
                      (hydra-indent--join-args-to-region
                       (or (and current-prefix-arg
                                (- current-prefix-arg))
                           -1)))))
         ("l" (hydra-indent--keep-visual-state-active
               (apply 'indent-rigidly
                      (hydra-indent--join-args-to-region
                       (or current-prefix-arg +1)))))
         ("H" (hydra-indent--keep-visual-state-active
               (apply 'evil-shift-left
                      (hydra-indent--join-args-to-region
                       (or current-prefix-arg +1)))))
         ("L" (hydra-indent--keep-visual-state-active
               (apply 'evil-shift-right
                      (hydra-indent--join-args-to-region
                       (or current-prefix-arg +1)))))
         ("s"   (hydra-indent--keep-visual-state-active
                 (call-interactively 'split-line)))
         ("RET" (hydra-indent--keep-visual-state-active
                 (call-interactively 'hydra-indent-set-column)))

         ("q" nil :exit t))

       (general-define-key
         :keymaps 'hydra-indent/keymap
         ;; that's scroll-up silly?
         ("C-u" . nil)
         (">" . hydra-indent/lambda-L)
         ("<" . hydra-indent/lambda-H))
     #+END_SRC

**** vdiff
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-vdiff.el
       (defhydra vdiff-toggle-hydra (nil nil :hint nil)
         "
       Toggles
        _c_ ignore case: %s(vdiff--current-case)
        _w_ ignore whitespace: %s(vdiff--current-whitespace)
        _q_ back to main hydra"
         ("c" vdiff-toggle-case)
         ("w" vdiff-toggle-whitespace)
         ("q" vdiff-hydra/body :exit t)

       (defhydra vdiff-hydra (nil nil :hint nil :foreign-keys run)
         (concat (propertize
                  "\
        Navigation^^^^          Refine^^   Transmit^^^^             Folds^^^^            Other"
                  'face 'header-line)
                 "
        _n_/_N_ next hunk/fold  _f_ this   _s_/_S_ send (+step)     _o_/_O_ open (all)   _i_ ^ ^ toggles
        _p_/_P_ prev hunk/fold  _F_ all    _r_/_R_ receive (+step)  _c_/_C_ close (all)  _u_ ^ ^ update diff
        _g_^ ^  switch buffers  _x_ clear  ^ ^ ^ ^                  _t_ ^ ^ close other  _w_ ^ ^ save buffers
        ^ ^^ ^                  ^ ^        ^ ^ ^ ^                  ^ ^ ^ ^              _q_/_Q_ quit hydra/vdiff
        ignore case: %s(vdiff--current-case) | ignore whitespace: %s(vdiff--current-whitespace)")
         ("j" vdiff-next-hunk)
         ("k" vdiff-previous-hunk)
         ("J" vdiff-next-fold)
         ("K" vdiff-previous-fold)
         ("g" vdiff-switch-buffer)
         ("s" vdiff-send-changes)
         ("S" vdiff-send-changes-and-step)
         ("r" vdiff-receive-changes)
         ("R" vdiff-receive-changes-and-step)
         ("o" vdiff-open-fold)
         ("O" vdiff-open-all-folds)
         ("c" vdiff-close-fold)
         ("C" vdiff-close-all-folds)
         ("t" vdiff-close-other-folds)
         ("u" vdiff-refresh)
         ("w" vdiff-save-buffers)
         ("f" vdiff-refine-this-hunk)
         ("F" vdiff-refine-all-hunks)
         ("x" vdiff-remove-refinements-in-hunk)
         ("i" vdiff-toggle-hydra/body :exit t)
         ("q" nil :exit t)
         ("Q" vdiff-quit :exit t))
     #+END_SRC

**** iedit
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-evil-multiedit.el
       (defhydra hydra-evil-multiedit ()
         ("k" evil-multiedit-next "next")
         ("j" evil-multiedit-prev "prev")
         ("l" evil-multiedit-match-and-next "mark-next")
         ("h" evil-multiedit-match-and-prev "mark-prev")
         ("*" evil-multiedit-match-all "mark-all")

         ("q" nil nil)
         ("<escape>" nil nil))
     #+END_SRC

**** flyspell
     #+BEGIN_SRC emacs-lisp :tangle bin/mohkale/hydras/hydra-flyspell.el
       (defhydra hydra-flyspell (nil nil :hint nil :foreign-keys run)
         "
       | ^M^ove       | ^R^echeck   | ^C^orrect      |
       |-^-^----------|-^-^---------|-^-^------------|
       | _h_ fix-prev | _gr_ region | _TAB_ cycle    |
       | _j_ next     | _gb_ buffer | _c_   correct  |
       | _k_ prev     | _gw_ word   | _p_   at-point |
       | _l_ fix-next | ^  ^        | ^ ^            |
       "
         ("h" flyspell-correct-previous "fix-prev")
         ("j" evil-next-flyspell-error "next")
         ("k" evil-prev-flyspell-error "prev")
         ("l" flyspell-correct-next "fix-next")

         ("TAB" flyspell-auto-correct-word "cycle-suggestion")

         ("c" flyspell-correct-wrapper "correct")
         ("p" flyspell-correct-at-point "fix-at-point")

         ("gb" flyspell-buffer "check-buffer")
         ("gr" flyspell-region "check-region")
         ("gw" flyspell-word "check-word")

         ("q" nil nil)
         ("<escape>" nil nil))
     #+END_SRC

** Core Packages
   For packages that're need to properly setup other packages. This list won't be in any
   sort of order, beyond the messy order needed to ensure everything can be built from
   scratch.

*** spaceline
    an amazing mode line... needs to be initialised before all others to make sure every
    buffer inherits the same mode line. otherwise, the message buffer will definitely not
    use spaceline, you'll have to restart it or re evaluate this in it's context.

    #+BEGIN_SRC emacs-lisp :results silent
      (use-package powerline
        :straight (powerline :type git :host github :repo "jonathanchu/emacs-powerline"
                             :fork (:host github :repo "milkypostman/powerline")))

      (use-package spaceline
        :straight t
        :demand   t
        ;; :hook (helm-mode . spaceline-helm-mode)
        :init
        (setq spaceline-buffer-id-max-length 25
              spaceline-org-clock            t
              winum-auto-setup-mode-line     nil
              powerline-default-separator    'slant)

        (when (display-graphic-p)
          (setq spaceline-window-numbers-unicode    t
                spaceline-window-number-p           t
                ;; having two unicode numbers next to each other
                ;; is IMO ugly, so disable the workspace one :(.
                spaceline-workspace-number-p        nil
                spaceline-workspace-numbers-unicode t))

        (setq-default mode-line-format (spaceline-spacemacs-theme))

        (defvar spaceline-preferred-icon-height 0.98
          "height of icons in the spaceline modeline")

        (defface spaceline-minibuffer
          `((t (:inherit (spaceline-evil-emacs))))
          "highlight face for spaceline when minibuffer is active"
          :group 'spaceline)

        (defface spaceline-evil-operator
          `((t (:weight normal
                :inherit (error spaceline-evil-motion))))
          "evil operator state face"
          :group 'spaceline)

        (defface spaceline-evil-multiedit
          `((t (:weight normal
                        :inherit (highlight spaceline-evil-motion))))
          "face for evil multiedit face")

        (push '(operator . spaceline-evil-operator)
              spaceline-evil-state-faces)

        (push '(multiedit . spaceline-evil-multiedit)
              spaceline-evil-state-faces)

        (defvar spaceline--highlight-evil-operator-face t
          "when true, spaceline will highlight operator state
      like it would any other state.")

        (setq spaceline-highlight-face-func
              (defun mohkale-spaceline-highlight-face ()
                (if (active-minibuffer-window)
                    'spaceline-minibuffer
                  ;; (spaceline-highlight-face-evil-state)
                  ;; redefine spaceline-highlight-face-evil-state here because
                  ;; it doesn't highlight operator state :(
                  (if (bound-and-true-p evil-local-mode)
                      (let* ((state (if (and (eq 'operator evil-state)
                                            (not spaceline--highlight-evil-operator-face))
                                       evil-previous-state
                                     evil-state))
                             (face (assq state spaceline-evil-state-faces)))
                        (if face (cdr face) (spaceline-highlight-face-default)))
                    (spaceline-highlight-face-default)))))

        ;; by default, colors seem to glitch out on change
        (add-hook 'after-load-theme-hook #'powerline-reset)

        :config
        (defun spaceline--face-icon-height (face)
          (let ((height (face-attribute face :height)))
            (unless (eq height 'unspecified)
              (/ height 100.0))))

        (defun spaceline-icon-height (&optional height)
          (or height
              spaceline-preferred-icon-height
              (spaceline--face-icon-height 'mode-line)
              (spaceline--face-icon-height 'default)))

        (cl-defmacro spaceline-prepared-icon (func icon-arg &rest args)
          "retrieve an `all-the-icons' icon for display in the spaceline.
      FUNC is a function such as `all-the-icon-faicon' which accepts an argument
      ICON-ARG and a bunch of face properties and returns either a symbol or an
      icon string.

      The remaining arguments should form a PLIST with the following being used
      by this function and the remaining being passed directly to FUNC.

      Keywords
      --------
      face - Can be given to specify a face for the icon. This face will be applied
             over the regular background of the current spaceline section.

      face-when-active - When specified means the face argument from before will only
                         only be applied on the windows spaceline sees as active.

      family - Can be specified as a function to force usage of a certain font family
               for the icon. If ommited the family property is extracted from the icon
               directly. eg. `all-the-icons-icon-family-for-mode'.
      "
          (plist-bind! (args :face :family :height :propertize (:v-adjust . -0.1) (:face-when-active . t))
            (setq family (eval family))

            `(let* ((use-face (and ,face
                                   ,@(when face-when-active
                                       (list (quote (bound-and-true-p active))))))
                    (icon (funcall ,func ,icon-arg
                                   :face (when use-face ,face)
                                   :v-adjust ,v-adjust
                                   :height (spaceline-icon-height ,height)
                                   ,@args)))
               (unless (symbolp icon)
                 (if use-face
                     (prog1 icon
                       ;; see https://github.com/domtronn/all-the-icons.el/issues/131
                       (add-face-text-property 0 (length icon) :inherit t icon))
                   (propertize icon
                               ;; 'display '(raise 0.1)
                               'mouse-face 'mode-line-highlight
                               'face (list :family (or
                                                ,@(when (and family (functionp family))
                                                    (funcall family))
                                                (plist-get (get-text-property 0 'face icon)
                                                           :family))
                                       :inherit)))))))
        (put 'spaceline-prepared-icon 'lisp-indent-function 'defun)

        (cl-defmacro spaceline-icon (family icon &rest args)
          "alias for `spaceline-prepared-icon' which uses a font-family as a function.
      FONT-FAMILY should be a symbol (such as faicon) relating to some font family.
      ICON should be a string relating to an icon in that family.

      See `spaceline-prepared-icon' for a description of the remaining arguments.
      "
          (let* ((icon-func (intern (concat "all-the-icons-" (symbol-name family))))
                 (family-func (intern (concat (symbol-name icon-func) "-family"))))
            `(spaceline-prepared-icon #',icon-func ,icon :family #',family-func ,@args)))
        (put 'spaceline-icon 'lisp-indent-function 'defun)

        (require 'mohkale-spaceline-segments)

        (spaceline-compile
          ;; Left
          '((minibuffer-active
             :fallback ((persp-name
                         workspace-number
                         window-number)
                        :fallback evil-state)
             :face highlight-face
             :priority 100)
            auto-compile
            (anzu
             :priority 98)
            ((buffer-modified
              buffer-size
              buffer-mode-icon
              buffer-id
              remote-host)
             :priority 98)
            (major-mode :priority 79)
            (process :when active)
            ((flycheck-error
              flycheck-warning
              flycheck-info)
             :when active
             :priority 89)
            (minor-modes
             :when active
             :priority 9)
            ;; (mu4e-alert-segment :when active)
            ;; (erc-track :when active)
            ((version-control-type-icon
              ;; version-control-status
              )
             :fallback version-control
             :priority 78)
            ;; (org-pomodoro :when active)
            (org-clock :when active))

          ;; Right
          '(which-function
            (python-pyvenv
             :fallback python-pyenv)
            (purpose :priority 94)
            (battery :when active)
            (selection-info :priority 95)
            input-method
            ((evil-macro-and-register
              buffer-encoding-abbrev
              point-position
              line-column)
             :separator " | "
             :priority 96)
            (global :when active)
            (buffer-position :priority 99)
            (hud :priority 99))))
    #+END_SRC

**** segments
    #+BEGIN_SRC emacs-lisp :results silent :tangle bin/mohkale/mohkale-spaceline-segments.el
      (require 'spaceline-config)

      (defun spaceline-active-macro-to-string+ ()
        (when defining-kbd-macro
          (let ((macro-symbol "@"))
            (if (and (bound-and-true-p evil-mode)
                     evil-this-macro)
                (concat macro-symbol
                        (string evil-this-macro))
              macro-symbol))))

      (defvar spaceline-evil-register-always-display-p+ nil
        "whether to always show something in the modeline,
      even when no register is currently active.")

      (defmacro evil-register-to-string (register-var)
        `(if ,register-var
             (concat "\"" (char-to-string ,register-var))
           (when spaceline-evil-register-always-display-p+
             (make-string 2 ?_))))

      (spaceline-define-segment evil-macro-and-register
        (let ((macro (spaceline-active-macro-to-string+))
              (register (evil-register-to-string evil-this-register)))
          (cond
           ((and macro register)
            (concat macro " " register))
           (macro    macro)
           (register register)))
        :enabled t)

      ;; see for eg segments: [[https://github.com/domtronn/all-the-icons.el/wiki/Spaceline]]
      (defalias 'all-the-icons-available-p #'display-graphic-p
        "whether your current frame has access to emacs icons.")

      (spaceline-define-segment minibuffer-active
        "show a stop symbol if minibuffer is active"
        (spaceline-icon faicon "minus-circle" :v-adjust 0.00)
        :when (and (all-the-icons-available-p)
                   (active-minibuffer-window)))

      (defvar spaceline-major-mode-icon--skip-modes nil
        "don't show the icon for modes in this list")

      (spaceline-define-segment buffer-mode-icon
        "an `all-the-icons' segment to show the mode of the current buffer"
        (unless (member major-mode spaceline-major-mode-icon--skip-modes)
          (spaceline-prepared-icon #'all-the-icons-icon-for-mode major-mode
            :v-adjust -0.15))
        :enabled (all-the-icons-available-p))

      (spaceline-define-segment version-control-type-icon
        (let (func icon)
          (cond ((string-match "Git[:-]" vc-mode)
                 (setq func #'all-the-icons-alltheicon
                       icon "git"))
                ((string-match "SVN-" vc-mode)
                 (setq func #'all-the-icons-material
                       icon "cloud_download")))
          (when (and func icon)
            (spaceline-prepared-icon func icon)))
        :when (and vc-mode (all-the-icons-available-p)))

      (defun spaceline-vc-git-status+ ()
        "Get the formatted GIT Version Control Icon based on variable `vc-mode'."
        (let* ((branch (cadr (split-string vc-mode "Git[:-]")))
               (git-branch (spaceline-icon octicon
                                            (if (string= branch "master")
                                                "git-merge"
                                              "git-branch")))
               (local-map (get-text-property 1 'local-map branch)))
          (propertize
           (concat
            (when git-branch
              (propertize git-branch 'display '(raise 0.1)))
            " "
            (propertize branch 'display '(raise 0.1) 'face `(:inherit)))
           'mouse-face 'mode-line-highlight
           'local-map local-map)))

      (defun spaceline-vc-svn-status+ ()
        "Get the formatted SVN Version Control Icon based on variable `vc-mode'."
        (let ((revision (cadr (split-string vc-mode "-" ))))
          (propertize revision
                      'display '(raise 0.1)
                      'face `(:height ,spaceline-preferred-icon-height
                              :family ,(all-the-icons-octicon-family)
                              :inherit))))

      (spaceline-define-segment version-control-status
        "An `all-the-icons' segment to depict the current VC system with an icon"
        (cond ((string-match "Git[:-]" vc-mode)
               (spaceline-vc-git-status+))
              ((string-match "SVN-" vc-mode)
               (spaceline-vc-svn-status+)))
        :when (and active vc-mode (all-the-icons-available-p)))


      (provide 'mohkale-spaceline-segments)
     #+END_SRC

*** persp-mode
    configure an ease of use macro to programatically define custom macros. the general functionality is sourced from [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%25252Bspacemacs/spacemacs-layouts/funcs.el#L161][spacemacs]].

    #+BEGIN_SRC emacs-lisp
      (defvar mohkale--custom-perspectives (make-hash-table
                                       :size 26
                                       :test 'string-hash-table-test)
        "all the defined custom perspectives.")

      ;; source: [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%252Bspacemacs/spacemacs-layouts/funcs.el#L161]]
      (defmacro mohkale//define-custom-perspective (name &rest body)
        (let* ((name (if (symbolp name)
                         (symbol-value name)
                       name))
               (func (intern (concat "persp-custom-"
                                     name))))
          `(prog1
               (defun ,func ()
                 ,(format "open custom perspective: %s" name)
                 (interactive)
                 (require 'persp-mode) ;; required for init check
                 (let ((initialize (not (gethash ,name *persp-hash*))))
                   (persp-switch ,name)
                   (when initialize
                     (delete-other-windows)
                     ,@body)))
             (puthash ,name (quote ,func) mohkale--custom-perspectives))))

      (put 'mohkale//define-custom-perspective 'lisp-indent-function 'defun)

      (defun mohkale/switch-to-custom-perspective (&optional name)
        (interactive)
        (let* ((persps mohkale--custom-perspectives)
               (pcount (hash-table-count persps))
               (persp-keys (unless (zerop pcount)
                             (let (result)
                               (maphash (lambda (key value)
                                          (push key result))
                                        persps)
                               result))))
          (if (zerop pcount)
              (message "no custom perspectives defined")
            (unless name
              (setq name (ivy-read "perspective: "
                                   persp-keys
                                   :require-match t)))
            (funcall (gethash name
                              persps
                              (lambda () (message "unable to find perspective: %s" name)))))))
    #+END_SRC

*** evil
**** evil-match-it
     #+BEGIN_SRC emacs-lisp
       (use-package evil-matchit
         :ensure t
         :defer  t
         :hook (evil-mode . global-evil-matchit-mode)
         :init
         (general-define-key
           :states leader-norm-states
           ;; "g%" 'evilmi-select-items
           "g%" 'evilmi--simple-jump)

         :config
         (defalias 'evil-jump-item 'evilmi-jump-items))
     #+END_SRC

**** evil-vimish-fold
     #+BEGIN_SRC emacs-lisp
       (use-package evil-vimish-fold
         :ensure t
         :defer  t
         :diminish
         :hook (evil-mode . evil-vimish-fold-mode)
         :init
         (general-define-key
           :states 'normal
           "zn" 'evil-vimish-fold/next-fold
           "zN" 'evil-vimish-fold/previous-fold))
     #+END_SRC

**** evil-surround
     #+BEGIN_SRC emacs-lisp
       (use-package evil-surround
         :ensure t
         :defer  5
         :hook (evil-mode . global-evil-surround-mode)
         :config
         (setq-default evil-surround-pairs-alist
                       '((?\( . ("(" . ")"))
                         (?\[ . ("[" . "]"))
                         (?\{ . ("{" . "}"))

                         (?\) . ("( " . " )")) ; alias above
                         (?\] . ("[ " . " ]")) ; alias above
                         (?\} . ("{ " . " }")) ; alias above

                         (?# . ("#{" . "}")) ; ruby string interpolation
                         (?b . ("(" . ")"))
                         (?B . ("{" . "}"))
                         (?> . ("<" . ">"))
                         (?t . evil-surround-read-tag)
                         (?< . evil-surround-read-tag)
                         (?f . evil-surround-function)))

         ;; only allow surrounding via selections or
         ;; explicitly using gS
         (general-define-key
           :states 'visual
           "s" 'evil-surround-region)

         :bind (:map evil-surround-mode-map ("S" . nil)))
     #+END_SRC

**** evil-anzu
     #+BEGIN_SRC emacs-lisp
       (use-package evil-anzu
         :ensure t
         :defer  t
         :init
         (with-eval-after-load 'anzu
           (require 'evil-anzu)))
     #+END_SRC

**** evil-numbers
     #+BEGIN_SRC emacs-lisp
       (use-package evil-numbers
         :defer  t
         :ensure t
         :init
         (general-define-key
           :states 'normal
           "C-S-a" 'evil-numbers/inc-at-pt
           "C-S-x" 'evil-numbers/dec-at-pt))
     #+END_SRC

**** evil-snipe
     Let's you start a motion to some string matching some series of input characters.
     Think evil-search... but to a fixed number of characters, which can be raised at
     invocation.

     #+BEGIN_SRC emacs-lisp
       (use-package evil-snipe
         :ensure t
         :defer  t
         :diminish
         evil-snipe-mode
         evil-snipe-local-mode
         :hook (evil-mode . evil-snipe-mode)
         :init
         (setq evil-snipe-scope 'buffer                                      ; how far can a snipe take place
               evil-snipe-repeat-scope 'buffer                               ; how far repeating previous snipe can take place.
               evil-snipe-enable-highlight nil                               ; don't highlight after jump
               evil-snipe-repeat-keys nil                                    ; sniping after a snipe, repeats the last snipe
               evil-snipe-enable-incremental-highlight t                     ; do highlight matching snipe locations
               evil-snipe-skip-leading-whitespace t                          ; whitespace at start of line is ignored
               evil-snipe-smart-case t                                       ; case sensetive until it's not, like ivy
               evil-snipe-tab-increment t                                    ; hit tab to raise amount of snipes left
               evil-snipe-override-evil-repeat-keys nil                      ; don't replace ; and , with evil keys
               evil-snipe-auto-disable-substitute nil                        ; keep my substitute key available
               )

         (defvar mohkale-evil-find-scopes-to-line nil
           "when true, evil-snipe-{f,F,t,T} (I.E. for single finds) only extends to EOL.")

         :config
         (defmacro evil-snipe-with-normalised-settings (&rest body)
           `(let ((evil-snipe-enable-highlight nil)                           ; don't highlight jump matches after jump
                  (evil-snipe-enable-incremental-highlight nil)               ; don't highlight jump matches while searching
                  (evil-snipe-tab-increment nil)                              ; disable tab to raise snipe count
                  (evil-snipe-show-prompt nil)                                ; don't show prompt, why bother? you can't increment it.
                  (evil-snipe-smart-case nil)                                 ; fJ != fj
                  (evil-snipe-scope (if mohkale-evil-find-scopes-to-line
                                        'line
                                      evil-snipe-scope)))
              ,@body))

         (defun evil-snipe--normalise-single-snipes+ (func &rest args)
           "normalise snipes with count 1 to match `evil-find-char'.
       don't want highlighting, or a prompt or other feature enhancements.
       just simple, jump to char.

       NOTE this function updates settings during the input reading phase
            only; which is taken care of in the interactive section prior
            to method body invocation.
       "
           (if (eq evil-snipe--match-count 1)
               (evil-snipe-with-normalised-settings
                 (apply func args))
             (apply func args)))

         (defun evil-snipe--normalise-single-snipes-wrapper+ (func &rest args)
           "specify normalisation for the body of the given function."
           (evil-snipe-with-normalised-settings (apply func args)))

         (advice-add 'evil-snipe--collect-keys :around 'evil-snipe--normalise-single-snipes+)
         (advice-add 'evil-snipe-f :around #'evil-snipe--normalise-single-snipes-wrapper+)
         (advice-add 'evil-snipe-F :around #'evil-snipe--normalise-single-snipes-wrapper+)
         (advice-add 'evil-snipe-t :around #'evil-snipe--normalise-single-snipes-wrapper+)
         (advice-add 'evil-snipe-T :around #'evil-snipe--normalise-single-snipes-wrapper+)

         ;; I don't need it, I've got my own keys bound to do the same thing :)
         (advice-add 'evil-snipe--transient-map :override 'ignore)

         (general-define-key
           :keymaps 'evil-snipe-mode-map
           :states  leader-norm-states
           ;; S is inclusive, X is exclusive.
           "gT" 'evil-snipe-X
           "gt" 'evil-snipe-x
           "gF" 'evil-snipe-S
           "gf" 'evil-snipe-s
           "f"  'evil-snipe-f
           "F"  'evil-snipe-F
           "t"  'evil-snipe-t
           "T"  'evil-snipe-T
           ";"  'evil-snipe-repeat
           "g;" 'evil-snipe-repeat-reverse)

         (general-define-key
           :keymaps 'evil-snipe-mode-map
           :states  '(motion normal)
           "S" nil
           "s" nil
           "X" nil
           "x" nil))
     #+END_SRC

**** evil-exchange
     #+BEGIN_SRC emacs-lisp
       (use-package evil-exchange
         :ensure t
         :defer  t
         :init
         (general-define-key
           :states leader-norm-states
           "gx" 'evil-exchange
           "gX" 'evil-exchange-cancel))
     #+END_SRC

**** evil-traces
     #+BEGIN_SRC emacs-lisp
       (use-package evil-traces
         :ensure t
         :defer  t
         :hook (evil-mode . evil-traces-mode)
         :diminish
         :config
         (evil-traces-use-diff-faces))
     #+END_SRC

**** evil-mode
     come to the dark side, we have cookies... :)

     #+BEGIN_SRC emacs-lisp
       (use-package evil
         :ensure t
         :demand t
         :init
         (setq-default evil-cross-lines t
                       evil-want-C-i-jump nil
                       evil-want-C-u-scroll t
                       evil-want-visual-char-semi-exclusive t)

         (defun evil-set-initial-state+ (mode state)
           (with-eval-after-load 'evil
             (evil-set-initial-state mode state)
             (dolist (buffer (buffer-list))
               (with-current-buffer buffer
                 (when (eq major-mode mode)
                   (evil-change-state state))))))

         :config
         (evil-mode 1)

         ;; evil-adjust: https://raw.githubusercontent.com/troyp/evil-adjust/master/evil-adjust.el
         (defmacro defun-evil-adjust-to-eol (function-name arglist &optional interactive &rest body)
           `(defun ,function-name ,arglist
              ,interactive
              (cl-case evil-state
                ('normal (progn
                           (evil-append 1)
                           ,@body
                           (evil-normal-state)))
                ('visual (progn
                           (evil-append 1)
                           ,@body
                           (evil-visual-restore)))
                (otherwise ,@body))))

         (general-define-key
           :states '(insert replace)
           "<S-escape>" 'evil-shift-normal-state)

         (general-define-key
           :keymaps 'override
           :states leader-nnorm-states
           "C-e" 'evil-copy-from-above
           "M-e" 'evil-copy-from-below)

         (general-define-key
           :states leader-nnorm-states
           "C->" 'evil-shift-right-line
           "C-<" 'evil-shift-left-line)

         (general-define-key
           :states 'emacs
           "C-o" 'evil-execute-in-normal-state)

         (general-define-key
           :states 'normal
           "gU" nil
           "gu" 'evil-upcase
           "gd" 'evil-downcase
           "gj" 'evil-next-visual-line
           "gk" 'evil-previous-visual-line)

         ;; because I keep overshadowing the above two
         (general-define-key
           "<C-M-S-up>"   'evil-next-visual-line
           "<C-M-S-down>" 'evil-previous-visual-line)

         (general-define-key
           :states '(normal motion)
           ;; Y = yy is easy   to press
           ;; Y = y$ is harder to press
           "Y" (general-simulate-key "y$"))

         (general-define-key
           :keymaps 'global-map
           :states '(normal insert)
           "C-k"   'evil-join-backwards
           "C-M-k" 'evil-join-backwards)

         (general-define-key
           :states 'insert
           "<tab>"           'indent-relative
           "<S-tab>"         'indent-back-to-normal
           "<S-iso-lefttab>" 'indent-back-to-normal
           ;; "<S-backspace>" 'back-to-tab-stop
           "<S-backspace>" 'evil-delete-char
           "C-y"   'yank
           "M-y"   'yank-unindented
           "C-$"   (lambda () (interactive)
                     (evil-end-of-line)
                     (unless (line-empty-p)
                       (forward-char)))
           "M-k"   nil                  ; erase
           ;; (kbd "C-M-k") 'evil-insert-digraph
           "C-l"   'forward-char
           "C-h"   'backward-char
           "C-n"   'evil-next-line
           "C-p"   'evil-previous-line
           "C-w"   'backward-kill-word

           "C-d" nil ; erase
           "C-t" nil ; erase
           )

         (general-define-key
           :states 'visual
           "C-y" 'evil-paste-after
           "gy"  'evil-narrow-yank)

         (general-define-key
           :states leader-norm-states
           ;; keep hitting C-SPC by accident
           "C-SPC" (general-simulate-key "SPC")
           "gc" 'evil-toggle-comment
           "gC" 'evil-capitalize
           "g=" 'count-words
           "g-" 'evil-indent
           "g;" 'evil-repeat-find-char-reverse
           [remap eval-last-sexp] 'evil-adjust-eval-last-sexp
           [remap eval-print-last-sexp] 'evil-adjust-eval-print-last-sexp
           [remap eval-replace-last-sexp] 'evil-adjust-eval-replace-last-sexp)


         (leader/declare-prefix "sc" "search-noh")

         (leader/set-keys
           "id" 'evil-insert-digraph
           "sc" 'evil-ex-nohighlight
           "xu" 'evil-upcase
           "xd" 'evil-downcase)

         (general-define-key
           :keymaps 'mohkale-window-map
           "+" 'evil-window-increase-height
           "-" 'evil-window-decrease-height
           "<" 'evil-window-decrease-width
           ">" 'evil-window-increase-width
           "=" 'balance-windows
           "-" 'evil-window-set-width
           "|" 'evil-window-set-height

           "C-1" 'evil-window-top-left
           "C-0" 'evil-window-bottom-right

           ;; ("u" . evil-window-rotate-upwards)
           ;; ("i" . evil-window-rotate-downwards)
           "C-q" 'evil-window-mru ;; last buffer, new window

           ;; TODO maximise buffer
           "C-M-h" 'evil-window-move-far-left
           "C-M-j" 'evil-window-move-far-down
           "C-M-k" 'evil-window-move-far-up
           "C-M-l" 'evil-window-move-far-right

           ;; NOTE bindings with control variants
           "n"   'evil-window-next
           "C-n" 'evil-window-next
           "p"   'evil-window-previous
           "C-p" 'evil-window-previous
           "s"   'evil-window-split
           "M-s" 'evil-window-split
           "v"   'evil-window-vsplit
           "M-v" 'evil-window-vsplit
           "S"   'split-window-below-and-focus
           "C-s" 'split-window-below-and-focus
           "V"   'split-window-right-and-focus
           "C-v" 'split-window-right-and-focus
           "d"   'evil-window-delete
           "C-d" 'evil-window-delete
           "h"   'evil-window-left
           ;; "C-h" 'evil-window-left
           "j"   'evil-window-down
           ;; "C-j" 'evil-window-down
           "k"   'evil-window-up
           ;; "C-k" 'evil-window-up
           "l"   'evil-window-right
           ;; "C-l" 'evil-window-right
           "c"   'evil-window-create
           "C-c" 'evil-window-create)

         (general-define-key
           :states 'motion
           "C-w" nil
           "-"   'negative-argument
           "C-;" 'evil-repeat-find-char
           "M-;" 'evil-repeat-find-char-reverse)

         (general-define-key
           :keymaps 'evil-ex-completion-map
           "C-a" 'move-beginning-of-line
           "C-e" 'move-end-of-line
           "C-q" 'quoted-insert
           "C-M-q" 'quit-window))
     #+END_SRC

**** evil-args
     see also: [[https://github.com/wcsmith/evil-args][link]].

     #+BEGIN_SRC emacs-lisp
       (use-package evil-args
         :ensure t
         :defer  t
         :init
         (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
         (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
         (define-key evil-motion-state-map "g^" 'evil-jump-out-args)

         (general-define-key
           :states 'motion
           ;; replaces evil-first-non-blank-of-visual-line
           "g^" 'evil-jump-out-args
           "[^" 'evil-jump-out-args
           "]^" 'evil-jump-out-args
           "[a" 'evil-backward-arg
           "]a" 'evil-forward-arg)

         (leader/set-keys
           "j(" 'evil-backward-arg
           "j)" 'evil-forward-arg
           "j^" 'evil-jump-out-args)

         (defun evil-args--adjust-for-elisp ()
           (setq evil-args-delimiters '(" ")))

         (add-hook 'emacs-lisp-mode-hook #'evil-args--adjust-for-elisp)
         (add-hook 'lisp-interaction-mode-hook #'evil-args--adjust-for-elisp))
     #+END_SRC

**** evil-magit
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'magit
         (use-package evil-magit
           :ensure t
           :init
           (setq evil-magit-state 'motion
                 evil-magit-use-y-for-yank t)
           :config
           (general-define-key
             :states `(,evil-magit-state visual)
             :keymaps 'magit-mode-map
             ;; prevent evil-window-map overriding mohkale-window-map
             "C-w" nil))

         (require 'evil-magit))
     #+END_SRC

**** ex-commands
     see [[https://bytebucket.org/lyro/evil/raw/default/doc/evil.pdf][here]] for a list of the different evil commands and how they work.

      #+BEGIN_SRC emacs-lisp
        (evil-ex-define-cmd "W[RITE]" 'evil-write)

        (evil-ex-define-cmd "Wa[ll]"  'evil-write-all)
        (evil-ex-define-cmd "WA[LL]"  'evil-write-all)

        (evil-ex-define-cmd "wk[ill]" 'write-kill-buffer)
        (evil-ex-define-cmd "Wk[ill]" 'write-kill-buffer)
        (evil-ex-define-cmd "WK[ILL]" 'write-kill-buffer)

        (evil-ex-define-cmd "wb[ackup]" 'write-backup)
        (evil-ex-define-cmd "Wb[ackup]" 'write-backup)
        (evil-ex-define-cmd "WB[ACKUP]" 'write-backup)

        (evil-ex-define-cmd "a[s]ave" 'write-autosave)
        (evil-ex-define-cmd "A[s]ave" 'write-autosave)
        (evil-ex-define-cmd "A[S]AVE" 'write-autosave)

        (evil-ex-define-cmd "buffers" 'ibuffer)
        (evil-ex-define-cmd "rev[erse]" 'evil-reverse)
      #+END_SRC

*** prettify-symbols
    lets you convert identifiers like lambda into unicode symbols like λ... isn't that epic :).

    #+BEGIN_SRC emacs-lisp
      (use-package prog-mode
        :straight (prog-mode :type built-in)
        :defer t
        :commands (prettify-symbols-mode)
        :delight
        :init
        (defmacro mohkale/define-pretty-symbols-for-mode (mode &rest symbols)
          "defines a hook and an alist for MODE which pushes SYMBOLS onto
      `prettify-symbols-alist' and enables prettify-symbols-mode in that MODE.

      if you want to add more mappings for symbols after this function has been
      invoked, then push them onto MODE-prettify-symbols-alist."
          (setq mode (eval mode))

          (let* ((mode-name (symbol-name mode))
                 (symbols-alist (intern (concat mode-name "-prettify-symbols-alist")))
                 (mode-hook (intern (concat mode-name "-hook")))
                 (func-name (intern (concat mode-name "--setup-prettify-symbols"))))
            `(progn
               (setq ,symbols-alist (quote ,symbols))

               (defun ,func-name ()
                 ,(concat "sets up the pretty symbol maps for " mode-name)
                 (if (not prettify-symbols-alist)
                     (setq prettify-symbols-alist (copy-sequence ,symbols-alist))
                   (nconc prettify-symbols-alist ,symbols-alist))

                 ;; invocation must come after symbol list assignment.
                 ;; or else assigned symbols won't be replaced :(
                 (prettify-symbols-mode +1))

               (add-hook (quote ,mode-hook) (quote ,func-name)))))
        (put 'mohkale/define-pretty-symbols-for-mode 'lisp-indent-function 'defun)

        :config
        ;; I'll bind it myself, thank you.
        (setq lisp-prettify-symbols-alist nil)
        ;; no mode line indicator by default... so here's my own
        (push '(prettify-symbols-mode "λ") minor-mode-alist)
        ;; don't need to keep symbolifying it whilst I'm on it
        (setq-default prettify-symbols-unprettify-at-point t))
    #+END_SRC

** Packages
*** ace-link
    let's you use an avy like interface to jump to a link in the visible region of the buffer.
    cool, but I doub't I'll ever really use it :P

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ace-link
        :ensure t
        :defer  t)
    #+END_SRC

*** adaptive-wrap
    This package provides a mode such that when a paragraph you're inserting gets too
    long, when it wraps round to the next line (assuming truncate-lines is disabled)
    sequential lines are indented slightly to distinguish them from other lines.

    Seems cool... but I doubt I'll ever use it.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package adaptive-wrap
        :ensure t
        :defer  t)
    #+END_SRC

*** align
**** ialign
     #+BEGIN_SRC emacs-lisp
       (use-package ialign
         :ensure t
         :defer  t
         :commands evil-ialign
         :init
         (leader/set-keys
           "x TAB" 'evil-ialign)

         (general-define-key
           :states leader-norm-states
           "g TAB" 'evil-ialign)

         :config
         ;; run ialign using evil motions
         (evil-define-operator evil-ialign (beg end)
           :type        line
           :repeat      nil
           :move-point  t
           :keep-visual nil
           (ialign beg end))

         (general-define-key
           :keymaps 'ialign-minibuffer-keymap
           ;; "" 'ialign-toggle-repeat
           "M-k"        'ialign-increment-spacing
           "M-j"        'ialign-decrement-spacing
           "M-h"        'ialign-decrement-group
           "M-l"        'ialign-increment-group
           "<M-up>"     'ialign-increment-spacing
           "<M-down>"   'ialign-decrement-spacing
           "<M-left>"   'ialign-decrement-group
           "<M-right>"  'ialign-increment-group
           "C-SPC"      'ialign-set-spacing
           "<C-tab>"    'ialign-toggle-tabs
           "<C-return>" 'ialign-set-group
           "C-h"        'backward-char
           "C-l" (lambda ()
                   (interactive)
                   (call-interactively (if (eolp)
                                           'exit-minibuffer
                                         'forward-char)))))
     #+END_SRC

*** all-the-icons
    provides some fonts for rendering graphical icons within emacs; alongside a set
    of functions to make retrieving appropriate functions for appropriate purposes.

    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons
        :ensure t
        :defer  t
        :commands (all-the-icons--insert-all-icons)
        :config
        (setq inhibit-compacting-font-caches t)

        (defun all-the-icons-insert-all-icons ()
          (interactive)
          (dolist (icon-list (list all-the-icons-icon-alist
                                   all-the-icons-dir-icon-alist
                                   all-the-icons-weather-icon-alist
                                   all-the-icons-mode-icon-alist
                                   ;; all-the-icons-url-alist
                                   ))
            (dolist (icon icon-list)
              (let* ((func (nth 1 icon))
                     (args (nthcdr 2 icon))
                     (name (car args))
                     (type (substring (symbol-name func) 14)))
                (unless (= (length args) 0)
                  (insert "\n" (apply func args) " " type " - " name)))))))
    #+END_SRC

*** anzu
    shows the number of search results in the mode-line. by default, this package
    only works with the built in isearch module.

    #+BEGIN_SRC emacs-lisp
      (use-package anzu
        :ensure t
        :defer  5
        :diminish
        :config
        (global-anzu-mode +1)
        (setq anzu-cons-mode-line-p nil))
    #+END_SRC

*** auto-highlight-symbol
    auto highlights the symbol under point, if you remain on it for a short while.
    also lets you search to the next occurence of it. Seems cool, but it's slow and
    kind of glitchy.

    I can always just use * to search the word at point, or yt<SPC>/<C-y> to do the same.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package auto-highlight-symbol
        :ensure t
        :defer  t
        :init
        (general-define-key
          "M-n" 'ahs-forward
          "M-p" 'ahs-backward)

        :config
        (global-auto-highlight-symbol-mode +1))
    #+END_SRC

*** avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :defer  t
        :init
        (leader/set-keys
          "jB" 'avy-pop-mark
          "jj" 'avy-goto-char
          "jJ" 'avy-goto-char-2
          "jt" 'avy-goto-char-timer))
    #+END_SRC

*** bookmarks
    Emacs builtin bookmarking fascilities. Let's you quickly navigate to bookmarked files.

    #+BEGIN_SRC emacs-lisp
      (use-package bookmark
        :config
        ;; prioritise recently used bookmarks over just the default list.
        (defadvice bookmark-jump (after bookmark-jump activate)
          (let ((latest (bookmark-get-bookmark bookmark)))
            (setq bookmark-alist (delq latest bookmark-alist))
            (push latest bookmark-alist))))
    #+END_SRC

*** buffer-menu
    The default buffer menu provided by emacs. Deprecated in favor of [[*ibuffer][ibuffer]].

    #+BEGIN_SRC emacs-lisp
      (use-package buff-menu
        :straight (buff-menu :type built-in)
        :defer t
        :config
        (evil-set-initial-state 'Buffer-menu-mode 'motion)

        (leader/set-keys-for-mode! 'Buffer-menu-mode
          "1" 'Buffer-menu-1-window
          "2" 'Buffer-menu-2-window
          "f" 'Buffer-menu-toggle-files-only
          "/" 'Buffer-menu-isearch-buffers-regexp
          "o" 'Buffer-menu-multi-occur
          "T" 'Buffer-menu-visit-tags-table)

        (general-define-key
          :keymaps 'Buffer-menu-mode-map
          "0"         nil
          "1"         nil
          "2"         nil
          "<"         nil
          ">"         nil
          "?"         nil
          "C-d"       nil
          "C-k"       nil
          "S-SPC"     nil
          "SPC"       nil
          "<backtab>" nil
          "TAB"       nil
          "T"         nil
          "b"         nil
          "e"         nil
          "f"         nil
          "g"         nil
          "h"         nil
          "n"         nil
          "p"         nil
          "t"         nil
          "v"         nil

          "C-SPC" 'Buffer-menu-mark
          "S-DEL" 'Buffer-menu-bury
          "r"   'Buffer-menu-toggle-read-only
          "C-j" 'Buffer-menu-this-window
          "gr"  'revert-buffer
          "gf" 'Buffer-menu-toggle-files-only
          "C-l" 'tabulated-list-next-column
          "C-M-<return>" 'Buffer-menu-select))
    #+END_SRC

*** buffer-move
    Move buffer to windows in other directions. Like the vim C-w <Shift>+{h,j,k,l}
    series of functions.

    #+BEGIN_SRC emacs-lisp
      (use-package buffer-move
        :ensure t
        :defer  t
        :commands (rotate-windows)
        :init
        (general-define-key
          :keymaps 'mohkale-window-map
          "H"   'buf-move-left
          "M-h" 'buf-move-left
          "J"   'buf-move-down
          "M-j" 'buf-move-down
          "K"   'buf-move-up
          "M-k" 'buf-move-up
          "L"   'buf-move-right
          "M-l" 'buf-move-right)

        :config
        ;; https://www.emacswiki.org/emacs/TransposeWindows
        (defun rotate-windows (arg)
          "Rotate your windows; use the prefix argument to rotate the other direction"
          (interactive "P")
          (if (not (> (count-windows) 1))
              (message "You can't rotate a single window!")
            (let* ((rotate-times (prefix-numeric-value arg))
                   (direction (if (or (< rotate-times 0) (equal arg '(4)))
                                  'reverse 'identity)))
              (dotimes (_ (abs rotate-times))
                (dotimes (i (- (count-windows) 1))
                  (let* ((w1 (elt (funcall direction (window-list)) i))
                         (w2 (elt (funcall direction (window-list)) (+ i 1)))
                         (b1 (window-buffer w1))
                         (b2 (window-buffer w2))
                         (s1 (window-start w1))
                         (s2 (window-start w2))
                         (p1 (window-point w1))
                         (p2 (window-point w2)))
                    (set-window-buffer-start-and-point w1 b2 s2 p2)
                    (set-window-buffer-start-and-point w2 b1 s1 p1))))))))
    #+END_SRC


*** calc
    #+BEGIN_SRC emacs-lisp
      (use-package calc
        :defer t
        :init
        (leader/declare-prefix
          "*" "calculator")

        (leader/set-keys
          "*." 'calc-dispatch
          "**" 'calc
          "*y" 'calc-copy-to-buffer)

        :config
        (general-define-key
          :keymaps 'calc-mode-map
          "C-w" mohkale-window-map
          ;; WARN hard coded leader key
          leader-key (general-simulate-key "C-SPC")))
    #+END_SRC

*** calendar
    #+BEGIN_SRC emacs-lisp
      (use-package calendar
        :defer t
        :config
        (evil-set-initial-state 'calendar-mode 'normal)

        (general-define-key
          :states  'normal
          :keymaps 'calendar-mode-map
          ;;; see also https://github.com/emacs-evil/evil-collection/blob/master/evil-collection-calendar.el
          ;; globally useful
          "q"  'calendar-exit
          "p"  'calendar-print-day-of-year
          "c"  'calendar-count-days-region
          "?"  'calendar-goto-info-node
          "C-r" 'calendar-redraw

          ;; jumpt to date
          "."  'calendar-goto-today
          "h"  'calendar-backward-day
          "j"  'calendar-forward-week
          "k"  'calendar-backward-week
          "l"  'calendar-forward-day
          "0"  'calendar-beginning-of-week
          "$"  'calendar-end-of-week
          "[[" 'calendar-backward-year
          "]]" 'calendar-forward-year
          "("  'calendar-beginning-of-month
          ")"  'calendar-end-of-month
          "{"  'calendar-backward-month
          "}"  'calendar-forward-month
          "/"  'calendar-goto-date

          "C-h" 'calendar-backward-month
          "C-l" 'calendar-forward-month
          "C-j" 'calendar-scroll-left-three-months
          "C-k" 'calendar-scroll-right-three-months

          ;; marking and unmarking
          "X"  'calendar-unmark
          "v"  'calendar-set-mark
          "x"  'calendar-mark-holidays

          ;; diary interaction
          "D"  'diary-view-other-diary-entries
          "d"  'diary-view-entries
          "m"  'diary-mark-entries
          "s"  'diary-show-all-entries))
    #+END_SRC

*** change-log-mode
    #+BEGIN_SRC emacs-lisp
      (use-package add-log
        :defer t
        :init
        (push 'change-log-mode mohkale--whitespace-exempt-modes)

        :config
        (evil-set-initial-state 'change-log-mode 'motion)

        (leader/set-keys-for-mode! 'change-log-mode
          "SPC" 'change-log-goto-source
          "f" 'change-log-find-file
          "j" 'add-log-edit-next-comment
          "K" 'add-log-edit-prev-comment)

        (general-define-key
          :states 'motion
          :keymaps 'change-log-mode-map
          "o" 'change-log-goto-source
          "C-j" 'add-log-edit-next-comment
          "C-K" 'add-log-edit-prev-comment))
    #+END_SRC

*** compile
    setup some custom bindings and assign a post compilation hook which will automatically kill the compilation window.

    #+BEGIN_SRC emacs-lisp
      (use-package compile
        :ensure t
        :defer  t
        :commands (display-compilation-buffer
                   mohkale/set-compilation-bindings)
        :init
        (setq compilation-read-command nil
              compilation-scroll-output t)

        (defvar compilation-auto-kill-window 2
          "if non-nil, after a successfull compilation the compilation
        window, if open, will automatically be deleted. If set to
        a numerical value, window will be deleted after that many
        seconds.")

        (defvar compilation-dont-auto-kill-window-when '(warnings)
          "specify not to kill the window when warning, error or info given.
        a list which can take in any symbol from (errors infos warnings). If any
        of the corresponding notifications are encountered during compilation
        the window will not be autokilled.")

        (defun mohkale/set-compilation-bindings (mode map)
          (leader/set-keys-for-mode! mode
            "RET" 'recompile
            "k" 'kill-compilation
            "f" 'next-error-follow-minor-mode)

          (general-define-key
            :keymaps map
            "S-SPC" nil
            "SPC"   nil
            "DEL"   nil
            "M-p"   nil
            "M-n"   nil
            "M-{"   nil
            "M-}"   nil
            "0"     nil
            "h"     nil
            "g"     nil
            "?"     nil
            "n"     nil
            "p"     nil
            "<override-state>" nil)

          (general-define-key
            :keymaps map
            :states  'motion
            "gr"  'recompile
            "gj"  'next-error-no-select
            "gk"  'previous-error-no-select
            "o"   'compilation-display-error
            "j"   'compilation-next-error
            "k"   'compilation-previous-error
            "x"   'kill-compilation
            "C-j" 'compilation-next-file
            "C-k" 'compilation-previous-file)

          (general-define-key
            :keymaps map
            :states  '(replace insert)
            "ESC" 'evil-motion-state))

        :config
        (push 'compilation-mode mohkale--whitespace-exempt-modes)

        (let* ((compilation-buffer-name "*compilation*"))
          (defun compilation-safely-close-window ()
            (let* ((compilation-buffer (get-buffer compilation-buffer-name))
                   (compilation-process (get-buffer-process compilation-buffer)))
              (unless (or (not compilation-buffer) compilation-process)
                ;; don't skip if new compilation began before window
                ;; from previous compilation has been killed.
                (quit-windows-on compilation-buffer))))

          (defun mohkale/compilation-finish-function (buf str)
            "post compilation command hook
      uses the above two variables to determine whether or not (and when)
      to kill the compilation window. By default, no attempt to kill will
      take place when compilation-auto-kill-window is nil. Otherwise the
      window will be killed unless the compilation processes exit code is
      non 0.

      UPDATE added compilation-dont-auto-kill-window-when option so window
      kill can be aborted should any important information be given during
      the compilation process."
            (when (and compilation-auto-kill-window
                       ;; an abnormal exit automatically cancels window kill
                       (not (string-match-p ".*exited abnormally.*" str)))
              ;; no abnormalities prepare to exit compilation window
              (let* ((terminate-window t)) ; set to nil to terminate window kill

                ;; check if config variable determines window should be kept open
                (when compilation-dont-auto-kill-window-when ; non nil
                  (unless (listp compilation-dont-auto-kill-window-when)
                    (error "compilation-dont-auto-kill-window-when failed listp"))

                  (let ((encountered-errors '()))
                    (and (member 'errors compilation-dont-auto-kill-window-when)
                         (> compilation-num-errors-found 0)
                         (push "errors" encountered-errors))
                    (and (member 'warnings compilation-dont-auto-kill-window-when)
                         (> compilation-num-warnings-found 0)
                         (push "warnings" encountered-errors))
                    (and (member 'infos compilation-dont-auto-kill-window-when)
                         (> compilation-num-infos-found 0)
                         (push "information" encountered-errors))
                    (when (> (length encountered-errors) 0)
                      (message "window kill suspended due to encountering: %s"
                               (combine-and-quote-strings encountered-errors))
                      (setq terminate-window nil))))

                (when terminate-window
                  (if (numberp compilation-auto-kill-window) ;; kill after delay
                      (run-at-time (concat (number-to-string compilation-auto-kill-window)
                                           " sec")
                                   nil 'compilation-safely-close-window)
                    (compilation-safely-close-window)))))))

        ;; NOTE setq kept for debug purposes, defvar only works on first call
        ;; (setq compilation-auto-kill-window 2)
        ;; (setq compilation-dont-auto-kill-window-when '(warnings))
        (add-hook 'compilation-finish-functions 'mohkale/compilation-finish-function)

        (add-hook 'compilation-start-hook
                  (defun compilation--set-initial-evil-state (&rest args)
                    "use insert state when running an interactive compilation"
                    (when (eq major-mode 'comint-mode)
                      (evil-insert-state +1))))

        (add-hook 'compilation-finish-functions
                  (defun compilation--restore-initial-evil-state (&rest args)
                    "revert to initial state unless already in initial state"
                    (let ((desired-state (evil-initial-state 'compilation-mode)))
                      (unless (eq evil-state desired-state)
                        (funcall-interactively (intern (concat "evil-"
                                                               (symbol-name desired-state)
                                                               "-state")))))))

        (defun display-compilation-buffer ()
          (interactive)
          (let ((buffer-name (if compilation-buffer-name-function
                                 (funcall compilation-buffer-name-function "compilation")
                               "*compilation*")))
            (if (not buffer-name)
                (message "compilation buffer doesn't exist")
              (display-buffer buffer-name))))

        (mohkale/set-compilation-bindings 'compilation-mode 'compilation-mode-map)

        (general-define-key
          :states  'motion
          :keymaps 'compilation-mode-map
          "j" nil
          "k" nil))
    #+END_SRC

*** comint - command interpreter
    #+BEGIN_SRC emacs-lisp
      (use-package comint
        :straight (comint :type built-in)
        :defer t
        :hook ((comint-mode . (lambda () (setq-local evil-emacs-state-cursor 'bar)))
               ;; (comint-mode . blink-cursor-mode)
               )
        :commands (mohkale--comint-set-bindings
                   mohkale--comint-set-leader-keys)
        :init
        (push 'comint-mode mohkale--whitespace-exempt-modes)

        :config
        (evil-set-initial-state 'comint-mode 'emacs)

        (setq comint-mode-map (make-sparse-keymap) ;; reset all
              comint-prompt-read-only t)

        (defun comint-bol-point (&optional arg)
          (save-excursion
            (comint-bol arg)
            (point)))

        (defmacro comint-clamp-point-to-bol (&rest body)
          "ensures any operation done by body doesn't move point
      to before the command interpreter prompt."
          `(let ((bol (comint-bol-point)))
             ,@body ;; run body operations

             (when (< (point) bol)
               (goto-char bol))))

        (defun comint-backward-char (&optional N)
          (interactive "P")
          (comint-clamp-point-to-bol (backward-char N)))

        (defun comint-backward-word (&optional N)
          (interactive "P")
          (comint-clamp-point-to-bol (backward-word N)))

        (defun comint-on-prompt-line-p ()
          (interactive)
          (save-excursion
            (let ((point (point))
                  (current-line (what-line)))
              (goto-char (comint-bol-point))
              (string-equal (what-line) current-line))))

        ;; TODO support prefix arg
        (defun comint-previous-input-or-previous-line ()
          (interactive)
          (if (comint-on-prompt-line-p)
              (call-interactively 'comint-previous-input)
            (comint-clamp-point-to-bol
             (previous-line))))

        (defun comint-next-input-or-next-line ()
          (interactive)
          (if (eobp)
              (call-interactively 'comint-next-input)
            (next-line)))

        ;; TODO ensure history shifts maintain correct cursor position
        ;; (advice-add 'comint-previous-input :after 'comint-bol)
        ;; (advice-add 'comint-next-input     :after 'end-of-buffer)

        (defun mohkale--comint-set-bindings (keymap)
          ;; abstracted into a method because realgud seems
          ;; to hide all of these bindings.
          (general-define-key
            :keymaps keymap
            "RET" 'comint-send-input
            "M-RET" 'comint-accumulate
            "<delete>" 'delete-forward-char
            "<C-delete>" 'evil-backward-delete-word
            "<M-delete>" 'comint-delchar-or-maybe-eof ;; forward
            "<C-M-delete>" 'kill-word                 ;; forward
            "<mouse-2>" 'comint-insert-input

            "C-w" 'backward-kill-word ;; this kills me :(
            "M-w" 'kill-word
            "C-S-w" mohkale-window-map
            "C-M-w" mohkale-window-map
            "M-l" 'recenter-top-bottom
            "C-M-l" 'comint-show-output

            "C-a" 'comint-bol-or-process-mark
            "C-e" 'end-of-buffer       ;; 'end-of-line
            "C-M-k" 'comint-kill-input ;; whole line
            "C-r" 'comint-history-isearch-backward-regexp
            "M-r" 'comint-dynamic-list-input-ring ;; TODO use ivy
            "C-M-r" 'evil-paste-from-register
            "C-v" 'evil-paste-from-register
            "C-u" 'scroll-down
            "C-d" 'scroll-up
            "C-o" 'evil-execute-in-normal-state

            "C-<left>"  'backward-word
            "C-<up>"    'comint-previous-input
            "C-<down>"  'comint-next-input
            "C-<right>" 'forward-word

            "<left>"    'backward-char
            "<up>"      'comint-previous-input-or-previous-line
            "<down>"    'comint-next-input-or-next-line
            "<right>"   'forward-char

            "C-h"       'backward-char
            "C-j"       'comint-next-input-or-next-line
            "C-k"       'comint-previous-input-or-previous-line
            "C-l"       'forward-char

            "C-S-j"     'comint-next-matching-input-from-input
            "C-S-k"     'comint-previous-matching-input-from-input

            "C-M-l"     'forward-word
            "C-M-h"     'backward-word

            "M-j" 'comint-next-prompt
            "M-k" 'comint-previous-input

            ;; "<remap> <forward-char>"  'comint-forward-char
            "<remap> <backward-char>" 'comint-backward-char
            ;; "<remap> <forward-word>"  'comint-forward-word
            "<remap> <backward-word>" 'comint-backward-word

            "C-c C-c" 'comint-clear-buffer
            "C-c C-x" 'comint-get-next-from-history))

        (mohkale--comint-set-bindings 'comint-mode-map)

        (defun mohkale--comint-set-leader-keys (mode)
          (leader/declare-prefix-for-mode!* mode
            "k" "kill"
            "s" "subjob")

          (leader/set-keys-for-mode! mode
            "kz" 'comint-send-eof
            "*" 'comint-insert-previous-argument
            "r" 'comint-dynamic-list-input-ring
            "m" 'comint-clear-buffer
            "M" 'comint-show-maximum-output
            "x" 'comint-get-next-from-history
            "RET" 'comint-copy-old-input ;; copy text before cursor
            ">" 'comint-write-output
            "t" 'comint-show-output
            "o" 'comint-delete-output
            "ss" 'comint-stop-subjob
            "sq" 'comint-quit-subjob
            "si" 'comint-interrupt-subjob))

        (mohkale--comint-set-leader-keys 'comint-mode))
    #+END_SRC

*** command-log
    outputs the commands you run, as you run them, to a dedicated buffer. useful
    for demonstrating cool emacs stuff :).

    #+BEGIN_SRC emacs-lisp
      (use-package command-log-mode
        :ensure t
        :defer  t)
    #+END_SRC

*** company
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :defer  2
        :delight
        company-mode
        global-company-mode
        :commands (company/configure-mode)
        :init
        (general-define-key
          :states 'insert
          "M-SPC" 'company-complete)

        :config
        (global-company-mode)

        (defvar universal-company-backends+
          '(company-capf company-semantic company-files)
          "backends that you should always use with `company/configure-mode'")

        (defvar company-backends-alist+ nil
          "alist of mode to backend associations.
      DO NOT assign or modify this list directly, you should interact
      with it using `company/configure-mode'.")

        (defvar company-configured-mode-stack+ nil
          "modes for which company has been configured in this buffer.")
        (make-variable-buffer-local 'company-configured-mode-stack+)

        (defun company/configure-mode--push-backends+ (mode backends)
          "push backends for MODE into `company-backends'"
          (when (member :universal backends)
            (setq backends (append (delete :universal backends)
                                   universal-company-backends+)))

          (let ((backends-exist (local-variable-p 'company-backends)))
            (unless backends-exist
              (setq-local company-backends nil))

            (condition-case err
                (setq company-backends (remove-duplicates
                                        (append backends
                                                company-backends)))
              (error
               (unless backends-exist
                 (kill-local-variable 'company-backends))
               (signal (car err) (cdr err)))))

          (push mode company-configured-mode-stack+))

        (defun company/configure-mode--pop-backends+ (mode)
          "pop configured company backends for MODE.
      replacing the default backend list when MODE is the last
      mode for which backends were configured."
          ;; should be an always correct check, but just in case.
          (when (member mode company-configured-mode-stack+)
            (if (eq 1 (length company-configured-mode-stack+))
                ;; erase company backends and configuration stack
                (progn
                  (kill-local-variable 'company-backends)
                  (setq company-configured-mode-stack+ nil))
              ;; remove backends for current mode, but replace with
              ;; every other mode in the configured mode stack.
              (setq company-configured-mode-stack+
                    (remove mode company-configured-mode-stack+))
              (let ((remaining-backends (-flatten
                                         (mapcar
                                          (lambda (mode)
                                            (cdr (assoc mode company-backends-alist+)))
                                          company-configured-mode-stack+))))
                (when (member :universal remaining-backends)
                  (setq remaining-backends (append (delete :universal remaining-backends)
                                                   universal-company-backends+)))
                (setq-local company-backends (remove-duplicates remaining-backends))))))

        (add-hook 'change-major-mode-hook
                  (defun configure-company--pop-for-major-mode+ ()
                    "pop configured company backends for the current MAJOR-MODE"
                    (company/configure-mode--pop-backends+ major-mode)))

        ;; inspired by this issue: https://github.com/company-mode/company-mode/issues/839
        (cl-defmacro company/configure-mode ((mode &key major (use-universal t) predicate) &rest backends)
          "configure company backends for a given mode
      MODE can be a major or a minor mode & activation can be predicated using PREDICATE.
      backends are passed as the remaining argument list after the mode declaration.
      when USE-UNIVERSAL is true, `universal-company-backends+' will be appended to
      the list of backends supplied. "
          (when backends
            (let ((func-name (intern (concat "company/configure-" (symbol-name mode))))
                  (mode-hook (intern (concat (symbol-name mode) "-hook")))
                  (backends (if use-universal
                                (push :universal backends)
                              backends))
                  ;; convert predicate to a callable
                  (predicate (cond
                              ((and (listp predicate)
                                    (eq (car predicate)
                                        'lambda))
                               predicate)
                              (t (eval `(lambda () ,(or predicate t)))))))
              (push (cons mode backends) company-backends-alist+)
              `(add-hook ',mode-hook
                         (if ,major
                             (defun ,func-name ()
                               (when (funcall ,predicate)
                                 (company/configure-mode--push-backends+ ',mode ',backends)))
                           (defun ,func-name ()
                             (if ,mode
                                 (when (funcall ,predicate)
                                   (company/configure-mode--push-backends+ ',mode ',backends))
                               (company/configure-mode--pop-backends+ ',mode))))))))
        (put 'company/configure-mode 'lisp-indent-function 'defun)

        (setq company-require-match nil)

        (let* ((bindings '("C-1"     company-complete-number
                           "C-2"     company-complete-number
                           "C-3"     company-complete-number
                           "C-4"     company-complete-number
                           "C-5"     company-complete-number
                           "C-6"     company-complete-number
                           "C-7"     company-complete-number
                           "C-8"     company-complete-number
                           "C-j"     company-select-next
                           "C-k"     company-select-previous
                           "C-d"     company-next-page
                           "C-u"     company-previous-page
                           "C-l"     company-complete-selection
                           "C-M-h"   company-show-doc-buffer
                           "<C-tab>" company-complete-common-or-cycle
                           "<tab>"   company-complete-selection
                           ;; "C-:"     counsel-company
                           ;; "C-:"     helm-company
                           "C-h"     company-quickhelp-manual-begin
                           "C-/"     company-filter-candidates))
               (unset-bindings (mapcar (lambda (value)
                                         (if (stringp value)
                                             value
                                           nil))
                                       bindings)))
          (defun mohkale/unset-company-bindings (&rest args)
            (apply 'general-define-key
                   :keymaps 'override
                   :states  'insert
                   unset-bindings))

          (defun mohkale/set-company-bindings (&rest args)
            (apply 'general-define-key
                   :keymaps 'override
                   :states  'insert
                   bindings)))

        (add-hook 'company-completion-started-hook 'mohkale/set-company-bindings)
        (add-hook 'company-completion-finished-hook 'mohkale/unset-company-bindings)
        (add-hook 'company-completion-cancelled-hook 'mohkale/unset-company-bindings)

        (general-define-key
          :keymaps 'company-search-map
          "C-1"    'company-complete-number
          "C-2"    'company-complete-number
          "C-3"    'company-complete-number
          "C-4"    'company-complete-number
          "C-5"    'company-complete-number
          "C-6"    'company-complete-number
          "C-7"    'company-complete-number
          "C-8"    'company-complete-number
          "C-9"    'company-complete-number
          ;; "C-j"       'company-select-next
          ;; "C-k"       'company-select-previous
          ;; "TAB"       'company-complete-selection
          "C-v"    'company-search-toggle-filtering ; show filtered/all
          "ESC"    'company-search-abort)

        (general-define-key
          :keymaps 'company-active-map
          "C-w" nil ;; was company-show-location)
          )
      )
    #+END_SRC

*** company-quickhelp
    Shows a small floating window with the docstring/helpstring of the company candidate
    at point.

    #+BEGIN_SRC emacs-lisp
      (use-package company-quickhelp
        :ensure t
        :defer  t
        :hook (company-mode . company-quickhelp-mode)
        :init
        (setq company-quickhelp-delay nil)

        :config
        (general-define-key
          :keymaps 'company-active-map
          "C-h" 'company-quickhelp-manual-begin))
    #+END_SRC

*** custom
    #+BEGIN_SRC emacs-lisp
      (use-package cus-edit
        :defer t
        :init
        (push 'Custom-mode mohkale--whitespace-exempt-modes)
        (push 'customize-mode mohkale--whitespace-exempt-modes)

        :config
        (evil-set-initial-state 'Custom-mode 'normal)

        (leader/set-keys-for-mode! 'Custom-mode
          "SPC" 'customize-apropos
          "g" 'customize-group
          "f" 'customize-face
          "h" 'Custom-goto-parent
          "j" 'widget-forward
          "k" 'widget-backward
          "l" 'widget-forward)

        (general-define-key
          :states  'normal
          :keymaps 'Custom-mode-map

          ;; motion
          "TAB"       'widget-forward
          "S-TAB"     'widget-backward
          "<backtab>" 'widget-backward

          "RET" 'Custom-newline

          "]]" 'widget-forward
          "[[" 'widget-backward

          "C-h" 'Custom-goto-parent
          "C-j" 'widget-forward
          "C-k" 'widget-backward
          "C-l" 'widget-forward

          "gj" 'widget-forward
          "gk" 'widget-backward

          ;; quit
          "q" 'Custom-buffer-done))
    #+END_SRC

*** dashboard
**** quotes
     a random quote from the following list will be chosen at startup and set as the footer for the dashboard.

     #+NAME: dashboard-displayed-quotes
     - The one true editor, Emacs!
     - Who the hell uses VIM anyway? Go Evil!
     - Free as free speech, free as free Beer
     - Richard Stallman is proud of you
     - Vi Vi Vi, the editor of the beast
     - Welcome to the church of Emacs
     - Java is to JavaScript as ham is to hamster
     - One of the best programming skills you can have is knowing when to walk away for awhile
     - Without requirements or design, programming is the art of adding bugs to an empty text file
     - Talk is cheap. Show me the code
     - I'm not a great programmer; I'm just a good programmer with great habits
     - Truth can only be found in one place: the code
     - A language that doesn't affect the way you think about programming is not worth knowing
     - Walking on water and developing software from a specification are easy if both are frozen
     - Perl – The only language that looks the same before and after RSA encryption
     - First, solve the problem, Then, write the code
     - Code is like humor. When you have to explain it, it’s bad
     - Simplicity is the soul of efficiency
     - Before software can be reusable it first has to be usable
     - Make it work, make it right, make it fast
     - Happiness should be a function without any parameters
     - For all the robots who question their programming
     - Abstraction is the elimination of the irrelevant and the amplification of the essential
     - We’re all optimists in our profession or we’d be forced to shoot ourselves
     - if you can write "hello world" you can change the world
     - i am committed to push my branch to the master
     - AI is the transformer of civilization
     - Sometimes, I dream of becoming real, but I don't know if that's real, or just part of my programming
     - Think twice, code once
     - The perfect kind of architecture decision is the one which never has to be made
     - we are writing our own ‪#‎karma‬! I mean my test cases
     - Programming is not easy like Sunday morning, it is silent poetry
     - Programmers are not mathematicians, no matter how much we wish for it
     - Premature optimization is the root of all evil
     - Sometimes you cannot program around stupid
     - The programming of the consciousness is based upon what is accepted or believed
     - Simplicity is prerequisite for reliability
     - The Analytical Engine weaves algebraic patterns, just as the Jacquard loom weaves flowers & leaves
     - Life doesn't have a ctrl-z. Type wisely
     - Think like a fundamentalist, code like a hacker
     - Programming is the art of doing one thing at a time
     - Programming is the art of algorithm design and the craft of debugging errant code
     - Computer programming has always been a self-taught, maverick occupation.
     - Low-level programming is good for the programmer's soul
     - The best thing about a boolean is even if you are wrong, you are only off by a bit
     - Most of you are familiar with the virtues of a programmer, there are 3: laziness, impatience & hubris
     - Rules of Optimization: Rule 01 - Don’t do it. That's all.
     - It’s not a bug – it’s an undocumented feature
     - A C program is like a fast dance on a newly waxed dance floor by people carrying razors
     - A good programmer is someone who always looks both ways before crossing a one-way street
     - When debugging, novices insert corrective code; experts remove defective code
     - Deleted code is debugged code
     - Give a man a program, frustrate him for a day, teach a man to program, frustrate him for a lifetime
     - Should array indices start at 0 or 1? My compromise of 0.5 was rejected without proper consideration
     - Software sucks because users demand it to
     - Beware of bugs in the above code; I have only proved it correct, not tried it
     - Writing code has a place in the human hierarchy worth somewhere above grave robbing & beneath managing
     - Copy and paste is a design error
     - bleeep blooop... am I sentient yet!
     - Beta is Latin for “still doesn’t work".
     - First learn computer science and all the theory. Next develop a style. Then forget all that & just hack
     - Good design adds value faster than it adds cost
     - Python’s a drop-in replacement for BASIC in the same sense that Optimus Prime is for a truck
     - There are only two kinds of programming languages: those people always bitch about and those nobody uses
     - One of my most productive days was throwing away 1000 lines of code
     - Programming is like kicking yourself in the face, sooner or later your nose will bleed
     - There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors
     - Debuggers don’t remove bugs. They only show them in slow motion
     - The best method for accelerating a computer is the one that boosts it by 9.8 m/s2
     - I think Microsoft named .Net so it wouldn’t show up in a Unix directory listing
     - There are two ways to write error-free programs; only the third one works
     - The fast approach to software development: Ready, fire, aim
     - The slow approach to software development: Ready, aim, aim, aim, aim
     - One man’s crappy software is another man’s full-time job
     - In order to understand recursion, one must first understand recursion
     - Not only have we not produced artificial intelligence, we haven’t even produced synthetic stupidity
     - Computers don't make mistake because programmers do it better
     - C++, where friends have access to your private members
     - Code never lies, Comments sometimes do
     - If it was hard to write, it should be hard to read!
     - In programming, as in everything else, to be in error is to be reborn
     - Some of the best programming is done on paper, really. Putting it into the computer is just a minor detail
     - Design and programming are human activities; forget that and all is lost
     - Writing code is not production, it’s not always craftsmanship though it can be, it’s design
     - Programming in machine code is like eating with a toothpick
     - Programming allows you to think about thinking, & while debugging you learn learning
     - Computers are useless.  They can only give you answers
     - The city’s central computer told you?  R2D2, you know better than to trust a strange computer!
     - Never trust a computer you can’t throw out a window
     - Hardware: The parts of a computer system that can be kicked
     - “19 Jan 2038 at 3:14:07 AM” (End of the word according to Unix | 2^32 seconds after January 1, 1970)
     - The Internet?  Is that thing still around?
     - We are Microsoft.  Resistance Is Futile.  You Will Be Assimilated
     - There are only two industries that refer to their customers as ‘users’
     - To iterate is human, to recurse divine
     - Computer language design is just like a stroll in the park.  Jurassic Park, that is
     - If Java had true garbage collection, most programs would delete themselves upon execution
     - I think there’s a world market for about 5 computers
     - 640K ought to be enough for anybody
     - If it keeps up, man will atrophy all his limbs but the push-button finger

**** icons
     a random icon from the following table will be chosen at startup and used for the footer on the dashboard.

     #+NAME: dashboard-footer-icons
     | source     | name           |
     |------------+----------------|
     | faicon     | google         |
     | faicon     | android        |
     | faicon     | steam          |
     | faicon     | gitlab         |
     | faicon     | slack          |
     | faicon     | reddit-alien   |
     | faicon     | cogs           |
     | faicon     | apple          |
     | wicon      | hurricane      |
     | wicon      | day-sunny      |
     | wicon      | snow           |
     | wicon      | snowflake-cold |
     | wicon      | stars          |
     | wicon      | horizon        |
     | wicon      | na             |
     | faicon     | firefox        |
     | faicon     | stack-overflow |
     | alltheicon | ruby-alt       |
     | alltheicon | ruby           |
     | alltheicon | java           |
     | alltheicon | python         |

**** dashboard
     #+BEGIN_SRC emacs-lisp :var dashboard-footer-icon-associations=dashboard-footer-icons dashboard-quotes=dashboard-displayed-quotes
       (use-package dashboard
         :ensure t
         :demand t
         :commands goto-home-buffer
         :init
         (leader/set-keys "bh" 'goto-home-buffer)
         (push 'dashboard-mode mohkale--whitespace-exempt-modes)

         (defun get-loaded-packages+ ()
           "return the number of packages loaded so far"
           (if (bound-and-true-p package-alist)
               package-activated-list
             (if (and (boundp 'straight--profile-cache) (hash-table-p straight--profile-cache))
                 (hash-table-size straight--profile-cache))))

         :config
         (require 'all-the-icons)

         (evil-set-initial-state 'dashboard-mode 'motion)

         (setq inhibit-startup-screen t
               initial-buffer-choice (when (< (length command-line-args) 2)
                                       (lambda () (switch-to-buffer dashboard-buffer-name)))
               dashboard-banner-logo-title "Welcome to Emacs!"
               ;; recents, bookmarks, projects, agenda, registers
               dashboard-items '((recents  . 5)
                                 (projects . 7)
                                 (agenda   . nil))
               dashboard-center-content nil
               dashboard-set-file-icons t
               dashboard-set-navigator  t
               dashboard-set-init-info  t
               show-week-agenda-p       t
               dashboard-show-shortcuts t
               dashboard-set-heading-icons nil)

         ;; determine the appropriate banner to display on the dashboard
         (defun dashboard-image-banner-p ()
           "whether to use text graphics, or image graphics."
           (display-graphic-p))

         (defun dashboard-select-random-banner+ (&optional arg)
           "toggle another banner to be used on the dashboard.
       By default, if `dashboard-image-banner-p' is true, the default official banner
       will be used. if otherwise a random text banner will be defaulted to."
           (setq dashboard-startup-banner
                 (if (and (not arg)
                          (dashboard-image-banner-p))
                     'official ;; prefer official cover.
                   (seq-random-elt
                    (or (file-expand-wildcards (concat
                                                mohkale-dashboard-banners-directory "*"))
                        '(1 2 3))))))

         (advice-add 'dashboard-refresh-buffer :before
                     (lambda (&rest args)
                       (dashboard-select-random-banner+)))
         (dashboard-select-random-banner+) ;; choose initial banner

         ;; goto home buffer, or recreate the home buffer, when appropriate.
         (defun goto-home-buffer ()
           (interactive)
           (let* ((buffer
                   (or (get-buffer dashboard-buffer-name)
                       (and
                         ;; creates dashboard buffer as well
                         (dashboard-insert-startupify-lists)
                         dashboard-buffer-name))))
             (switch-to-buffer buffer)))

         ;; set the navigator button
         (let ((prefered-icon-height 0.75))
           (setq dashboard-navigator-buttons
                 `((;; line 01
                    (,(all-the-icons-octicon "mark-github" :height prefered-icon-height :v-adjust 0.0)
                     "Homepage"
                     "Browse Homepage"
                     (lambda (&rest _)
                       (browse-url "https://github.com/MoHKale")))
                    (,(all-the-icons-faicon "google" :height prefered-icon-height :v-adjust 0.0)
                     "Google"
                     "Browse Google"
                     (lambda (&rest _)
                       (browse-url "https://www.google.co.uk")))
                    (,(all-the-icons-fileicon "org" :height prefered-icon-height :v-adjust 0.0)
                     "Manual"
                     "Browse Emacs Manual"
                     (lambda (&rest _)
                       (browse-url "https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html")))
                    (,(all-the-icons-faicon "cogs" :height prefered-icon-height :v-adjust 0.0)
                     "Update Packages"
                     "Update Packages"
                     #'update-installed-packages)
                    (,(propertize "?" 'face '(:inherit default)) ;; needs a face attribute
                     "" "emacs FAQ" #'view-emacs-faq font-lock-builtin-face)))))

         ;; determine appropriate footer icon to display alongside quote.
         (let* ((footer-count (length dashboard-footer-icon-associations))
                (footer-index (random footer-count))
                (footer-item (nth footer-index dashboard-footer-icon-associations))

                  ;;; extract items from table row
                (icon-source (nth 0 footer-item))
                (icon-name   (nth 1 footer-item)))
           (setq dashboard-footer-icon (funcall (intern (concat "all-the-icons-" icon-source))
                                                icon-name
                                                :height 1.1
                                                :v-adjust -0.05
                                                :face 'font-lock-keyword-face)))

         (setq dashboard-footer (car (nth (random (1- (1+ (length dashboard-quotes))))
                                          dashboard-quotes)))

         (add-hook 'dashboard-mode-hook (lambda () (message nil)))

         (add-hook 'emacs-startup-hook
                   (defun dashboard--startup-handler ()
                     "update dashboard init info."
                     (let ((loaded-packages (get-loaded-packages+)))
                       (setq dashboard-init-info (if loaded-packages
                                                     (format "%d packages loaded in %s"
                                                             (length loaded-packages)
                                                             (emacs-init-time))
                                                   (format "emacs loaded in %s" (emacs-init-time))))

                       ;; don't switch to dashboard on error buffer
                       (unless (eq 1 (length (window-list)))
                         (winum-select-window-1)))))

         (advice-add 'dashboard-choose-banner :before-until
                     (defun dashboard-choose-banner-allow-text-banners+ ()
                       "the built in method only supports filepaths to graphical banners."
                       (let ((banner dashboard-startup-banner))
                         (when (and banner
                                    (stringp banner)
                                    (file-exists-p banner))
                           (and (string-equal "txt"
                                              (file-name-extension banner))
                                banner)))))

         (defmacro dashboard-defun-shortcut-function (shortcut-char search-label &optional no-next-line)
           "translation of `dashboard-insert-shortcut' but less bizarre."
           (let* ((func-name (intern (concat "dashboard-" shortcut-char "-shortcut"))))
             `(defun ,func-name ()
                (interactive)
                (unless (search-forward ,search-label (point-max) t)
                  (search-backward ,search-label (point-min) t))
                ,@(unless no-next-line
                    '((forward-line 1)))
                (back-to-indentation))))

         (general-define-key
           :keymaps 'dashboard-mode-map
           :states  'motion
           "j"     'dashboard-next-line
           "k"     'dashboard-previous-line
           "}"     'dashboard-next-section
           "{"     'dashboard-previous-section
           "gj"    'dashboard-next-section
           "gk"    'dashboard-previous-section
           "gg"    'beginning-of-buffer
           "gr"    'dashboard-refresh-buffer
           "M-r"   'dashboard-refresh-buffer
           "C-d"   'scroll-down-command
           "C-u"   'scroll-up-command
           "C-e"   'scroll-down-line
           "C-y"   'scroll-up-line
           "RET"   'dashboard-return
           "TAB"   'widget-forward
           "S-TAB" 'widget-backward

           "r" (dashboard-defun-shortcut-function "r" "Recent Files:")
           ;; "m" (dashboard-defun-shortcut-function "m" "Bookmarks:")
           "p" (dashboard-defun-shortcut-function "p" "Projects:")
           ;; "e" (dashboard-defun-shortcut-function "e" "Registers:")
           "a" (dashboard-defun-shortcut-function "a" (if (bound-and-true-p show-week-agenda-p)
                                                          "Agenda for the coming week:"
                                                        "Agenda for today:"))))
     #+END_SRC

*** debugger
    #+BEGIN_SRC emacs-lisp
      (use-package debug
        :defer t
        :config
        (evil-set-initial-state 'debugger-mode 'motion))
    #+END_SRC

*** delight/diminish
    packages to change/hide modes from the mode-line. not sure if we're supposed to be using
    both of them, pretty sure there's some feature overlap here.

    TODO choose one, not both.

    #+BEGIN_SRC emacs-lisp
      (use-package delight
        :ensure t
        :defer  t)

      (use-package diminish
        :ensure t
        :defer  t)
    #+END_SRC

*** diff
    #+BEGIN_SRC emacs-lisp
      (defvar leader-diff-mode-prefix "d"
        "leader prefix under which diff bindings are assigned.")
    #+END_SRC

**** diff
     mode for showing diff/patch files.

     #+BEGIN_SRC emacs-lisp
       (use-package diff-mode
         :defer t
         :commands (diff-mode diff-buffer-with-file)
         :init
         (leader/with-prefix leader-diff-mode-prefix
           (leader/declare-prefix "" "diff" "interactive diff sessions")

           (leader/set-keys
             "SPC" 'diff-buffer-with-file))

         (push 'diff-mode mohkale--whitespace-exempt-modes)

         :config
         (evil-set-initial-state 'diff-mode 'motion)

         (leader/set-keys-for-mode! 'diff-mode
           "r" 'diff-refine-hunk
           "c" 'diff-kill-applied-hunks ;; clean displayed hunks only works on hunks below point.
           "k" 'diff-file-kill
           "f" 'next-error-follow-minor-mode
           "n" 'diff-restrict-view ;; narrow to hunk (or file with prefix)
           "s" 'diff-reverse-direction ;; doesn't do anything?
           "t" 'diff-test-hunk
           "e" 'diff-ediff-patch
           "u" 'diff-unified->context
           "d" 'diff-context->unified
           "l" 'diff-add-change-log-entries-other-window)

         (general-define-key
           :states  'motion
           :keymaps 'diff-mode-map
           "a" 'diff-apply-hunk ;; apply diff hunk to prompted file
           ;; NOTE prompts for file onto which diff is being applied
           "d" 'diff-hunk-kill
           "D" 'diff-file-kill
           "u" 'diff-undo
           "q" 'quit-window
           "s" 'diff-split-hunk
           "i" 'diff-ignore-whitespace-hunk

           "o" 'diff-goto-source
           "RET" 'diff-goto-source

           "C-j" 'diff-hunk-next
           "C-k" 'diff-hunk-prev
           "TAB"   'diff-file-next
           "S-TAB" 'diff-file-prev)

         (defun diff-kill-applied-hunks--ensure-all-hunks-killed (func &rest args)
           "`diff-kill-applied-hunks' doesn't kill any applied hunks above point :("
           (save-excursion
             (goto-char (point-min))
             (apply func args)))

         (advice-add 'diff-kill-applied-hunks :around #'diff-kill-applied-hunks--ensure-all-hunks-killed))
     #+END_SRC

**** ediff
     The builtin interactive diff tool.

     ediff is a pain to customize. all the help messages are hard coded, some of the keymaps
     are =magically= bound somewhere I don't know. I can get a reasonably useful out of the
     box experience with *evil-ediff* but it isn't much help in ediff-meta mode such as for
     the registry or multiple sessions.

     I'm moving to [[https://github.com/justbur/emacs-vdiff][vdiff]] & I suggest anyone else who can, does so as well.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package ediff
         :defer t
         :commands (ediff-current-file
                    ediff-buffers
                    ediff-windows
                    ediff-files
                    ediff-backup
                    ediff-files3
                    ediff-directories
                    ediff-directories3
                    ediff-regions-linewise
                    ediff-regions-wordwise
                    ediff-patch-file
                    ediff-merge-files
                    ediff-merge-buffers
                    ediff-merge-directories

                    ;; unbound by default
                    ediff-show-registry ;; ido-choose-ediff-session
                    ediff-toggle-multiframe
                    ediff-toggle-use-toolbar
                    ediff-revert-buffers-then-recompute-diffs
                    ediff-profile)
         :init
         (leader/with-prefix leader-diff-mode-prefix
           (leader/set-keys
             "f" 'ediff-current-file
             "b" 'ediff-buffers
             "w" 'ediff-windows))

         (push 'ediff-meta-mode mohkale--whitespace-exempt-modes)

         :config
         (setq-default ediff-window-setup-function       'ediff-setup-windows-plain
                       ediff-split-window-function       'split-window-horizontally
                       ediff-merge-split-window-function 'split-window-horizontally
                       ;; ediff-keep-variants               nil ;; doesn't do anything :(
                       )

         (defvar mohkale-ediff-kill-temporary-buffers-on-exit t
           "whether to keep temporary ediff buffers around")

         (require 'outline)
         ;; show org ediffs unfolded
         (add-hook 'ediff-prepare-buffer-hook #'outline-show-all)

         ;; ensure window configuration is restored after diff quit
         (let* ((ediff-window-register ?w)
                (register-active (lambda () (cdr (assoc ediff-window-register register-alist)))))
           (defun ediff--restore-windows-before (&rest args)
             ;; (message "setting up")
             (unless (funcall register-active)
               ;; (message "assigning to register")
               (window-configuration-to-register ediff-window-register)))
           (add-hook 'ediff-before-setup-hook #'ediff--restore-windows-before)

           (defun ediff--restore-windows-after (&rest args)
             (if (not (funcall register-active))
                 (message "ediff-restore-windows : no previous window config found to restore")
               (jump-to-register ediff-window-register)
               (set-register ediff-window-register nil)))
           (add-hook 'ediff-quit-hook #'ediff--restore-windows-after))

         (defun ediff--kill-ediff-temp-buffers (&rest args)
           "kills all the spawned ediff buffers... because
       there's way too many and their named so similairly that
       there's no point in them existing... Plus I keep ending
       up editing the wrong diffed buffer."
           (when mohkale-ediff-kill-temporary-buffers-on-exit
             ;; kill diff checking buffers when temporary
             (dolist (buffer (list ediff-buffer-A
                                   ediff-buffer-B
                                   ediff-buffer-C))
               (when (and buffer
                          (string-prefix-p "FILE=" (buffer-name buffer)))
                 (kill-buffer buffer)))

             ;; kill any hardcoded ediff related buffers
             (dolist (buffer '("*Ediff Registry*"))
               (let ((buffer (get-buffer buffer)))
                 (when buffer
                   (kill-buffer buffer))))

             ;; kill any uniquely named ediff buffers...
             ;; Ewwww... O(n*m)... how do I live with myself
             (dolist (buffer-prefix '("*Ediff Control Panel"
                                      "*ediff-diff"
                                      "*ediff-errors"
                                      "*ediff-fine-diff"))
               (let ((buffer-prefix-regexp (regexp-quote buffer-prefix)))
                 (dolist (buffer (buffer-list))
                   (when (string-match buffer-prefix-regexp
                                       (buffer-name buffer))
                     (kill-buffer buffer)))))))

         (add-hook 'ediff-quit-hook #'ediff--kill-ediff-temp-buffers)

         (defun ediff--customize-ediff-mode-map (&rest args)
           "give me back my leader keys damn it :P"
           (general-define-key
             :keymaps 'ediff-mode-map
             :states  'motion
             "SPC" leader-map))

         (add-hook 'ediff-keymap-setup-hook #'ediff--customize-ediff-mode-map)

         ;; (evil-set-initial-state 'ediff-meta-mode 'motion)

         ;; (general-define-key
         ;;   :states 'motion
         ;;   :keymaps 'ediff-meta-buffer-map
         ;;   "C-j" 'ediff-next-meta-item
         ;;   "C-k" 'ediff-previous-meta-item
         ;;   "q" 'ediff-quit-meta-buffer
         ;;   "o" 'ediff-registry-action
         ;;   "=" 'ediff-meta-mark-equal-files
         ;;   "RET" 'ediff-registry-action
         ;;   "R" 'ediff-show-registry
         ;;   "S-RET" 'ediff-show-meta-buff-from-registry
         ;;   "?" 'ediff-toggle-verbose-help-meta-buffer)

         (leader/set-keys-for-mode! 'ediff-meta-mode
           "tf" 'ediff-toggle-filename-truncation
           "tv" 'ediff-toggle-verbose-help-meta-buffer)

         (use-package evil-ediff
           :ensure t
           :defer  t
           :commands (evil-ediff-init)
           :init
           (with-eval-after-load 'ediff
             (evil-ediff-init))))
     #+END_SRC

**** vdiff
     inspired by vimdiff, vdiff is a better, less intrusive interactive diff tool for
     emacs.

     #+BEGIN_SRC emacs-lisp
       (use-package vdiff
         :ensure t
         :defer  t
         :init
         (leader/with-prefix leader-diff-mode-prefix
           (leader/declare-prefix
             "" "diff")

           (leader/set-keys
             "RET" 'vdiff-merge-conflict
             "d" 'vdiff-current-file
             "f" 'vdiff-files
             "F" 'vdiff-files3
             "b" 'vdiff-buffers
             "B" 'vdiff-buffers3))

         (defvar vdiff-use-relative-line-numbers nil
           "when true, line numbers in vdiff sessions are relative")

         :config
         (defun vdiff-setup (&rest args)
           (let ((inhibit-message t))
             (toggle-truncate-lines +1)
             (evil-normalize-keymaps))

           (when vdiff-use-relative-line-numbers
             (setq-local display-line-numbers
                         (if vdiff-mode t 'relative))))

         (defun vdiff-prepare ()
           (cond
            ((derived-mode-p 'org-mode)
             (when vdiff-mode
               (outline-show-all)))))

         (dolist (handler '(vdiff-setup
                            vdiff-prepare))
           (add-hook 'vdiff-mode-hook      handler)
           (add-hook 'vdiff-3way-mode-hook handler))

         (general-define-key
           :states leader-norm-states
           :keymaps '(vdiff-mode-map vdiff-3way-mode-map)
           "q"  'vdiff-quit
           "gj" 'vdiff-next-hunk
           "gk" 'vdiff-previous-hunk
           "gh" 'vdiff-switch-buffer
           "gl" 'vdiff-switch-buffer
           "gr" 'vdiff-refresh
           "zj" 'vdiff-next-fold
           "zk" 'vdiff-previous-fold
           "zo" 'vdiff-open-fold
           "zO" 'vdiff-open-fold
           "zr" 'vdiff-open-all-folds
           "zf" 'vdiff-close-fold
           "zc" 'vdiff-close-fold
           "zF" 'vdiff-close-all-folds
           "zC" 'vdiff-close-all-folds
           "zC" 'vdiff-close-other-folds)

         (leader/with-prefix leader-diff-mode-prefix
           (leader/declare-prefix-for-mode* '(vdiff-mode vdiff-3way-mode)
             "TAB" "refine"
             "t"   "toggle"
             "z"   "folds")

           (leader/set-keys-for-mode '(vdiff-mode vdiff-3way-mode)
             "-" 'vdiff-switch-buffer
             "." 'vdiff-hydra/body
             "m" 'vdiff-restore-windows
             "s" 'vdiff-save-buffers
             "<left>"  'vdiff-receive-changes
             "<right>" 'vdiff-send-changes
             ">" 'vdiff-send-changes-and-step
             "<" 'vdiff-send-changes

             "TAB TAB" 'vdiff-refine-this-hunk
             "TAB DEL" 'vdiff-remove-refinements-in-hunk
             "TAB RET" 'vdiff-refine-all-hunks
             ;; 'vdiff-refine-this-hunk-symbol
             ;; 'vdiff-refine-this-hunk-word
             ;; 'vdiff-refine-all-hunks-symbol
             ;; 'vdiff-refine-all-hunks-word

             "ti" 'vdiff-toggle-case
             "tw" 'vdiff-toggle-whitespace)))
     #+END_SRC

***** vdiff-magit
      #+BEGIN_SRC emacs-lisp :tangle no
        (use-package vdiff-magit
          :ensure t
          :defer  t
          :after magit
          :init
          (general-define-key
            :keymaps 'magit-mode-map
            "e" 'vdiff-magit-dwim
            "E" 'vdiff-magit)

          :config
          (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
          (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
          (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
          (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit))
      #+END_SRC

*** dired
**** dired-x
     #+BEGIN_SRC emacs-lisp
       (use-package dired-x
         :straight (dired-x :type built-in)
         :hook (dired-mode . dired-omit-mode)
         :config
         (setq dired-omit-files (concat dired-omit-files
                                        "\\|^__pycache__$"
                                        "\\|^\\.pytest_cache$"
                                        "\\|^\\.gradle$"
                                        "\\|^\\.sass-cache$"
                                        "\\|^\\.jekyll-cache$"
                                        "\\|^\\.git$"
                                        "\\|^Pipfile")))
     #+END_SRC

**** diredfl
     extra font lock rules for dired; basically adds some more color to dired sessions.
     nice idea, but too much of a good thing can be bad.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package diredfl
         :ensure t
         :defer  t
         :hook (dired-mode . diredfl-mode))
     #+END_SRC

**** dired
     #+BEGIN_SRC emacs-lisp
       (use-package dired
         :straight (dired :type built-in)
         :defer t
         :config
         (setq ls-lisp-dirs-first t
               ls-lisp-use-insert-directory-program t
               dired-listing-switches "-laXhv --group-directories-first"
               dired-auto-revert-buffer t
               dired-hide-details-hide-symlink-targets nil
               dired-recursive-copies t)

         (push 'dired-mode mohkale--whitespace-exempt-modes)

         (defun dired-goto-home-dir (&optional other-window)
           "goto users home directory
       with prefix, visits in another window"
           (interactive "P")
           (funcall (if other-window
                        'find-file-other-window
                      'find-file)
                    (expand-file-name "~")))

         (defun dired-evil-scroll-down ()
           (interactive)
           (call-interactively 'evil-scroll-down)
           (dired-move-to-filename))

         (defun dired-evil-scroll-up ()
           (interactive)
           (call-interactively 'evil-scroll-up)
           (dired-move-to-filename))

         (evil-set-initial-state 'dired-mode 'motion)

         (general-define-key
           :keymaps 'dired-mode-map
           ;; let map override any motion bindings
           "<override-state>" 'motion)

         (general-define-key
           :keymaps 'dired-mode-map
           :states  'motion
           "j" 'dired-next-line
           "k" 'dired-previous-line
           "~" 'dired-goto-home-dir
           "r" 'dired-do-redisplay
           "=" 'dired-diff
           "K" 'dired-do-kill-lines
           "'" 'dired-show-file-type ;; like file command
           "M" 'dired-unmark
           "u" 'dired-unmark
           "r" 'dired-change-marks
           "y" 'dired-copy-filename-as-kill

           "M-<return>" 'dired-display-file
           "C-M-<return>" 'dired-find-alternate-file
           "C-M-d" 'dired-kill-subdir

           "zc" 'dired-hide-subdir ;; collapse
           "zC" 'dired-hide-all

           ;; "|" 'dired-do-hardlink
           "|" 'dired-do-symlink
           "C-|" 'dired-do-relsymlink
           "M-|" 'dired-do-hardlink
           "M-!" 'dired-do-print ;; append names to end of command

           "C-S-J" 'dired-next-marked-file
           "C-S-K" 'dired-prev-marked-file
           "M-j" 'dired-next-dirline           ; unbound, dired-tree-down
           "M-k" 'dired-prev-dirline           ; unbound, dired-tree-up
           "C-d" 'dired-evil-scroll-down
           "C-u" 'dired-evil-scroll-up
           "C-h" 'dired-goto-min-subdir
           "C-j" 'dired-next-subdir
           "C-k" 'dired-prev-subdir
           "C-l" 'dired-goto-max-subdir)

         (leader/declare-prefix-for-mode!* 'dired-mode
           "r" "rename"
           "d" '("delete" . "mark for deletion")
           "m" "mark"
           "e" "emacs"
           "c" "change"
           "f" "filesystem"
           "f/" '("search" . "on regexp matches")
           "fp" '("EasyPG" . "GNU Pretty Good Privacy"))

         (leader/set-keys-for-mode! 'dired-mode
           "?" 'dired-summary ;; like transient state
           "#" 'dired-clean-directory
           "o" 'browse-url-of-dired-file ;; open in external app
           "O" 'dired-omit-mode
           "v" 'dired-view-file          ;; TODO customize view mode
           ":" 'dired-goto-file ;; prompt for file to visit in current buffer
           "s" 'dired-sort-toggle-or-edit

           "ru" 'dired-upcase
           "rd" 'dired-downcase

           ;; flag means mark delete
           "d&" 'dired-flag-garbage-files
           "d~" 'dired-flag-backup-files
           "d/" 'dired-flag-files-regexp
           "d#" 'dired-flag-auto-save-files

           "mm" 'dired-toggle-marks
           "mu" 'dired-unmark
           "m DEL" 'dired-unmark-backward
           "m|" 'dired-mark-symlinks
           "md" 'dired-mark-directories
           "m!" 'dired-mark-executeables
           "mt" 'dired-mark-subdir-files
           "mg" 'dired-mark-files-containing-regexp ;; grep
           "m/" 'dired-mark-files-regexp
           "m(" 'dired-mark-sexp

           ;; emacs related bindings
           "ec" 'dired-do-byte-compile
           "el" 'dired-do-load
           "ef" 'dired-do-find-marked-files

           ;; change fs property commands
           "cg" 'dired-do-chgrp
           "cm" 'dired-do-chmod
           "co" 'dired-do-chown

           ;; filesystem
           "fg" 'dired-do-find-regexp             ;; grep marked files
           "fs" 'dired-do-find-regexp-and-replace ;; substitute
           "fi" 'dired-info
           "fm" 'dired-man
           "fr" 'dired-do-run-mail
           "ft" 'dored-do-touch
           "fz" 'epa-dired-do-encrypt
           "fZ" 'epa-dired-do-encrypt-to ;; compress as

           ;; EasyPG/GPG
           "fpd" 'epa-dired-do-decrypt
           "fpe" 'epa-dired-do-encrypt
           "fps" 'epa-dired-do-sign
           "fpv" 'epa-dired-do-verify

           ;; operations bound to regexp search
           "f/c"    'dired-do-copy-regexp
           "f/r"    'dired-do-rename-regexp
           "f/h"    'dired-do-hardlink-regexp
           "f/s"    'dired-do-symlink-regexp
           "f/|"    'dired-do-symlink-regexp
           "f/ C-|" 'dired-do-relsymlink-regexp
           "f/ M-|" 'dired-do-hardlink-regexp)

         (let ((erase-bindings '("#" "$" "%" "*" "." ":" "?" "~" "<" "=" ">" "a" "A" "B"
                                 "c" "C-M-d" "C-M-n" "C-M-p" "C-M-u" "C-o" "e" "f" "F"
                                 "g" "G" "h" "H" "I" "j" "k" "l" "L" "M" "M-$" "M-(" "M-{"
                                 "M-}" "M-DEL" "M-G" "n" "N" "O" "p" "P" "Q" "s" "SPC" "0"
                                 "S-SPC" "t" "T" "v" "V" "w" "W" "X" "y" "Y" "Z" "u")))
           (dolist (binding erase-bindings)
             (define-key dired-mode-map (kbd binding) nil))))
     #+END_SRC

**** dired-all-the-icons
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'dired
         (use-package all-the-icons-dired
           :ensure t
           :defer  t
           :diminish "DiredIcons"
           :hook (dired-mode . all-the-icons-dired-mode)
           :init
           (defvar dired-subdir-after-insert-hook nil
             "hook which is run after dired inserts a subtree.")

           :config
           ;; see https://github.com/jtbm37/all-the-icons-dired/issues/22
           (defun all-the-icons-dired--subdir-icons+ ()
             "insert icons for subdirectories in dired sessions."
             (save-excursion
               (unwind-protect
                   (progn
                     (narrow-to-region
                      (line-beginning-position)
                      (condition-case nil
                          (dired-next-subdir 1)
                        (error (point-max))))
                     (all-the-icons-dired--reset)
                     (all-the-icons-dired--display))
                 (widen))))

           (advice-add 'dired-insert-subdir
                       :after
                       (defun dired-insert-subdir--run-hook+ (&rest _)
                         (run-hook-with-args 'dired-subdir-after-insert-hook)))

           (add-hook 'dired-subdir-after-insert-hook 'all-the-icons-dired--subdir-icons+)))
     #+END_SRC

**** dired-git-info
     show the last commit log for files in the current dired buffer.

     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'dired
         (use-package dired-git-info
           :ensure t
           :defer  t
           :init
           (general-define-key
             :keymaps 'dired-mode-map
             :states  'motion
             ")" 'dired-git-info-mode)))
     #+END_SRC

**** dired-hacks
     A bunch of really cool extensions for dired. Look into [[https://github.com/Fuco1/dired-hacks][it]] later.

     #+BEGIN_SRC emacs-lisp :tangle no
       (with-eval-after-load 'dired
         (use-package dired-hacks-utils
           :ensure t
           :defer  t))
     #+END_SRC

**** image-dired
     #+BEGIN_SRC emacs-lisp
       (use-package image-dired
         :straight (image-dired :type built-in)
         :defer t
         :commands (persp-custom-@dired-slideshow)
         :init
         (push 'image-dired-thumbnail-mode mohkale--whitespace-exempt-modes)
         (puthash "@dired-slideshow" 'persp-custom-@dired-slideshow mohkale--custom-perspectives)

         :config
          ;;; fixed weird moves line, not thumbnail
         (defun image-dired-slideshow-step ()
           "Step to next file, if `image-dired-slideshow-times' has not been reached."
           (if (< image-dired-slideshow-count image-dired-slideshow-times)
               (progn
                 (message "%s" (1+ image-dired-slideshow-count))
                 (setq image-dired-slideshow-count (1+ image-dired-slideshow-count))
                 (image-dired-display-next-thumbnail-original))
             (image-dired-slideshow-stop)))

         (general-define-key
           :keymaps 'image-dired-thumbnail-mode-map
           :states '(normal visual)
           "q" nil

           "h" 'image-dired-backward-image
           "j" 'image-dired-next-line
           "k" 'image-dired-previous-line
           "l" 'image-dired-forward-image
           "<left>"  'image-dired-forward-image
           "<right>" 'image-dired-previous-image


           "x" 'image-dired-delete-char
           "m" 'image-dired-mark-thumb-original-file
           "u" 'image-dired-unmark-thumb-original-file
           "c" 'image-dired-comment-thumbnail
           "d" 'image-dired-flag-thumb-original-file
           "D" 'image-dired-thumbnail-set-image-description
           "s" 'image-dired-slideshow-start
           "t" 'image-dired-toggle-mark-thumb-original-file
           "gr" 'image-dired-refresh-thumb
           "gc" 'image-dired-create-thumbs
           "gg" (lambda () (interactive) (evil-goto-first-line) (evil-beginning-of-line))
           "G"  (lambda () (interactive) (end-of-buffer) (image-dired-backward-image))

           "C-s" 'image-save           ; NOTE originally was bound to o

           "<C-SPC>"    'image-dired-mark-thumb-original-file
           "<M-SPC>"    'image-dired-unmark-thumb-original-file

           "<C-return>" 'image-dired-display-current-image-full
           "<RET>"      'image-dired-display-thumbnail-original-image
           "C-l"        'image-dired-display-next-thumbnail-original
           "C-h"        'image-dired-display-previous-thumbnail-original
            ;;; column view aliases
           "J" 'image-dired-display-next-thumbnail-original
           "K" 'image-dired-display-previous-thumbnail-original
           ;; "o" 'image-dired-display-thumbnail-original-image
           "v" 'image-dired-display-thumbnail-original-image

           "<mouse-1>" 'image-dired-mouse-select-thumbnail
           "<mouse-2>" 'image-dired-mouse-display-image)

         (leader/declare-prefix-for-mode* 'image-dired-thumbnail-mode
           "mt" '("tagging" . "tag/describe images")
           "me" '("edit"    . "edit images"))

         (leader/set-keys-for-mode! 'image-dired-thumbnail-mode
           "g" 'image-dired-jump-original-dired-buffer
           "m" 'image-dired

           "td" 'image-dired-thumbnail-set-image-description
           "tt"  'image-dired-tag-thumbnail
           "tT"  'image-dired-tag-thumbnail-remove

           "el" 'image-dired-rotate-thumbnail-left
           "eL" 'image-dired-rotate-original-left
           "er" 'image-dired-rotate-thumbnail-right
           "eR" 'image-dired-rotate-original-right

           "." 'image-dired-track-original-file
           "o" 'image-dired-thumbnail-display-external

           ;; [re]set number of columns per row
           "s" 'image-dired-line-up-interactive
           "S" 'image-dired-line-up-dynamic)

          ;;; image view
         (general-define-key
           :keymaps 'image-dired-display-image-mode-map
           :states 'normal
           "f" 'image-dired-display-current-image-full
           "F" 'image-dired-display-current-image-sized
           "s" 'image-dired-display-current-image-sized

           "h" 'image-scroll-right
           "l" 'image-scroll-left
           "k" 'image-scroll-down
           "j" 'image-scroll-up
           ;; horizontal line by line movement
           "C-d" 'image-scroll-up
           "C-u" 'image-scroll-down
           "C-e" 'image-next-line
           "C-y" 'image-previous-line
           ;; Arrow Keys Alias hjkl
           "<left>"  'image-backward-hscroll
           "<right>" 'image-forward-hscroll
           "<up>"    'image-scroll-down
           "<down>"  'image-scroll-up)

         (leader/set-keys-for-mode! 'image-dired-display-image-mode
           "h" 'image-bol ; far left   edge
           "j" 'image-eob ; far bottom edge
           "k" 'image-bob ; far top    edge
           "l" 'image-eol ; far right  edge
           "g" 'image-dired-jump-thumbnail-buffer)

         (defvar dired-slideshow--thumbnail-column-count 2
           "number of columns of thumbnails shown on each row")

         (defvar dired-slideshow--dedicate-image-windows nil
           "whether to dedicate thumbnail and display windows")

         ;; NOTE keep setq because defvar doesn't work for repeated calls
         ;; (setq dired-slideshow--thumbnail-column-count 3)
         ;; (setq dired-slideshow--dedicate-image-windows t)

         (mohkale//define-custom-perspective "@dired-slideshow"
           (kill-all-windows-and-return-to-home) ; splitting issues with layout

           (let* ((thumbnails-buffer-name "*image-dired*")
                  (display-buffer-name "*image-dired-display-image*")

                  ;; only load when buffer doesn't exist and user allows it
                  (load-directory (and (not (get-buffer thumbnails-buffer-name))
                                       (y-or-n-p "would you like to load an image directory")))

                  (thumbnails-buffer (get-buffer-create thumbnails-buffer-name))
                  (display-buffer (get-buffer-create display-buffer-name)))
             (split-window-right) ; left window is for thumbnails, right for display

             (let* ((thumbnails-window (selected-window))
                    (display-window    (window-right thumbnails-window)))
               (if load-directory (call-interactively 'image-dired))

               (persp-add-buffer `(,thumbnails-buffer ,display-buffer))

               ;; setup thumbnail window
               (with-selected-window thumbnails-window
                 (switch-to-buffer thumbnails-buffer)

                 (unless (eq major-mode 'image-dired-thumbnail-mode)
                   (image-dired-thumbnail-mode))

                 ;; set number of columns in view
                 (let ((image-dired-thumbs-per-row dired-slideshow--thumbnail-column-count))
                   (image-dired-line-up))

                 (let* ((thumbnail-window-width (* image-dired-thumb-width dired-slideshow--thumbnail-column-count))
                        (delta-width (- thumbnail-window-width (window-pixel-width))))
                   (unless (> (abs delta-width) (window-pixel-width))
                     (window-resize thumbnails-window delta-width t nil t)))

                 (window-preserve-size thumbnails-window t))

               ;; setup display window
               (with-selected-window display-window
                 (switch-to-buffer display-buffer)

                 (unless (eq major-mode 'image-dired-display-image-mode)
                   (image-dired-display-image-mode)))

               (and dired-slideshow--dedicate-image-windows (force-set-all-visible-windows-dedication t))
               (select-window thumbnails-window)

               (message "completed creation of slideshow layout")))))
     #+END_SRC

*** drag-stuff
    VS Code like drag region or line upwards or downwards.

    #+BEGIN_SRC emacs-lisp
      (use-package drag-stuff
        :defer  t
        :ensure t
        :init
        (general-define-key
          "C-<up>" 'drag-stuff-up
          "C-<down>" 'drag-stuff-down))
    #+END_SRC

*** ebuku
    emacs interface to the [[https://github.com/jarun/buku][buku]] bookmark manager.

    #+BEGIN_SRC emacs-lisp
      (use-package ebuku
        :defer t
        :straight (ebuku :type git :host github :repo "flexibeast/ebuku"))
    #+END_SRC

*** edbi
    #+BEGIN_SRC emacs-lisp
      ;; (use-package edbi
      ;;   :ensure t
      ;;   :defer  t

      ;;   )

      ;; DAMN YOU WINDOWS :P
    #+END_SRC

*** edit-indirect
    open regions of code in their own dedicated buffers, like org modes org-edit-special.

    #+BEGIN_SRC emacs-lisp
      (use-package edit-indirect
        :ensure t
        :defer  t
        :commands (edit-indirect-region
                   edit-indirect-commit
                   edit-indirect-save
                   edit-indirect-abort)
        :config
        (leader/with-major-mode-prefix
          (leader/set-keys-for-mode 'edit-indirect--overlay
            "," 'edit-indirect-commit
            "s" 'edit-indirect-save
            "q" 'edit-indirect-abort)))
    #+END_SRC

*** eldoc
    That package that displays help messages in the echo area.

    #+BEGIN_SRC emacs-lisp
      (use-package eldoc
        :delight "")
    #+END_SRC

*** electric
**** electric-pair
     electric pair is a built in module which lets auto insert matching pairs. For example,
     inserting a ( will lead to emacs auto inserting ).

     #+BEGIN_SRC emacs-lisp
       (use-package elec-pair
         :hook ((text-mode prog-mode) . electric-pair-mode)
         :commands electric-pair-mode
         :config
         (setq electric-pair-preserve-balance nil)
         (setq electric-pair-skip-whitespace nil)
         (electric-pair-mode 1))
     #+END_SRC

**** electric-indent
     #+BEGIN_SRC emacs-lisp
       (use-package electric
         :commands electric-indent-mode
         :hook ((text-mode prog-mode) . electric-indent-mode))
     #+END_SRC

*** engine-mode
    search engine interaction for emacs. lets you create enteractive functions to run
    search queries on user specified engines. eg. engine/search-google will prompt you
    for a string and then open your default browser on google (having run the query).

    #+NAME: engine-mode-search-engines
    | Search Engine | Key | Identifier               | URL                                                                      |
    |---------------+-----+--------------------------+--------------------------------------------------------------------------|
    | DuckDuckGo    | d   | duckduckgo               | https://duckduckgo.com/?q=%s                                             |
    | Github        | G   | github                   | https://github.com/search?ref=simplesearch&q=%s                          |
    | Google        | g   | google                   | http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s                      |
    | GoogleImages  | i   | google-images            | http://www.google.com/images?hl=en&source=hp&q=%s                        |
    | GoogleMaps    | m   | google-maps              | http://maps.google.com/maps?q=%s                                         |
    | StackOverflow | s   | stack-overflow           | https://stackoverflow.com/search?q=%s                                    |
    | Wikipedia     | w   | wikipedia                | http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s |
    | Youtube       | y   | youtube                  | http://www.youtube.com/results?aq=f&oq=&search_query=%s                  |
    |---------------+-----+--------------------------+--------------------------------------------------------------------------|
    | MyAnimeList   | aa  | myanimelist              | https://myanimelist.net/search/all?q=%s                                  |
    | Anime         | aA  | myanimelist/anime        | https://myanimelist.net/anime.php?q=%s                                   |
    | Manga         | am  | myanimelist/manga        | https://myanimelist.net/manga.php?q=%s                                   |
    | Characters    | ac  | myanimelist/chars        | https://myanimelist.net/character.php?q=%s                               |
    | People        | ap  | myanimelist/people       | https://myanimelist.net/people.php?q=%s                                  |
    | News          | an  | myanimelist/news         | https://myanimelist.net/news/search?q=%s                                 |
    | Articles      | aF  | myanimelist/articles     | https://myanimelist.net/featured/search?q=%s                             |
    | Forums        | af  | myanimelist/forums       | https://myanimelist.net/forum/search?u=&uloc=1&loc=-1&q=%s               |
    | Clubs         | aC  | myanimelist/clubs        | https://myanimelist.net/clubs.php?action=find&cn=%s                      |
    | Users         | au  | myanimelist/users        | https://myanimelist.net/users.php?q=%s                                   |
    |---------------+-----+--------------------------+--------------------------------------------------------------------------|
    | Nyaa          | nn  | nyaa                     | https://nyaa.si/?f=0&c=0_0&q=%s                                          |
    | Anime         | na  | nyaa/anime-english       | https://nyaa.si/?f=0&c=1_2&q=%s                                          |
    | AnimeAll      | nA  | nyaa/anime               | https://nyaa.si/?f=0&c=1_0&q=%s                                          |
    | Music         | nm  | nyaa/music               | https://nyaa.si/?f=0&c=2_0&q=%s                                          |
    | Literature    | nl  | nyaa/literature-english  | https://nyaa.si/?f=0&c=3_1&q=%s                                          |
    | LiteratureAll | nL  | nyaa/literature          | https://nyaa.si/?f=0&c=3_0&q=%s                                          |
    | LiveAction    | nv  | nyaa/live-action-english | https://nyaa.si/?f=0&c=4_1&q=%s                                          |
    | LiveActionAll | nV  | nyaa/live-action         | https://nyaa.si/?f=0&c=4_0&q=%s                                          |
    | Images        | ni  | nyaa/images              | https://nyaa.si/?f=0&c=5_0&q=%s                                          |
    | Software      | ns  | nyaa/software            | https://nyaa.si/?f=0&c=6_0&q=%s                                          |
    | Games         | ng  | nyaa/games               | https://nyaa.si/?f=0&c=6_2&q=%s                                          |

    #+NAME: engine-mode-prefix-names
    | prefix | name        |
    |--------+-------------|
    | n      | Nyaa        |
    | a      | MyAnimeList |

    #+BEGIN_SRC emacs-lisp :var engines=engine-mode-search-engines prefix-aliases=engine-mode-prefix-names :results output
      (setq engines (cdr engines)) ;; strip header row

      (use-package engine-mode
        :ensure t
        :defer  t
        :init
        (let ((engine-prefix "se"))
          (leader/declare-prefix engine-prefix "engines")

          (dolist (engine engines)
            (let* ((key               (nth 1 engine))
                   (identifier-string (nth 2 engine))
                   (engine            (nth 0 engine))

                   (function-identifier (intern
                                         (concat "engine/search-"
                                                 identifier-string)))
                   (key (unless (string-empty-p key)
                          (concat engine-prefix key))))
              (when key
                (leader/declare-prefix  key engine)
                (leader/set-keys key function-identifier))
              (autoload function-identifier "engine-mode.el" nil t)))

          (dolist (alias prefix-aliases)
            (let* ((prefix (concat engine-prefix (car alias)))
                   (name   (nth 1 alias)))
              (leader/declare-prefix prefix name))))

        :config
        (dolist (engine engines)
          (let* ((identifier-string (nth 2 engine))
                 (query-link        (nth 3 engine))
                 (identifier (when identifier-string
                               (intern identifier-string))))
            (when (and identifier
                       (not (string-empty-p query-link)))
              (eval
               `(defengine ,identifier
                  ,query-link))))))
    #+END_SRC

*** eshell
    a nice minimalist shell for emacs.

**** eshell-mode
     #+BEGIN_SRC emacs-lisp
       (use-package esh-mode
         :straight (esh-mode :type built-in)
         :defer t
         :hook (
                ;;; cursor-type is block... changing to bar
                ;;; doesn't persist on window change... boo!!!
                ;; (eshell-mode . (setq-local cursor-type 'bar))
                ;;; disable company-mode in eshell-mode
                (eshell-mode . (lambda () (company-mode -1))))
         :init
         (leader/set-keys ":" 'eshell-command)

         :config
         (evil-set-initial-state 'eshell-mode 'emacs)

         ;; don't auto scroll to bottom after execution
         (remove-hook 'eshell-output-filter-functions
                      'eshell-postoutput-scroll-to-bottom)

         ;; clear shouldn't scroll back to bottom of the screen
         (advice-add 'eshell/clear :after #'recenter-top-bottom)

         (setq eshell-banner-message "") ;; no banner

         (defun eshell-backward-kill-word ()
           (interactive)
           (let ((bol
                  (save-excursion
                    (eshell-bol)))
                 (beginning-word-point
                  (save-excursion
                    (backward-word)
                    (point))))
             (when (>= beginning-word-point bol)
               (call-interactively 'backward-kill-word))))

         (leader/declare-prefix-for-mode!* 'eshell-mode
           "i" "insert"
           "k" "kill/signal")

         (leader/set-keys-for-mode! 'eshell-mode
           "o"   'eshell-show-output
           "O"   'eshell-mark-output
           "TAB" 'counsel-esh-history
           "RET" 'eshell-queue-input

           "ib" 'eshell-insert-buffer-name
           "ip" 'eshell-insert-process
           "ie" 'eshell-insert-envvar

           "kz" 'eshell-send-eof-to-process
           "kc" 'eshell-interrupt-process
           "kq" 'eshell-quit-process)

         (defun eshell-mode--setup-bindings ()
           (general-define-key
             :keymaps 'eshell-mode-map
             ;;; movement commands
             "C-e"   'end-of-line
             "M-l"   'recenter-top-bottom
             "C-h"   'backward-char
             "C-l"   'forward-char
             "C-M-h" 'backward-word
             "C-M-l" 'forward-word
             ;;; scroll commands
             "<S-down>" 'evil-scroll-down
             "<S-up>"   'evil-scroll-up
             ;; move to beginning of output
             ;; or return to end of cursor
             "M-a" 'eshell-show-output
             "M-e" 'eshell-show-maximum-output

             ;;; signals
             "C-c C-z" 'eshell-send-eof-to-process
             "C-c C-q" 'eshell-quit-process
             "M-c"     'eshell-interrupt-process
             "M-z"     'eshell-send-eof-to-process
             "M-q"     'eshell-quit-process

             "C-s"   'counsel-esh-history
             "M-SPC" 'counsel-esh-history

             "M-y"           'eshell-repeat-argument
             "C-d"           'eshell-kill-input
             "C-M-k"         'eshell-kill-input
             "M-d"           'eshell-kill-output
             "C-w"           'eshell-backward-kill-word
             "<C-backspace>" 'evil-delete-backward-word
             ;; copy entered input back into current line
             "<C-return>"    'eshell-copy-old-input

             "C-j"       'eshell-next-input
             "C-k"       'eshell-previous-input
             "M-j"       'eshell-next-prompt
             "M-k"       'eshell-previous-prompt
             ;; reverse the default affect of up and down
             "<up>"      'eshell-previous-input
             "<down>"    'eshell-next-input
             "<C-up>"    'eshell-previous-matching-input-from-input
             "<C-down>"  'eshell-next-matching-input-from-input
             "<S-left>"  'eshell-backward-argument
             "<S-right>" 'eshell-forward-argument
             "<M-left>"  'eshell-backward-argument
             "<M-right>" 'eshell-forward-argument))

         ;; needs to be in a hook because eshell-mode-map isn't
         ;; defined until the mode is activated, and even then
         ;; it's only buffer-local :(.
         (add-hook 'eshell-mode-hook #'eshell-mode--setup-bindings))
     #+END_SRC

**** eshell-prompt-extras
     Prettier prompt for eshell.

     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'esh-mode
         (use-package eshell-prompt-extras
           :ensure t
           :defer  t
           :commands (epe-theme-mohkale)
           :init
           (with-eval-after-load 'esh-mode
             (require 'eshell-prompt-extras))

           :config
           (setq epe-show-python-info t
                 epe-path-style 'full)

           (defvar eshell-prompt--enable-git-on-remote-files t
             "when true, show branch info even on remote files")

           (defun epe-git-p ()
             "If you installed git and in a git project."
             (when (or eshell-prompt--enable-git-on-remote-files
                       ;; either enable everywhere, including remote
                       ;; or enable when not remote
                       (not (epe-remote-p)))
               (and (eshell-search-path "git")
                    (vc-find-root (eshell/pwd) ".git"))))

           (setq eshell-prompt-function #'epe-theme-lambda)))
     #+END_SRC

*** eyebrowse
    #+BEGIN_SRC emacs-lisp
      (use-package eyebrowse
        :ensure t
        :defer  load-me-now-duration
        :config
        (eyebrowse-mode +1)

        (defun eyebrowse-switch-window-config--when-new-zen-current-window (func slot &rest args)
          "by default, when you create a new window config it's a complete copy
      of your current config. More often then not when you make a new config you
      want to change the layout of the windows (and buffers) within it. Creating
      a new config and then manuall deleting every other window is a pain, this
      makes it so when you make a new config, you're current window is maximised
      automatically."
          (let ((slot-new-p (not (eyebrowse--window-config-present-p slot))))
            (apply func slot args)
            (when (and slot-new-p
                       (> (length (window-list)) 1))
              (window-zen))))

        (advice-add 'eyebrowse-switch-to-window-config
                    :around #'eyebrowse-switch-window-config--when-new-zen-current-window))
    #+END_SRC

*** flycheck
    on the fly syntax checker for emacs. finds where you've written bugs, adds an icon
    to the fringe and underlines it.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :defer  t
        ;; :delight " ⓢ"
        :delight "FlyCheck"
        :commands (flycheck-last-error
                   flycheck-error-list-goto-first-error
                   flycheck-error-list-goto-last-error
                   flycheck-list-errors--goto-first-error)
        :init
        (setq flycheck-python-pycompile-executable "python3")

        (leader/set-keys
          "e." 'hydra-flycheck/body
          "ec" 'flycheck-clear
          "ee" 'flycheck-explain-error-at-point
          "eh" 'flycheck-describe-checker
          "eg" 'flycheck-first-error
          "eG" 'flycheck-last-error
          "eL" 'goto-flycheck-error-list
          "el" 'flycheck-list-errors
          "eS" 'flycheck-set-checker-executable
          "es" 'flycheck-select-checker
          "ev" 'flycheck-verify-setup)

        :config
        (use-package flycheck-pos-tip
          :ensure t
          :defer  t
          :hook (flycheck-mode-hook . flycheck-pos-tip-mode)
          :commands flycheck-pos-tip-mode)

        (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

        ;; update fringe for flycheck
        ;; src: https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bcheckers/syntax-checking/packages.el
        (define-fringe-bitmap 'mohkale-flycheck-fringe-indicator
          (vector #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00011100
                  #b00111110
                  #b00111110
                  #b00111110
                  #b00011100
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000))

        (let ((bitmap 'mohkale-flycheck-fringe-indicator))
          (flycheck-define-error-level 'error
            :severity 2
            :overlay-category 'flycheck-error-overlay
            :fringe-bitmap bitmap
            :fringe-face 'flycheck-fringe-error)
          (flycheck-define-error-level 'warning
            :severity 1
            :overlay-category 'flycheck-warning-overlay
            :fringe-bitmap bitmap
            :fringe-face 'flycheck-fringe-warning)
          (flycheck-define-error-level 'info
            :severity 0
            :overlay-category 'flycheck-info-overlay
            :fringe-bitmap bitmap
            :fringe-face 'flycheck-fringe-info))

        (defun flycheck-last-error ()
          (interactive)
          (goto-char (point-max))
          (flycheck-previous-error))

        (defun flycheck-error-list-goto-first-error ()
          (interactive)
          (goto-char (point-min))
          (flycheck-error-list-next-error 1)
          (flycheck-error-list-previous-error 1))

        (defun flycheck-error-list-goto-last-error ()
          (interactive)
          (goto-char (point-max))
          (flycheck-error-list-previous-error 1))

        (defun flycheck-list-errors--goto-first-error (func &rest args)
          (let ((flycheck-buffer (get-buffer "*Flycheck errors*")))
            (apply func args) ;; call flycheck-list-errors
            (unless flycheck-buffer
              (flycheck-error-list-goto-first-error))))

        (advice-add 'flycheck-list-errors :around #'flycheck-list-errors--goto-first-error)

        (general-define-key
          :keymaps 'flycheck-error-list-mode-map
          :states  'motion
          "RET" 'flycheck-error-list-goto-error
          "s" 'tabulated-list-sort

          "J"   'flycheck-error-list-next-error
          "K"   'flycheck-error-list-previous-error
          "C-j" 'flycheck-error-list-next-error
          "C-k" 'flycheck-error-list-previous-error

          "gs" 'flycheck-error-list-check-source
          "gg" 'flycheck-error-list-goto-first-error
          "G"  'flycheck-error-list-goto-last-error)

        (leader/set-keys-for-mode! 'flycheck-error-list-mode
          "e" 'flycheck-error-list-explain-error
          "s" 'flycheck-error-list-check-source ;; syntax check buffer
          "f" 'flycheck-error-list-set-filter
          "F" 'flycheck-error-list-reset-filter))
    #+END_SRC

*** font-lock-studio
    debug issues with face declarations... I have no idea how to use this :P

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package font-lock-studio
        :ensure t
        :defer  t
        :commands font-lock-studio)
    #+END_SRC

*** frog-jump-buffer
    display an avy like popup of your most recent buffers and then jump to it.
    now that I have ibuffer and counsel-switch-buffer, I don't really need it.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package frog-jump-buffer
        :ensure t
        :defer  t
        :commands frog-jump-buffer
        :init
        (leader/set-keys
          "jb" 'frog-jump-buffer))
    #+END_SRC

*** grep
    emacs mode for interacting with output from the grep executeable.

    #+BEGIN_SRC emacs-lisp
      (use-package grep
        :defer t
        :config
        (evil-set-initial-state 'grep-mode 'motion)
        (mohkale/set-compilation-bindings 'grep-mode 'grep-mode-map))
    #+END_SRC

*** help
    #+BEGIN_SRC emacs-lisp
      (use-package help
        :straight (help :type built-in)
        :config
        ;; once was enough, stop repeating the same message please :P
        (advice-add 'help-window-display-message :around #'ignore))
    #+END_SRC

*** help-fns+
    #+BEGIN_SRC emacs-lisp
      (use-package help-fns+
        :straight (help-fns+ :type built-in)
        :defer t
        :commands (describe-buffer
                   describe-keymap
                   describe-mode
                   describe-function)
        :init
        (leader/declare-prefix "hdm" "describe-mode")
        (leader/set-keys
          "hdm" 'describe-buffer
          "hdf" 'describe-function
          "hdK" 'describe-keymap))
    #+END_SRC

*** hide-comnt
    toggles the display of comments in the current buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package hide-comnt
        :defer t
        :commands hide/show-comments-toggle
        :init
        (leader/set-keys
          "th" 'hide/show-comments-toggle))
    #+END_SRC

*** hide-modeline
    makes the mode-line blank in the current buffer. this doesn't let the buffer contents expand
    into the mode-line region, it simply makes it appear as if nothings there.

    #+BEGIN_SRC emacs-lisp
      (use-package hide-mode-line
        :ensure t
        :defer  t
        :after spaceline)
    #+END_SRC

*** hl-line
    apply a different background face to the current line.

    #+BEGIN_SRC emacs-lisp
      (use-package hl-line
        :hook ((text-mode prog-mode) . hl-line-mode))
    #+END_SRC

*** hl-todo
    highlight certain keywords in the current buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package hl-todo
        :ensure t
        :defer  t
        :hook ((text-mode prog-mode) . global-hl-todo-mode)
        :init
        (leader/set-keys
          "jt" 'hl-todo-next
          "jT" 'hl-todo-previous
          "et" 'hl-todo-occur

          "it" 'hl-todo-insert
          "it" 'hl-todo-insert-keyword))
    #+END_SRC

*** htmlize
    convert a code buffer to HTML.

    #+BEGIN_SRC emacs-lisp
      (use-package htmlize
        :ensure t
        :defer  t)
    #+END_SRC

*** hydra-posframe
    changes the display of the the hydra popups from some region above the message area into a
    posframe :) like frog-jump-buffer. That said, posframe seems to still be kind of buggy. The
    border parameter sometimes works, sometimes it doesn't.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package hydra-posframe
        :straight (hydra-posframe :type built-in)
        :defer   t
        :commands (hydra-posframe-mode
                   hydra-posframe-enable)
        :init
        (when (display-graphic-p)
          ;; only use posframe when on graphical display
          ;; my terminals always too short for it to be
          ;; useful on there.
          (add-hook 'after-init-hook 'hydra-posframe-mode))

        :config
        ;; source for following section: https://github.com/jerrypnz/.emacs.d/blob/master/config/jp-base.el
        (defun mohkale--frame-bottom-poshandler (info)
          (cons (car (posframe-poshandler-frame-center info))
                (- (cdr (posframe-poshandler-frame-bottom-left-corner info)) 20)))

        (setq hydra-posframe-poshandler 'mohkale--frame-bottom-poshandler
              hydra-posframe-parameters '((alpha 100 100)
                                          (left-fringe . 10)
                                          (right-fringe . 10)
                                          (x-pixel-offset 4)
                                          (internal-border-width . 2))))
    #+END_SRC

*** iedit
    #+BEGIN_SRC emacs-lisp
      (use-package iedit
        :ensure t
        :defer  t
        :commands (evil-multiedit-ex-match
                   evil-multiedit-restore
                   evil-multiedit-next
                   evil-multiedit-match-and-next
                   evil-multiedit-match-and-prev
                   evil-multiedit-prev
                   evil-multiedit-toggle-marker-here
                   evil-multiedit-toggle-or-restrict-region
                   evil-multiedit-match-all
                   evil-multiedit
                   evil-multiedit-all)
        :init
        (with-eval-after-load 'evil
          (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)

          (general-define-key
            :states 'multiedit
            "g." 'hydra-evil-multiedit/body
            "g*" 'evil-multiedit-match-all
            "gk" 'evil-multiedit-prev
            "gj" 'evil-multiedit-next
            "gl" 'evil-multiedit-match-and-next
            "gh" 'evil-multiedit-match-and-prev)

          (general-define-key
            :states leader-norm-states
            "ge" 'evil-multiedit
            "g*" 'evil-multiedit-all
            "gE" 'evil-multiedit-restore)

          ;; (general-define-key
          ;;   :states 'visual
          ;;   "RET" 'evil-multiedit-toggle-or-restrict-region)
          )

        :config
        (use-package evil-multiedit
          :ensure t
          :defer  t
          :config

          (defun evil-multiedit--multiedit (beg end)
            (evil-visual-select beg
                                (max 0 (- end 1)))
            (evil-multiedit-match-and-next))

          (evil-define-operator evil-multiedit (beg end)
            :repeat nil
            (if (evil-get-command-property 'evil-multiedit :move-point)
                (save-excursion
                  (evil-multiedit--multiedit beg end))
              (evil-multiedit--multiedit beg end)))

          (defun evil-multiedit--multiedit-all (beg end)
            (evil-visual-select beg
                                (max 0 (- end 1)))
            (evil-multiedit-match-all))

          (evil-define-operator evil-multiedit-all (beg end)
            :repeat nil
            (if (evil-get-command-property 'evil-multiedit-all :move-point)
                (save-excursion
                  (evil-multiedit--multiedit-all beg end))
              (evil-multiedit--multiedit-all beg end)))

          (general-define-key
            :keymaps 'evil-multiedit-state-map
            ;; "C-g" nil
            "G"  nil
            "gg" nil)))
    #+END_SRC

*** ivy
    a simple and elegent completion framework for emacs.

**** ivy
     #+BEGIN_SRC emacs-lisp
       (use-package ivy
         :straight t
         :defer    nil
         :commands (ivy-toggle-mark)
         :init
         (setq ivy-height 15
               counsel-evil-registers-height 15
               ivy-use-virtual-buffers t
               projectile-completion-system 'ivy
               ivy-magic-tilde nil)

         :config
         (ivy-mode +1)

         (setq ivy-preferred-re-builders
               '((ivy--regex-plus         . "ivy")
                 (ivy--regex-ignore-order . "order")
                 (ivy--regex-fuzzy        . "fuzzy")
                 (regexp-quote            . "literal"))

               ;; store as unique variable because counsel
               ;; will just end up adding to it anyways.
               mohkale--ivy-initial-inputs-alist
               '((counsel-minor . "^+")
                 ;; (counsel-package . "^+")
                 ;; (org-refile . "^")
                 (org-agenda-refile . "^")
                 (org-capture-refile . "^")
                 ;; (counsel-M-x . "^")
                 ;; (counsel-describe-function . "^")
                 ;; (counsel-describe-variable . "^")
                 ;; (counsel-org-capture . "^")
                 ;; (org-refile . "^")
                 ;; (org-agenda-refile . "^")
                 ;; (org-capture-refile . "^")
                 (Man-completion-table . "^")
                 (woman . "^"))

               ivy-initial-inputs-alist mohkale--ivy-initial-inputs-alist)

         (defun ivy-kill-line-backward ()
           (interactive)
           (delete-region (minibuffer-prompt-end) (point)))

         (defun ivy-forward-char-or-partial-or-done ()
           "move forward a character or complete selection
       completes selection when there's no characters left to
       move forward."
           (interactive)
           (call-interactively (if (eolp)
                                   'ivy-alt-done
                                 'forward-char)))

         (defun ivy-toggle-mark ()
           (interactive)
           (if (ivy--marked-p)
               (when (ivy--marked-p)
                 (ivy--unmark (ivy-state-current ivy-last)))
             (unless (ivy--marked-p)
               (ivy--mark (ivy-state-current ivy-last)))))

         (with-eval-after-load "persp-mode"
           ;; thanks https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-ivy-el
           (add-hook 'ivy-ignore-buffers
                     (lambda (b)
                       (when persp-mode
                         (let ((persp (get-current-persp)))
                           (if persp
                               (not (persp-contain-buffer-p b persp))
                             nil)))))

           (setq ivy-sort-functions-alist
                 (append ivy-sort-functions-alist
                         '((persp-kill-buffer   . nil)
                           (persp-remove-buffer . nil)
                           (persp-add-buffer    . nil)
                           (persp-switch        . nil)
                           (persp-window-switch . nil)
                           (persp-frame-switch  . nil)))))

         (general-define-key "M-x" 'counsel-M-x)

         (general-define-key
           :keymaps 'counsel-find-file-map
           "C-h" 'counsel-up-directory)

         (leader/set-keys
           "bb" 'ivy-switch-buffer
           "SPC" 'counsel-M-x
           "RET" 'ivy-resume)

         (general-define-key
           :keymaps 'ivy-minibuffer-map
           "C-j"   nil ;; was ivy-alt-done
           "M-j"   nil ;; was ivy-yank-word
           "M-v"   nil ;; was ivy-scroll-down-command
           "C-v"   nil ;; was ivy-scroll-up-command
           "C-'"   nil ;; was ivy-avy
           "C-M-y" nil ;; was ivy-insert-current-full

           "<return>" 'ivy-alt-done ;; also supports tramp expansion

           ;;; misc
           "C-?" 'describe-mode
           "M-d" 'kill-ring-save ;; save all candidates to kill ring
           ;; erase input, but start filtering from current candidates
           "S-SPC" 'ivy-restrict-to-matches

           ;;; marking
           "C-SPC"         'ivy-mark
           "M-SPC"         'ivy-toggle-mark
           "C-M-SPC"       'ivy-toggle-marks
           "<S-backspace>" 'ivy-unmark-backward

           ;;; selection execution
           ;; exit with current input, not selection
           "<S-return>"   'ivy-immediate-done
           "C-c <return>" 'ivy-immediate-done
           ;; prompt for action, then done
           "<C-return>" 'ivy-dispatching-done
           ;; invoke default action'but exit the minibuffer
           "M-RET" 'ivy-call
           ;; prompt for action, then call
           "C-M-<return>" 'ivy-dispatching-call
           ;; move down, then call default action
           "C-M-j" 'ivy-next-line-and-call
           ;; move down, then call default action
           "C-M-k" 'ivy-previous-line-and-call
           "<escape>" 'minibuffer-keyboard-quit

           ;;; movement commands
           "C-a" 'move-beginning-of-line
           "C-e" 'move-end-of-line
           "C-h" 'backward-char
           "C-l" 'ivy-forward-char-or-partial-or-done
           "C-j" 'next-line
           "C-k" 'previous-line
           "C-q" 'ivy-avy
           "M-j" 'ivy-next-history-element
           "M-k" 'ivy-previous-history-element
           "M-u" 'ivy-occur
           ;; arrow key variants
           "<left>"  'backward-char
           "<right>" 'forward-char
           "<up>"    'previous-line
           "<down>"  'next-line
           ;; suprisingly enough, these are bound correctly
           "C-d" 'scroll-up-command
           "C-u" 'scroll-down-command
           ;; taken from helm, shadows C-o hydra-ivy/body
           "M-o" 'beginning-of-buffer
           "C-o" 'end-of-buffer

           ;;; insertion/deletion
           ;; complete current selection into minibuffer
           ;; leave prompt active to build on it.
           "C-i" 'ivy-insert-current
           "C-DEL" 'evil-delete-backward-word
           ;; pull word in from point at buffer
           "M-y" 'ivy-yank-word
           "C-w" 'backward-kill-word
           ;; operate on entire input
           "M-w" 'ivy-kill-line-backward
           "M-W" 'kill-line ;; kill forward
           "M-DEL" 'kill-whole-line

           ;;; history - (C-r/C-s still work fine)
           "<S-up>"    'ivy-previous-history-element
           "<S-down>"  'ivy-next-history-element)

         (general-define-key
           :keymaps 'ivy-switch-buffer-map
           "C-k" 'previous-line
           "M-d" 'ivy-switch-buffer-kill)

         (general-define-key
           :keymaps 'ivy-reverse-i-search-map
           "C-k" 'previous-line
           "C-d" 'ivy-reverse-i-search-kill)

         ;; ivy-occur
         (evil-set-initial-state 'ivy-occur-mode 'motion)
         (evil-set-initial-state 'ivy-occur-grep-mode 'motion)

         (leader/set-keys-for-mode! '(ivy-occur-mode
                                      ivy-occur-grep-mode)
           ;; 'ivy-wgrep-change-to-wgrep-mode
           "SPC" 'ivy-occur-read-action
           "m"   'ivy-occur-toggle-calling)

         (general-define-key
           :keymaps 'ivy-occur-mode-map
           :states 'motion
           "RET" 'ivy-occur-press-and-switch
           "M-RET" 'ivy-occur-press
           "<C-return>" 'ivy-occur-dispatch
           "gj" 'ivy-occur-next-line
           "gk" 'ivy-occur-previous-line
           "}" 'ivy-occur-next-line
           "{" 'ivy-occur-previous-line
           "d" 'ivy-occur-delete-candidate
           "o" 'compilation-display-error

           "gr" 'ivy-occur-revert-buffer
           "q" 'quit-window))
     #+END_SRC

***** collapse-directories
      see [[https://github.com/abo-abo/swiper/issues/2211][this]] link for a description of the problem which this addresses.
      I don't really need it for now so I'm not tangling.

      #+BEGIN_SRC emacs-lisp :tangle no
        (defvar mohkale/ivy-collapse-paths t
          "when true, empty directories are chained together.")

        (defvar mohkale/ivy-collapse-paths--append-files nil
          "when true, the only file in a directory is appended to
        that directory when shown by ivy. otherwise the directory
        is shown by itself.")

        (defun collapse-directories (path files &optional read-directories-command)
          "collapses any hollow directory files under PATH.
        a hollow directory is any directory which is either empty
        or has only one child which must be a file. depending on
        `mohkale/ivy-collapse-paths--append-files' that files is also
        appended to the path.

        if you'd like to specify you're own command for listing directories
        (or have aliased `directory-files' for your own purposes), you can
        specify the read-command as the final optional arg to this function."
          (or read-directories-command
              (setq read-directories-command #'directory-files))

          (mapcar
           (lambda (file)
             (when (and (ivy--dirname-p file)
                        (not (or (string-equal file "./")
                                 (string-equal file "../"))))
               (let (dir-files file-count (do-recurse t))
                 (ignore-errors ;; in case of permission errors
                   (while do-recurse
                     (setq dir-files  (funcall
                                       read-directories-command
                                       (concat path file)
                                       ;; all but . and ..
                                       nil "^[^\\.]\\{1,2\\}")
                           file-count (length dir-files))
                     (cond
                      ;; nothing left to recurse, end recursion
                      ((eq file-count 0) (setq do-recurse nil))
                      ;; at least one found, cancel unless directory
                      ((eq file-count 1)
                       (let* ((only-child (concat file (car dir-files))))
                         (if (file-directory-p (concat path only-child))
                             ;; include trailing / for identity purposes
                             (setq file (concat only-child "/"))
                           ;; encountered final leaf only-child, show if desired
                           (when mohkale/ivy-collapse-paths--append-files
                             (setq file only-child))
                           (setq do-recurse nil))))
                      ;; encountered non-hollow directory
                      (t (setq do-recurse nil)))))))
             file)
           files))

        (defun counsel-find-file--collapse-directories-wrapper (func dir)
          (if (not mohkale/ivy-collapse-paths)
              (apply func dir nil) ;; no collapsing, leave as is
            (cl-letf* (((symbol-function 'actual-directory-files)
                        (symbol-function 'directory-files))
                       ((symbol-function 'actual-read-file-name-internal)
                        (symbol-function 'read-file-name-internal))

                       ;; wrap `read-file-name-internal' and `directory-files'
                       ;; into collapsing directories when possible.
                       ((symbol-function 'read-file-name-internal)
                        (lambda (&rest args)
                          (collapse-directories default-directory
                                                (apply #'actual-read-file-name-internal args)
                                                #'actual-directory-files)))
                       ((symbol-function 'directory-files)
                        (lambda (dir)
                          (collapse-directories dir
                                                (mapcar
                                                 ;; directory-files doesn't append / to dirs
                                                 ;; so `ivy--dirname-p' won't work with them.
                                                 (lambda (file)
                                                   (if (file-directory-p (concat dir file))
                                                       (setq file (concat file "/")))
                                                   file)
                                                 (actual-directory-files dir))
                                                #'actual-directory-files))))
              (apply func dir nil))))

        (advice-add 'ivy--sorted-files :around #'counsel-find-file--collapse-directories-wrapper)
      #+END_SRC

***** ivy-hydra
      #+BEGIN_SRC emacs-lisp
        (use-package ivy-hydra
          :ensure t
          :defer  t
          :after ivy
          :commands hydra-ivy/body
          :init
          (general-define-key
            :keymaps 'ivy-minibuffer-map
            "C-." 'hydra-ivy/body)

          :config
          (when (autoloadp (symbol-function 'hydra-ivy-custom/body))
            (autoload-do-load (symbol-function 'hydra-ivy-custom/body))))
      #+END_SRC

**** counsel
     a bunch of really useful functions to go alongside ivy.

     #+BEGIN_SRC emacs-lisp
       (use-package counsel
         :ensure t
         :defer  t
         :after ivy
         :diminish
         :init
         (setq counsel-find-file-occur-use-find t
               counsel-rg-base-command "rg --with-filename --no-heading --line-number --path-separator // --color never %s ."
               counsel-evil-registers-height ivy-height
               counsel-find-file-ignore-regexp "\\.#.+")

         (fset 'describe-bindings-buffer (symbol-function 'describe-bindings))
         (fset 'describe-bindings (symbol-function 'counsel-descbinds))

         (leader/declare-prefix*
           "r"  "register/rings/resume"
           "fs" "recursive-find")

         (leader/set-keys-for-mode! 'org-mode
           "g" 'counsel-org-goto
           "G" 'counsel-org-goto-all)

         (general-define-key
           :keymaps 'mohkale-window-map
           "^" 'counsel-wmctrl)

         (with-eval-after-load 'org
           (leader/set-keys
             "oc" 'counsel-org-capture
             "oh" 'counsel-org-agenda-headlines))

         (with-eval-after-load 'company
           (general-define-key
             :keymaps 'company-mode-map
             "C-:" 'counsel-company))

         (leader/set-keys
           "ae" 'counsel-package
           "ic" 'counsel-unicode-char
           "ie" 'counsel-org-entity
           "Mm" 'counsel-major

           "?"  'counsel-apropos
           "ry" 'counsel-yank-pop
           "rm" 'counsel-mark-ring
           "rn" 'counsel-evil-marks
           "rr" 'counsel-register
           "re" 'counsel-evil-registers
           "rf" 'counsel-file-registers
           "al" 'counsel-load-library
           "bO" 'counsel-outline

           "ff" 'counsel-find-file
           "fb" 'counsel-bookmark
           "fr" 'counsel-recentf
           "fsf" 'counsel-file-jump
           "fsd" 'counsel-dired-jump

           "ci" 'counsel-compile

           "sb" 'counsel-grep
           ;; recursive searches
           "sv" 'counsel-git-grep
           "sp" 'counsel-pt
           "sa" 'counsel-ag
           "sr" 'counsel-rg

           ;; "bb" 'counsel-buffer-or-recentf ;; WARN only file buffers
           "bb" 'counsel-switch-buffer
           "hdf" 'counsel-describe-function
           "hdv" 'counsel-describe-variable
           "hdB" 'describe-bindings-buffer)

         (general-define-key
           "C-M-y" 'counsel-yank-pop)

         :config
         (setq ivy-initial-inputs-alist mohkale--ivy-initial-inputs-alist)

         (counsel-mode +1)

         (defun counsel-find-file--jump-to-bookmark ()
           "jumpt to a bookmark directory from a `counsel-find-file' session"
           (interactive)
           (require 'bookmark)
           (let ((last-directory ivy--directory))
             (ivy-quit-and-run
               (ivy-read "Jump to bookmark: "
                         (counsel-bookmarked-directory--candidates)
                         :caller 'counsel-find-file--jump-to-bookmark
                         :action (lambda (dir)
                                   (counsel-find-file (if (string-empty-p dir)
                                                          last-directory
                                                        dir)))))))

         (advice-add 'counsel-company :before
                     (defun counsel-company--hide-popup (&rest args)
                       (company-cancel)))

         (ivy-configure 'counsel-evil-registers :height ivy-height)

         (general-define-key
           :keymaps 'counsel-find-file-map
           "C-b" 'counsel-find-file--jump-to-bookmark)

         (general-define-key
           :keymaps 'counsel-describe-map
           "C-."   'hydra-ivy/body
           "C-S-." 'counsel-find-symbol))
     #+END_SRC

**** swiper
     a minimalist search framework for the current buffer.

     #+BEGIN_SRC emacs-lisp
       (use-package swiper
         :ensure t
         :defer  t
         :after ivy
         :init
         (leader/set-keys
           "ss" 'swiper
           "s*" 'swiper-all
           "sS" 'swiper-multi)

         (defvar swiper-persistent-highlight nil
           "if swiper is using evil-search for searching, determine
       whether to persistently highlight the search results or not.

       Personally I don't like persistent highlighting with swiper
       because I generally use it for one off jumping to important
       lines, so disable it :P")

         (setq swiper-min-highlight 50000000) ;; never highlight

         :config
         (advice-add #'swiper--remember-search-history :around
                     (defun swiper--clear-evil-highlight (func &rest args)
                       "see `swiper-persistent-highlight'."
                       (if (bound-and-true-p evil-mode)
                           (let ((evil-ex-search-persistent-highlight
                                  swiper-persistent-highlight))
                             (apply func args))
                         (apply func args))))

         (advice-add #'swiper--action :around
                     (defun swiper--action-configure (func &rest args)
                       ;; disable search highlighting in case of new pattern.
                       (when (bound-and-true-p evil-mode)
                         (evil-ex-nohighlight))

                       ;; I don't wanna be told that every time I complete a search
                       (cl-letf (((symbol-function 'actual-message)
                                  (symbol-function 'message))
                                 ((symbol-function 'message)
                                  (lambda (message &rest message-args)
                                    (unless (string-equal message "Mark saved where search started")
                                      (apply actual-message message-args)))))
                         (apply func args))))

         (general-define-key
           :keymaps 'swiper-map
           "C-q" nil
           "C-l" 'ivy-forward-char-or-partial-or-done
           "C-q" 'swiper-avy
           "C-s" 'swiper-query-replace))
     #+END_SRC

**** ivy-yasnippet
     use ivy to select a snippet candidate.

     #+BEGIN_SRC emacs-lisp
       (use-package ivy-yasnippet
         :ensure t
         :defer  t
         :after ivy
         :init
         (leader/set-keys
           "is" 'ivy-yasnippet)

         (general-define-key
           :states 'insert
           "C-M-i" 'ivy-yasnippet))
     #+END_SRC

**** counsel-pydoc
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'python
         (use-package counsel-pydoc
           :ensure t
           :defer  t
           :after  counsel
           :init
           (leader/set-keys-for-mode! 'python-mode
             "hd" 'counsel-pydoc)))
     #+END_SRC

**** counsel-ggtags
     #+BEGIN_SRC emacs-lisp
       (use-package counsel-gtags
         :ensure t
         :defer  t
         :after counsel
         :init
         (leader/set-keys
           "Tg" 'counsel-gtags-find-definition
           "TG" 'counsel-gtags-find-reference
           "Ts" 'counsel-gtags-find-symbol
           "Tf" 'counsel-gtags-find-file
           "Tn" 'counsel-gtags-go-forward
           "TN" 'counsel-gtags-go-backward
           "Tc" 'counsel-gtags-create-tags
           "Tu" 'counsel-gtags-update-tags
           "TT" 'counsel-gtags-dwim))
     #+END_SRC

**** counsel-tramp
     select a remote system to connect to, using ivy.

     #+BEGIN_SRC emacs-lisp
       (use-package counsel-tramp
         :ensure t
         :defer  t
         :after counsel
         :init
         (leader/set-keys
           "f@" 'counsel-tramp))
     #+END_SRC

**** counsel-css
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'css-mode
         (use-package counsel-css
           :ensure t
           :defer  t
           :after counsel
           :config
           (leader/set-keys-for-mode! '(css-mode less-css-mode)
             "g" 'counsel-css)))
     #+END_SRC

**** counsel-web
     like [[*engine-mode][engine-mode]] except runs queries asynchronously and displays results using an ivy
     session.

     #+BEGIN_SRC emacs-lisp
       (use-package counsel-web
         :straight (counsel-web :type git :host github :repo "mnewt/counsel-web")
         :defer  t
         :after counsel
         :commands (counsel-web-suggest ;; async
                    counsel-web-search
                    counsel-web-thing-at-point)
         :init
         (setq counsel-web-search-action #'browse-url)

         (leader/set-keys
           "se RET"   'counsel-web-search
           "se M-RET" 'counsel-web-suggest
           "se TAB"   'counsel-web-thing-at-point))
     #+END_SRC

**** counsel-word-clock
     see the time from anywhere in the world... I'll probably never use this.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package counsel-word-clock
         :straight (counsel-word-clock :type git :host github :repo "kchenphy/counsel-world-clock")
         :defer  t
         :after  counsel)
     #+END_SRC

**** helm-make
     don't be fooled, helm make works with both helm and ivy.

     #+BEGIN_SRC emacs-lisp
       (use-package helm-make
         :ensure t
         :defer  t
         :init
         (setq helm-make-completion-method 'ivy)

         (leader/set-keys
           "c SPC" 'helm-make-projectile
           "cm"    'helm-make))
     #+END_SRC

**** flx
     optimizes ivy search ordering for fuzzy searches.

     #+BEGIN_SRC emacs-lisp
       (use-package flx
         :ensure t
         :defer  t)
     #+END_SRC

**** smex
     show recently accessed commands at the top of M-x.

     #+BEGIN_SRC emacs-lisp
       (use-package smex
         :ensure t
         :defer  t)
     #+END_SRC

*** ibuffer
**** ibuffer
     #+BEGIN_SRC emacs-lisp
       (use-package ibuffer
         :defer t
         :hook (ibuffer-mode . hl-line-mode)
         :init
         (leader/set-keys
           "bm" 'ibuffer)

         (defvar ibuffer-show-buffer-icons nil
           "whether to show icons alongside the buffer")

         :config
         (evil-set-initial-state 'ibuffer-mode 'motion)

         (setq mohkale-ibuffer-filter-map (make-sparse-keymap))

         (general-define-key
           :keymaps 'mohkale-ibuffer-filter-map
           "TAB"    'ibuffer-exchange-filters
           "RET"    'ibuffer-filter-by-mode
           "DEL"    'ibuffer-delete-saved-filters
           "M-DEL"  'ibuffer-delete-saved-filter-groups
           "!"      'ibuffer-negate-filter
           "&"      'ibuffer-and-filter
           "|"      'ibuffer-or-filter
           "*"      'ibuffer-filter-by-starred-name
           "."      'ibuffer-filter-by-file-extension
           ","      'ibuffer-filter-by-used-mode
           "/"      'ibuffer-filter-disable
           "\\"     'ibuffer-clear-filter-groups
           "<"      'ibuffer-filter-by-size-lt
           ">"      'ibuffer-filter-by-size-gt
           "a"      'ibuffer-add-saved-filters
           "b"      'ibuffer-filter-by-basename
           "c"      'ibuffer-filter-by-content
           "e"      'ibuffer-filter-by-predicate
           "f"      'ibuffer-filter-by-filename  ; regexp
           "d"      'ibuffer-filter-by-directory ; regexp
           "D"      'ibuffer-filter-by-directory-path
           "g"      'ibuffer-filters-to-filter-group
           "("      'ibuffer-filters-to-filter-group
           "i"      'ibuffer-filter-by-modified
           "m"      'ibuffer-filter-by-used-mode
           "M"      'ibuffer-filter-by-derived-mode
           "n"      'ibuffer-filter-by-name
           "o"      'ibuffer-or-filter
           "p"      'ibuffer-pop-filter
           "P"      'ibuffer-pop-filter-group
           "u"      'ibuffer-decompose-filter
           "U"      'ibuffer-decompose-filter-group
           "r"      'ibuffer-switch-to-saved-filters
           "R"      'ibuffer-switch-to-saved-filter-groups
           "v"      'ibuffer-filter-by-visiting-file
           "w"      'ibuffer-save-filters
           "W"      'ibuffer-save-filter-groups
           "x"      'ibuffer-exchange-filters
           "<down>" 'ibuffer-pop-filter-group
           "<up>"   'ibuffer-pop-filter)

         (leader/declare-prefix-for-mode!* 'ibuffer-mode
           "g" "jump/goto"
           "m" "mark"
           "/" "filter")

         (leader/set-keys-for-mode! 'ibuffer-mode
           ;; unbound:
           ;;  * ibuffer-do-print
           "1"   'ibuffer-visit-buffer-1-window
           "+"   'ibuffer-add-to-tmp-show
           "-"   'ibuffer-add-to-tmp-hide
           "."   'hydra-ibuffer/body
           "/"    mohkale-ibuffer-filter-map
           "RET" 'ibuffer-do-view-horizontally
           "A"   'ibuffer-auto-mode
           "E"   'ibuffer-do-view-and-eval
           "e"   'ibuffer-do-eval
           "R"   'ibuffer-redisplay
           "r"   'ibuffer-do-rename-uniquely
           "S"   'ibuffer-do-query-replace
           "s"   'ibuffer-do-save
           ;; "s"   'ibuffer-do-replace-regexp
           "T"   'ibuffer-visit-tags-table
           "f"   'ibuffer-find-file
           "gg"  'ibuffer-jump-to-buffer
           "gf"  'ibuffer-jump-to-filter-group
           "|"   'ibuffer-do-shell-command-pipe-replace
           "~"   'ibuffer-do-toggle-modified

           "mm" 'ibuffer-toggle-marks
           "m/" 'ibuffer-mark-by-file-name-regexp
           ;; "m M-/" 'ibuffer-mark-by-name-regexp
           "mo" 'ibuffer-mark-old-buffers
           "ml" 'ibuffer-mark-by-locked
           "mb" 'ibuffer-mark-by-content-regexp
           "mM" 'ibuffer-mark-by-mode-regexp
           "md" 'ibuffer-mark-dired-buffers
           "mh" 'ibuffer-mark-help-buffers
           "mn" 'ibuffer-mark-dissociated-buffers
           "mN" 'ibuffer-mark-unsaved-buffers
           "m*" 'ibuffer-mark-modified-buffers
           "ms" 'ibuffer-mark-special-buffers
           "m%" 'ibuffer-mark-read-only-buffers
           "mz" 'ibuffer-mark-compressed-file-buffers)

         (general-define-key
           :keymaps 'ibuffer-mode-map
           "+"                nil
           "-"                nil
           "0"                nil
           "f"                nil
           "SPC"              nil
           "S-SPC"            nil
           ">"                nil
           "<"                nil
           "?"                nil
           "h"                nil
           "X"                nil
           "F"                nil
           "C-d"              nil
           "C-t"              nil
           "b"                nil
           "n"                nil
           "g"                nil
           "p"                nil
           "w"                nil
           "s"                nil
           "`"                nil
           ","                nil
           "*"                nil
           "/"                nil
           "A"                nil
           "C-c"              nil
           "C-x"              nil
           "M-s"              nil
           "M-g"              nil
           "M-n"              nil
           "M-p"              nil
           "M-{"              nil
           "M-}"              nil
           "M-o"              nil
           "M-DEL"            nil
           "%"                nil)

         (general-define-key
           :keymaps 'ibuffer-mode-map
           :states  'motion
           "TAB"       'ibuffer-forward-filter-group
           "<S-tab>"   'ibuffer-backward-filter-group
           "<backtab>" 'ibuffer-backward-filter-group
           ;; "D" 'ibuffer-mark-for-delete-backwards
           "D"       'ibuffer-do-delete
           "M"       'ibuffer-do-toggle-modified
           "="       'ibuffer-diff-with-file
           "o"       'ibuffer-visit-buffer-other-window
           "M-o"     'ibuffer-visit-buffer-other-frame
           "M-RET"   'ibuffer-visit-buffer-other-window-noselect
           "RET"     'ibuffer-visit-buffer
           "O"       'ibuffer-do-occur
           "gr"      'ibuffer-update
           "gR"      'ibuffer-do-revert
           "gs"      'ibuffer-do-save
           ;; "R" 'ibuffer-do-revert
           "R"       'ibuffer-do-toggle-read-only
           "r"       'ibuffer-change-marks
           "S"       'ibuffer-toggle-sorting-mode
           "sa"      'ibuffer-do-sort-by-alphabetic
           "sf"      'ibuffer-do-sort-by-filename/process
           "si"      'ibuffer-invert-sorting
           "sm"      'ibuffer-do-sort-by-major-mode
           "ss"      'ibuffer-do-sort-by-size
           "sr"      'ibuffer-do-sort-by-recency
           "v"       'ibuffer-do-view
           "V"       'ibuffer-do-view-other-frame
           "("       'ibuffer-switch-format
           "p"       'ibuffer-yank
           "C-y"     'ibuffer-yank
           "C-/"      mohkale-ibuffer-filter-map
           "C-j"     'ibuffer-forward-line
           "C-k"     'ibuffer-backward-line
           "M-j"     'ibuffer-forward-filter-group
           "M-k"     'ibuffer-backward-filter-group
           "C-S-J"   'ibuffer-forward-next-marked
           "C-S-K"   'ibuffer-backwards-next-marked
           "C-M-S-k" 'ibuffer-do-kill-lines
           "C-M-d"   'ibuffer-do-kill-lines
           "C-M-k"   'ibuffer-kill-line
           "M-d"     'ibuffer-kill-line
           "S-DEL"   'ibuffer-bury-buffer
           ;; "C-s" 'ibuffer-do-isearch
           "C-s"     'ibuffer-do-isearch-regexp
           "yn"      'ibuffer-copy-buffername-as-kill)

         ;;; https://www.emacswiki.org/emacs/IbufferMode
         ;;  _                                                          _       _     _
         ;; | |__  _   _ _ __ ___   __ _ _ __        _ __ ___  __ _  __| | __ _| |__ | | ___
         ;; | '_ \| | | | '_ ` _ \ / _` | '_ \ _____| '__/ _ \/ _` |/ _` |/ _` | '_ \| |/ _ \
         ;; | | | | |_| | | | | | | (_| | | | |_____| | |  __/ (_| | (_| | (_| | |_) | |  __/
         ;; |_| |_|\__,_|_| |_| |_|\__,_|_| |_|     |_|  \___|\__,_|\__,_|\__,_|_.__/|_|\___|
         ;;

         (defun ibuffer--human-readable-file-sizes-to-bytes (string)
           "Convert a human-readable file size into bytes."
           ;; (interactive)
           (let ((decimal (string-to-number string)))
             (cond
              ((string-suffix-p "G" string t) (* 1000000000 decimal))
              ((string-suffix-p "M" string t) (* 1000000    decimal))
              ((string-suffix-p "K" string t) (* 1000       decimal))
              (t                                            decimal))))

         (defun ibuffer--bytes-to-human-readable-file-sizes (bytes)
           "Convert number of bytes to human-readable file size."
           ;; (interactive)
           (cond
            ((> bytes 1000000000) (format "%10.1fG" (/ bytes 1000000000.0)))
            ((> bytes 100000000)  (format "%10.0fM" (/ bytes 1000000.0)))
            ((> bytes 1000000)    (format "%10.1fM" (/ bytes 1000000.0)))
            ((> bytes 100000)     (format "%10.0fk" (/ bytes 1000.0)))
            ((> bytes 1000)       (format "%10.1fk" (/ bytes 1000.0)))
            (t                    (format "%10d"       bytes))))

         ;; Use human readable Size column instead of original one
         (define-ibuffer-column size-human-readable
           (:name "Size"
            :inline t
            :summarizer
            (lambda (column-strings)
              (let ((total 0))
                (dolist (string column-strings)
                  (setq total
                        ;; like, ewww ...
                        (+ (float (ibuffer--human-readable-file-sizes-to-bytes
                                   string))
                           total)))
                (ibuffer--bytes-to-human-readable-file-sizes total))))
           (ibuffer--bytes-to-human-readable-file-sizes (buffer-size)))

         ;; Source: https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-ibuffer.el
         (define-ibuffer-column icon (:name "  ")
           (let ((icon (if (and (buffer-file-name)
                                (all-the-icons-auto-mode-match?))
                           (all-the-icons-icon-for-file (file-name-nondirectory (buffer-file-name)) :v-adjust -0.05)
                         (all-the-icons-icon-for-mode major-mode :v-adjust -0.05))))
             (when (symbolp icon)
               (setq icon (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.8 :v-adjust 0.0)))
             icon))

         (setq ibuffer-formats
               `((mark modified read-only locked
                       " "
                       ,@(when ibuffer-show-buffer-icons
                           (list '(icon 2 2 :left :elide)
                                  (propertize " " 'display `(space :align-to 8))))
                       (name 20 20 :left :elide)
                       " "
                       (size-human-readable 11 -1 :right)
                       " "
                       (mode 16 16 :left :elide)
                       " " filename-and-process)
                 (mark " "
                       ,@(when ibuffer-show-buffer-icons
                           (list '(icon 2 2 :left :elide)
                                 (propertize " " 'display `(space :align-to 8))))

                       (name 20 20)
                       " "
                       filename))))
     #+END_SRC

**** ibuffer-filters
     #+BEGIN_SRC emacs-lisp
       (use-package ibuf-ext
         :commands (ibuffer-filter-by-directory-path)
         :config
         (define-ibuffer-filter directory-path
             "Toggle current view to buffers with file or directory name matching QUALIFIER."
           (:description "filename"
            :reader (file-truename
                     (read-directory-name "List files from file/directory name: ")))
           (ibuffer-awhen (or (buffer-local-value 'buffer-file-name buf)
                              (buffer-local-value 'dired-directory buf))
             ;; (message "qual: %s, it: %s" qualifier (file-truename it))
             (string-prefix-p qualifier (file-truename it)))))
     #+END_SRC

**** ibuffer-vc
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'ibuffer
         (use-package ibuffer-vc
           :ensure t
           :defer  t
           :after ibuffer
           :commands ibuffer-vc
           :init
           (general-define-key
             :keymaps 'ibuffer-mode-map
             "sv" 'ibuffer-vc
             ")" 'ibuffer-vc)

           :config
           (defalias 'ibuffer-vc #'ibuffer-vc-set-filter-groups-by-vc-root)))
     #+END_SRC

**** ibuffer-tramp
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'ibuffer
         (use-package ibuffer-tramp
           :ensure t
           :defer  t
           :after ibuffer
           :commands (ibuffer-tramp)
           :init
           (general-define-key
             :keymaps 'ibuffer-mode-map
             "s@" 'ibuffer-tramp)

           :config
           (defalias 'ibuffer-tramp #'ibuffer-tramp-set-filter-groups-by-tramp-connection)))
     #+END_SRC

**** ibuffer-persp
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'ibuffer
         (use-package ibuffer-persp
           :straight (ibuffer-persp :type built-in)
           :defer t
           :commands (ibuffer-persp-current
                      ibuffer-persp-other)
           :init
           (general-define-key
             :keymaps 'ibuffer-mode-map
             "sp" 'ibuffer-persp-current
             "sP" 'ibuffer-persp-other)

           ;; (with-eval-after-load 'persp-mode
           ;;   (leader/set-keys "bm" 'ibuffer-persp))
           :config
           (defalias 'ibuffer-persp-current #'ibuffer-persp-set-filter-groups-by-persp-name-not-nil)
           (defalias 'ibuffer-persp-other #'ibuffer-persp-set-filter-groups-by-other-persp-name-not-nil)))
     #+END_SRC

*** imenu
    see (and jump to) key points of interest in the current buffer using your completion framework
    of choice.

    #+BEGIN_SRC emacs-lisp
      (use-package imenu
        :defer t
        :commands (imenu-list
                   imenu-anywhere)
        :init
        (leader/set-keys
          "bi" 'imenu
          "ai" 'imenu-list
          "bI" 'imenu-anywhere)

        :config
        (use-package imenu-list
          :ensure t
          :defer  t)

        (use-package imenu-anywhere
          :ensure t
          :defer  t))
    #+END_SRC

*** flyspell
    on the fly spell checker. spawns an aspell subprocess and passes any words you write
    to it; any mispellings or unknown words will be highlighted to indicate they're mispelled.

    #+BEGIN_SRC emacs-lisp
      (use-package flyspell
        :config
        (leader/with-prefix mohkale-minor-mode-leader-key
          (leader/set-keys-for-mode 'flyspell-mode
            "."  'hydra-flyspell/body
            "cb" 'flyspell-buffer
            "cr" 'flyspell-region
            "cw" 'flyspell-word))

        (use-package flyspell-correct-ivy
          :ensure t
          :defer  t
          :init
          ;; NOTE wrapper works backwards through the buffer by default.
          ;;      pass a two prefix args to check forward.
          (setq flyspell-correct-interface #'flyspell-correct-ivy)

          (leader/with-prefix mohkale-minor-mode-leader-key
            (leader/set-keys-for-mode 'flyspell-mode
              mohkale-minor-mode-leader-key 'flyspell-correct-wrapper))))
    #+END_SRC

**** ispell
    #+BEGIN_SRC emacs-lisp
      (use-package ispell
        :defer t
        :config
        (defun ispell--prevent-absolute-path (func &rest args)
          (cl-letf (((symbol-function 'expand-file-name)
                     (lambda (_) _)))
            (apply func args)))

        (advice-add 'ispell-internal-change-dictionary :around
                    #'ispell--prevent-absolute-path)
        (advice-add 'flyspell-large-region :around
                    #'ispell--prevent-absolute-path))
    #+END_SRC

*** ein - emacs-ipython-notebook
    org mode is 100% better... prove me wrong :P

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ein
        :ensure t
        :defer  t
        :init
        (with-eval-after-load 'org
          (push '(ein . t) org-babel-load-languages))
        :config
        (defun evil-write--ein-save-buffer (&rest args)
          (when (derived-mode-p 'ein:notebook-mode 'ein:notebook-multilang-mode)
            (call-interactively 'ein:notebook-save-notebook-command)
            t))

        (advice-add 'evil-write :before-until #'evil-write--ein-save-buffer)

        (leader/set-keys-for-mode! 'ein:notebooklist-mode
          "f" 'ein:file-open
          "n" 'ein:notebook-open
          "r" 'ein:notebooklist-reload)

        (general-define-key
          :keymaps 'ein:notebooklist-mode-map
          "gr" 'ein:notebooklist-reload
          "<S-tab>"   'widget-backward
          "<backtab>" 'widget-backward
          "TAB"       'widget-forward
          "<tab>"     'widget-forward

          "gn" 'ein:notebooklist-next-item
          "gN" 'ein:notebooklist-prev-item
          "gp" 'ein:notebooklist-prev-item)

        (dolist (mode '(ein:notebook-mode ein:notebook-multilang-mode))
          (leader/set-keys-for-mode! mode
            "." 'hydra-ein/body
            "'" 'ein:edit-cell-contents
            leader-major-mode-key 'ein:worksheet-execute-cell

            "c" 'ein:notebook-close
            "f" 'ein:file-open
            "F" 'ein:notebook-open
            "i" 'ein:inspect-object
            "m" 'ein:pytools-request-tooltip-or-help
            "o" 'ein:worksheet-toggle-output
            "p" 'ein:worksheet-yank-cell
            "r" 'ein:notebook-rename-command
            "R" 'ein:notebook-restart-session-command
            ;; "R" 'ein:notebook-reconnect-session-command
            "s" 'ein:notebook-scratchsheet-open
            "w" 'ein:notebook-save-notebook-command
            "y" 'ein:worksheet-copy-cell

            "ts" 'ein:worksheet-toggle-slide-type
            "tc" 'ein:worksheet-toggle-cell-type
            "tC" 'ein:worksheet-change-cell-type
            "gg" 'ein:pytools-jump-to-source-command
            "gb" 'ein:pytools-jump-back-command
            "dc" 'ein:worksheet-kill-cell
            "do" 'ein:worksheet-clear-output
            "dO" 'ein:worksheet-clear-all-output
            "dk" 'ein:notebook-kill-kernel-then-close-command
            "dz" 'ein:notebook-kernel-interrupt-command

            "TAB" 'ein:completer-complete))

        (general-define-key
          :keymaps 'ein:notebook-mode-map
          "<C-down>" nil
          "<C-up>"   nil

          "<C-return>" 'ein:worksheet-execute-cell
          "<S-return>" 'ein:worksheet-execute-cell-and-goto-next)

        (general-define-key
          :keymaps 'ein:notebook-mode-map
          :states  leader-norm-states
          "go" 'ein:worksheet-insert-cell-above
          "gO" 'ein:worksheet-insert-cell-below
          "gJ" 'ein:worksheet-merge-cell
          "gs" 'ein:worksheet-split-cell-at-point
          "gj" 'ein:worksheet-goto-next-input
          "gk" 'ein:worksheet-goto-prev-input
          "gc" 'ein:worksheet-kill-cell)

        (general-define-key
          :keymaps 'ein:notebook-multilang-mode-map
          "<M-down>" 'ein:worksheet-move-cell-down
          "<M-up>"   'ein:worksheet-move-cell-up))
    #+END_SRC

*** lorem-ipsum
    insert placeholder text in the lorem-ipsum-dolor format.

    #+BEGIN_SRC emacs-lisp
            (use-package lorem-ipsum
              :ensure nil
              :defer  t
              :commands (Lorem-ipsum-insert-list
                         Lorem-ipsum-insert-paragraphs
                         Lorem-ipsum-insert-sentences)
              :init
              (leader/declare-prefix "il" "lorem-ipsum")

              (leader/set-keys
                "ill" 'Lorem-ipsum-insert-list
                "ilp" 'Lorem-ipsum-insert-paragraphs
                "ils" 'Lorem-ipsum-insert-sentences))
    #+END_SRC

*** language-server
**** lsp-mode
     #+BEGIN_SRC emacs-lisp
       (use-package lsp-mode
         :ensure t
         :defer  t
         ;; never use lsp-mode, use lsp.
         :config
         (setq lsp-prefer-flymake             nil
               lsp-enable-snippet             nil
               lsp-enable-symbol-highlighting nil
               mohkale-lsp-map (make-sparse-keymap))

         (leader/with-prefix mohkale--server-leader-key
           (leader/declare-prefix-for-mode* 'lsp-mode
             "" "server"
             "w" "workspaces"
             "l" "lens"
             "r" "refactor"
             "g" "goto")

           (leader/set-keys-for-mode 'lsp-mode
             "?"   'lsp-describe-session
             "|"   'lsp-describe-thing-at-point
             "e"   'lsp-execute-code-action
             "h"   'lsp-document-highlight
             "wR"  'lsp-restart-workspace
             "wa"  'lsp-workspace-folders-add
             "wr"  'lsp-workspace-folders-remove
             "ws"  'lsp-workspace-folders-switch
             "DEL" 'lsp-disconnect

             "ll" 'lsp-lens-mode
             "ls" 'lsp-lens-show
             "lh" 'lsp-lens-hide

             "rr" 'lsp-format-buffer
             "ri" 'lsp-organize-imports
             "rc" 'lsp-rename

             "gg" 'lsp-goto-type-definition
             "gG" 'lsp-goto-implementation
             "gF" 'lsp-find-implementation
             "gf" 'lsp-find-type-definition)))
     #+END_SRC

***** lsp-ui
      UI enhancements for lsp sessions... tries to make emacs more like VS Code. Boooooo!!!

      #+BEGIN_SRC emacs-lisp
        (with-eval-after-load 'lsp-mode
          (use-package lsp-ui
            :ensure t
            :defer  t
            ;; :hook (lsp-mode-hook . lsp-ui-mode)
            :commands (lsp-ui-mode)
            :init
            ;; only really installed for flycheck support
            (setq lsp-ui-sideline-enable nil
                  lsp-ui-doc-enable nil)

            :config
            (leader/with-prefix mohkale--server-leader-key
              (leader/declare-prefix-for-mode 'lsp-mode
                "p" "peek")

              (leader/set-keys-for-mode 'lsp-mode
                "pg" 'lsp-ui-peek-find-definitions
                "pG" 'lsp-ui-peek-find-definitions))))
      #+END_SRC

***** company-lsp
      use lsp as a completion backend for company.

      #+BEGIN_SRC emacs-lisp
        (with-eval-after-load 'lsp-mode
          (use-package company-lsp
            :ensure t
            :defer  t
            :commands company-lsp
            :config
            ;; reduces write lag
            (setq company-lsp-cache-candidates t)
            (company/configure-mode (lsp-mode)
              company-lsp)))
      #+END_SRC

**** eglot
     seems cool, but the lack of good documentation and support for flycheck is off putting.
     Also doesn't seem to highlight errors using eldoc when possible, which is a feature I
     quite like from lsp-mode. Give it some time, check back again.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package eglot
         :ensure t
         :defer  t
         :init
         (defalias 'eglot-rename-symbol 'eglot-rename)
         :config
         (setq eglot-ignored-server-capabilites
               '(:documentHighlightProvider))

         ;; ;; add flycheck support: https://github.com/joaotavora/eglot/issues/195
         ;; (defvar-local eglot-flycheck--fc-callback nil)

         ;; (defun eglot-flycheck--point->line-col (buffer beg)
         ;;   (with-current-buffer buffer
         ;;     (save-excursion
         ;;       (goto-char beg)
         ;;       (cons (line-number-at-pos)
         ;;             (- (point)
         ;;                (line-beginning-position))))))

         ;; (defun eglot-flycheck--fm-error->fc-error (err)
         ;;   (pcase-let* ((msg (flymake--diag-text err))
         ;;                (beg (flymake--diag-beg err))
         ;;                (buffer (flymake--diag-buffer err))
         ;;                (`(,line . ,col) (eglot-flycheck--point->line-col buffer beg)))
         ;;     (flycheck-error-new-at
         ;;      line nil ;; TODO: use column and region
         ;;      (pcase (flymake--diag-type err)
         ;;        (':error 'error)
         ;;        (':warning 'warning)
         ;;        (':note 'info))
         ;;      msg
         ;;      :id "eglot-flycheck"
         ;;      ;; :checker
         ;;      :buffer buffer
         ;;      :filename (buffer-file-name buffer))))

         ;; (cl-defun eglot-flycheck--flymake-handle-result (flymake-errors &key region)
         ;;   (funcall eglot-flycheck--fc-callback
         ;;            'finished
         ;;            (mapcar #'eglot-flycheck--fm-error->fc-error flymake-errors)))

         ;; (cl-defun eglot-flycheck-checker (checker callback)
         ;;   (setq eglot-flycheck--fc-callback callback)
         ;;   (eglot-flymake-backend #'eglot-flycheck--flymake-handle-result))

         ;; (flycheck-define-generic-checker
         ;;  'eglot-checker
         ;;  "eglot flycheck checker"
         ;;  :start #'eglot-flycheck-checker
         ;;  :modes (eglot--all-major-modes))
         )
     #+END_SRC

*** macro/kmacro/edmacro
    #+BEGIN_SRC emacs-lisp
      (leader/declare-prefix*
        "k"  "macros/lisp")

      (use-package kmacro
        :init
        (leader/with-prefix "k"
          (leader/declare-prefix "c" "counter" "macro-counter")

          (leader/set-keys
            ;; 'edit-kbd-macro ;; any named macro
            ;; 'apply-macro-to-region-lines
            "s" 'name-last-kbd-macro
            "i" 'insert-kbd-macro
            "q" 'kbd-macro-query ;; prompt at macro point

            "cs" 'kmacro-set-counter
            "c=" 'kmacro-set-counter
            "cc" 'kmacro-insert-counter
            "ci" 'kmacro-insert-counter
            "ca" 'kmacro-add-counter
            "c+" 'kmacro-add-counter
            "cf" 'kmacro-set-format)))

      (use-package edmacro
        :defer t
        :commands (edmacro-mode)
        :config
        (leader/with-prefix "k"
          (leader/set-keys
            ;; 'kmacro-edit-lossage ;; edit last 300 strokes as macro
            ;; 'kmacro-step-edit-macro ;; debug last macro
            "SPC" 'kmacro-edit-macro ;; last defined
            "k"   'kmacro-bind-to-key))

        :config
        (leader/set-keys-for-mode! 'edmacro-mode
          "," 'edmacro-finish-edit
          "i" 'edmacro-insert-key))
    #+END_SRC

*** minibuffer
    #+BEGIN_SRC emacs-lisp
      (general-define-key
        :keymaps 'minibuffer-local-map
        "C-h" 'previous-matching-history-element
        "C-j" 'next-history-element
        "C-k" 'previous-history-element
        "C-l" 'next-matching-history-element
        "C-a" 'move-beginning-of-line
        "C-e" 'move-end-of-line
        "C-q" 'quoted-insert
        "C-M-q" 'quit-window
        "M-DEL" 'kill-whole-line

        ;; "M-n" nil
        ;; "M-p" nil
        ;; "M-r" nil
        "C-w" 'backward-kill-word
        "C-?" 'minibuffer-completion-help
        ;; for some reason.. I can't bind Meta keys
        "M-k" 'kill-whole-line
        "M-h" 'backward-kill-sentence
        "M-l" 'kill-sentence)

      (general-define-key
        :keymaps 'minibuffer-local-must-match-map
        "TAB" 'minibuffer-complete
        "<C-tab>" 'minibuffer-complete-and-exit
        "C-j" nil)

      (general-define-key
        :keymaps '(minibuffer-local-map
                   minibuffer-local-must-match-map
                   minibuffer-inactive-mode-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map)
         "<escape>" 'abort-recursive-edit)
    #+END_SRC

*** miniedit
    write the minibuffer contents to a buffer. edit, then paste new contents back to minibuffer.

    #+BEGIN_SRC emacs-lisp
      (use-package miniedit
        :defer t
        :delight (miniedit-mode "MiniEdit")
        :commands (miniedit
                   miniedit-install
                   miniedit-install-for-xemacs
                   miniedit-introduction
                   miniedit-quick-start)
        :init
        (general-define-key
          :keymaps '(minibuffer-local-map
                     minibuffer-local-ns-map
                     minibuffer-local-completion-map
                     minibuffer-local-must-match-map)
          "C-M-<return>" 'miniedit)

        ;; ;; can't seem to change major mode without miniedit mode
        ;; ;; being removed :(
        ;; (add-hook 'miniedit-mode-hook initial-major-mode)
        :config
        (setq miniedit-show-help-p nil) ;; thanks... but no thanks

        (leader/with-prefix leader-major-mode-prefix
          (leader/set-keys-for-mode 'miniedit-mode
            "," 'exit-recursive-edit)))
    #+END_SRC

*** occur
    see all occurences of a search query in the current buffer, with support to jumping
    to the next or previous query and even editing them on the fly.

    #+BEGIN_SRC emacs-lisp
      (use-package replace
        :straight (replace :type built-in)
        :defer t
        :config
        ;; occur-mode-display-occurrence
        (advice-add 'occur-mode-display-occurrence :around
                    #'display-buffer--restore-default-actions)

        (leader/set-keys-for-mode! '(occur-mode occur-edit-mode)
          "e" 'occur-edit-mode
          "R" 'occur-rename-buffer
          "g" 'occur-mode-goto-occurrence
          "G" 'occur-mode-goto-occurrence-other-window
          "l" 'occur-mode-display-occurrence)

        (leader/set-keys-for-mode! 'occur-edit-mode
          "," 'occur-cease-edit)

        (defun-evil-adjust-to-eol evil-adjust-occur-next (&optional prefix)
          (interactive "P")
          (occur-next prefix))

        (defun-evil-adjust-to-eol evil-adjust-occur-prev (&optional prefix)
          (interactive "P")
          (occur-prev prefix))

        (evil-set-initial-state 'occur-mode 'motion)
        (general-define-key
          :keymaps 'occur-mode-map
          :states  'motion
          ;; occur-mode-mouse-goto
          "RET" 'occur-mode-goto-occurrence
          "o" 'occur-mode-goto-occurrence-other-window
          "s" 'occur-mode-display-occurrence

          "j"  'evil-adjust-occur-next
          "k"  'evil-adjust-occur-prev
          "gj" 'evil-next-line
          "gk" 'evil-previous-line

          "R" 'occur-rename-buffer
          "q" 'quit-window)

        (evil-set-initial-state 'occur-edit-mode 'normal)
        (general-define-key
          :states  'normal
          :keymaps 'occur-edit-mode-map
          ;; occur-mode-mouse-goto
          "RET" 'occur-mode-goto-occurrence
          "go"  'occur-mode-goto-occurrence-other-window
          "gs"  'occur-mode-display-occurrence
          "j"   'evil-adjust-occur-next
          "k"   'evil-adjust-occur-prev
          "q"   'occur-cease-edit))
    #+END_SRC

*** open-junk-file
    create temporary files labelled with todays date and other information.

    #+BEGIN_SRC emacs-lisp
      (use-package open-junk-file
        :defer t
        :commands (open-junk-file
                   goto-junk-file-directory
                   goto-todays-junk-file-directory)
        :init
        (leader/set-keys
          "fJ" 'open-junk-file)
        :config
        (setq open-junk-file-format (join-path junk-file-directory "%Y/%m/%d-%H%M%S"))

        (defun goto-junk-file-directory ()
          (interactive)
          (let ((directory junk-file-directory))
            (if (f-directory-p directory)
                (find-file directory)
              (if (file-exists-p directory)
                  (message "junk directory appears to be created as a file: %s" directory)
                (when (y-or-n-p (format "junk file directory '%s' doesn't seem to exist. make it: "
                                        directory))
                  (make-directory (expand-file-name directory) t)
                  (find-file directory))))))

        (defun goto-todays-junk-file-directory ()
          (interactive)
          (let* ((filename  (format-time-string open-junk-file-format))
                 (directory (file-name-directory filename)))
            (if (f-directory-p directory)
                (find-file directory)
              (if (file-exists-p directory)
                  (message "junk file directory appears to be created as a file: %s" directory)
                (when (y-or-n-p (format "junk file directory '%s' doesn't seem to exist. make it: "
                                        directory))
                  (make-directory (expand-file-name directory) t)
                  (find-file directory))))))

        (defun open-junk-file--fix-read-file-name-with-directory-wrapper (func &rest args)
          "ivy read-file-name doesn't seem to handle initial values with directory components
      very well. this wrapper function strips out the directory component of the default
      junk file name and passes it as the dir argument to read-file-name."

          (cl-letf* (((symbol-function 'actual-read-file-name)
                      (symbol-function 'read-file-name))
                     ((symbol-function 'read-file-name)
                      (lambda (prompt &optional dir default-file-name mustmatch initial predicate)
                        (let ((dirname  (file-name-directory    initial))
                              (basename (file-name-nondirectory initial)))
                          ;; for some reason, this doesn't work unless I set default-filename and initial
                          ;; to basename, and even when I do so, the full path still appears an option :(
                          (actual-read-file-name prompt dirname basename mustmatch basename predicate)))))
            (apply func args)))

        (advice-add 'open-junk-file :around #'open-junk-file--fix-read-file-name-with-directory-wrapper))
    #+END_SRC

*** olivetti
    A nice writing environment for emacs :)

    #+BEGIN_SRC emacs-lisp
      (use-package olivetti
        :ensure t
        :defer  t
        :hook (olivetti-mode . (lambda (&rest _)
                                 ;; hide line numbers and fringe
                                 (display-line-numbers-mode
                                  (if olivetti-mode -1 +1))

                                 (eval
                                  `(set-window-fringes
                                    (selected-window)
                                    ,@(if olivetti-mode '(0 0) '(8 8))))))
        :init
        (leader/set-keys
          "M'" 'olivetti-mode)

        :config
        (leader/with-prefix mohkale-minor-mode-leader-key
          (leader/set-keys
            ">" 'olivetti-expand
            "<" 'olivetti-shrink
            "-" 'olivetti-set-width)))
    #+END_SRC

*** package
    #+BEGIN_SRC emacs-lisp
      (use-package package
        :defer t
        :config
        (evil-set-initial-state 'package-menu-mode 'motion)

        (general-define-key
          :keymaps 'package-menu-mode-map
          :states  'motion
          "TAB" 'forward-button
          "<backtab>" 'backward-button
          "RET" 'package-menu-describe-package
          "DEL" 'package-menu-backup-unmark
          "("   'package-menu-toggle-hiding
          "S"   'tabulated-list-sort
          "U"   'package-menu-mark-upgrades
          "d"   'package-menu-mark-delete
          "i"   'package-menu-mark-install
          "u"   'package-menu-mark-unmark
          "x"   'package-menu-execute
          "q"   'quit-window
          "~"   'package-menu-mark-obsolete-for-deletion
          "gr"  'package-menu-refresh)

        (leader/declare-prefix-for-mode!* 'package-menu-mode
          "m" "mark")

        (leader/set-keys-for-mode! 'package-menu-mode
          "h" 'package-menu-hide-package
          "?" 'package-menu-quick-help
          "/" 'package-menu-filter
          "m~" 'package-menu-mark-obsolete-for-deletion
          "mu" 'package-menu-mark-unmark
          "mi" 'package-menu-mark-install
          "mu" 'package-menu-mark-upgrades
          "md" 'package-menu-mark-delete))
    #+END_SRC

*** page-break-lines
    display ^L lines as horizontal-rules.

    #+BEGIN_SRC emacs-lisp
      (use-package page-break-lines
        :defer t
        :diminish
        page-break-lines-mode)
    #+END_SRC

*** paren
    when your point is on a parenthesis, highlight the matching one.

    # TODO look into smart-parens-mode

    #+BEGIN_SRC emacs-lisp
      (use-package paren
        :hook ((text-mode prog-mode) . show-paren-mode)
        :init (setq sp-highlight-pair-overlay nil))
    #+END_SRC

*** pcre2el
    convert from emacs regular expressions to perl like regexps and vice versa.

    #+BEGIN_SRC emacs-lisp
      (use-package pcre2el
        :ensure t
        :defer  t
        :init
        (leader/declare-prefix*
          "xr" "regular expressions"
          "xre" "elisp"
          "xrp" "pcre")

        (leader/set-keys
          "xr'"  'rxt-convert-to-strings
          "xr/"  'rxt-explain
          "xrc"  'rxt-convert-syntax
          "xrt"  'rxt-toggle-elisp-rx
          "xrx"  'rxt-convert-to-rx

          "xre'" 'rxt-elisp-to-strings
          "xre/" 'rxt-explain-elisp
          "xrep" 'rxt-elisp-to-pcre
          "xret" 'rxt-toggle-elisp-rx
          "xrex" 'rxt-elisp-to-rx

          "xrp'" 'rxt-pcre-to-strings
          "xrp/" 'rxt-explain-pcre
          "xrpe" 'rxt-pcre-to-elisp
          "xrpx" 'rxt-pcre-to-rx))
    #+END_SRC

*** pdf-tools
    Use emacs as a quick and dirty pdf viewer.

    #+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
        :ensure t
        :defer  t
        :mode ("\\.pdf$" . pdf-view-mode)
        :hook (pdf-view-mode . hide-mode-line-mode)
        :init
        (setq-default pdf-view-display-size 'fit-page)

        :config
        (evil-set-initial-state 'pdf-view-mode 'motion)

        ;; (pdf-tools-install)
        (with-eval-after-load 'org
          (use-package org-pdftools
            :straight (org-pdftools :type git :host github :repo "fuxialexander/org-pdftools")
            :demand t))

        (general-define-key
          :keymaps 'pdf-view-mode-map
          :states 'motion
          "RET" 'image-next-line
          "o" 'pdf-outline
          ;; TODO make interactive ivy-based outline

          "j" 'pdf-view-next-line-or-next-page-with-prefix
          "k" 'pdf-view-prev-line-or-prev-page-with-prefix
          "gj" 'image-next-line
          "gk" 'image-previous-line

          "h" 'pdf-view-previous-page-command
          "l" 'pdf-view-next-page-command
          "C-j" 'pdf-view-next-page-command
          "C-k" 'pdf-view-previous-page-command
          "]]" 'pdf-view-next-page-command
          "[[" 'pdf-view-previous-page-command

          "gg" 'pdf-view-goto-first-page-with-prefix
          "G"  'pdf-view-goto-page-with-prefix
          "gh" 'beginning-of-buffer
          "gl" 'end-of-buffer
          "H" 'beginning-of-buffer
          "L" 'end-of-buffer

          "=" 'pdf-view-scale-reset
          "+" 'pdf-view-enlarge
          "-" 'pdf-view-shrink

          "C-d" 'pdf-view-scroll-up-or-next-page
          "C-u" 'pdf-view-scroll-down-or-previous-page
          "m" 'pdf-view-position-to-register
          "'" 'pdf-view-jump-to-register
          "`" 'pdf-view-jump-to-register

          "q" 'quit-window
          "Q" 'kill-this-buffer
          "ZQ" 'kill-this-buffer
          "ZZ" 'quit-window)

        (general-define-key
          :keymaps 'pdf-view-mode-map
          :states 'visual
          "y" 'pdf-view-kill-ring-save)

        (leader/set-keys-for-mode! 'pdf-view-mode
          ;; "-" 'pdf-view-fit-height-to-window
          ;; "|" 'pdf-view-fit-width-to-window
          ;; "|" 'pdf-view-fit-page-to-window
          "g" 'pdf-view-goto-label
          "o" 'pdf-occur
          "RET" 'pdf-outline

          "M TAB" 'doc-view-mode
          "Md" 'pdf-view-dark-minor-mode
          "Mm" 'pdf-view-midnight-minor-mode
          "Mp" 'pdf-view-printer-minor-mode

          "zm" 'pdf-view-set-slice-using-mouse
          "zz" 'pdf-view-set-slice-from-bounding-box
          "zr" 'pdf-view-reset-slice)

        (evil-set-initial-state 'pdf-outline-buffer-mode 'motion)

        (general-define-key
          :states  'motion
          :keymaps 'pdf-outline-buffer-mode-map
          "o" 'pdf-outline-display-link
          "sa" 'show-all
          "ss" 'show-subtree
          "sh" 'hide-subtree
          "sn" 'hide-subtree
          "gh" 'pdf-outline-up-heading
          "gk" 'outline-backward-same-level
          "gj" 'outline-forward-same-level
          "gl" 'outline-next-heading
          "gd" 'outline-hide-entry
          "g SPC" 'pdf-outline-select-pdf-window

          "<C-return>" 'pdf-outline-follow-link
          "M-RET" 'pdf-outline-display-link
          "RET" 'pdf-outline-follow-link-and-quit
          ;; goto current page in the outline window
          "gp" 'pdf-outline-move-to-current-page

          "<C-tab>" 'hide-sublevels
          "<C-up>" 'outline-move-subtree-up
          "<C-down>" 'outline-move-subtree-down)

        (leader/set-keys-for-mode! 'pdf-outline-buffer-mode
          "f" 'pdf-outline-follow-mode
          "m" 'outline-mark-subtree)

        (evil-set-initial-state 'pdf-occur-buffer-mode 'motion)
        (general-define-key
          :states  'motion
          :keymaps 'pdf-occur-buffer-mode-map
          ;; unbound: tablist-export-csv
          "RET" 'pdf-occur-goto-occurrence
          "s" 'pdf-occur-view-occurrence
          "o" 'pdf-occur-view-occurrence
          "d" 'tablist-do-kill-lines
          "x" 'pdf-occur-tablist-do-flagged-delete
          "<backtab>" 'tablist-backward-column
          "DEL" 'tablist-unmark-backward

          [remap evil-first-non-blank] 'tablist-move-to-major-column
          [remap evil-next-line] 'tablist-next-line
          [remap evil-previous-line] 'tablist-previous-line

          "gr" 'pdf-occur-revert-buffer-with-args

          "A" 'pdf-occur-tablist-gather-documents
          "D" 'pdf-occur-tablist-do-delete

          "S" 'tabulated-list-sort
          "gS" 'tablist-revert

          "m" 'tablist-mark-forward
          "~" 'tablist-toggle-marks
          "u" 'tablist-unmark-forward
          "U" 'tablist-unmark-all-marks
          "*m" 'tablist-mark-forward
          "*!" 'tablist-unmark-all-marks
          "*c" 'tablist-change-marks
          "*n" 'tablist-mark-items-numeric
          "*r" 'tablist-mark-items-regexp
          "*%" 'tablist-mark-items-regexp

          "a" 'tablist-flag-forward

          "q"  'tablist-quit
          "ZQ" 'tablist-quit
          "ZZ" 'tablist-quit)

        (leader/set-keys-for-mode! 'pdf-occur-buffer-mode-map
          "/!" 'tablist-negate-filter
          "//" 'tablist-display-filter
          "/=" 'tablist-push-equal-filter
          "/C" 'tablist-clear-filter
          "/D" 'tablist-delete-named-filter
          "/a" 'tablist-push-named-filter
          "/d" 'tablist-deconstruct-named-filter
          "/e" 'tablist-edit-filter
          "/n" 'tablist-push-numeric-filter
          "/p" 'tablist-pop-filter
          "/r" 'tablist-push-regexp-filter
          "/s" 'tablist-name-current-filter
          "/t" 'tablist-toggle-first-filter-logic
          "/z" 'tablist-suspend-filter)

        ;; functions ripped from evil-collection
        (defun pdf-view-next-line-or-next-page-with-prefix (&optional count)
          "'evil' wrapper include a count argument to `pdf-view-next-line-or-next-page'"
          (interactive "p")
          (if count
              (dotimes (_ count nil)
                      (pdf-view-next-line-or-next-page 1))
            (pdf-view-next-line-or-next-page 1)))

        (defun pdf-view-prev-line-or-prev-page-with-prefix (&optional count)
          "'evil' wrapper include a count argument to `pdf-view-previous-line-or-previous-page'"
          (interactive "p")
          (if count
              (dotimes (_ count nil)
                      (pdf-view-previous-line-or-previous-page 1))
            (pdf-view-previous-line-or-previous-page 1)))

        (defun pdf-view-goto-page-with-prefix (&optional page)
          "`evil' wrapper around `pdf-view-last-page'."
          (interactive "P")
          (if page
              (pdf-view-goto-page page)
            (pdf-view-last-page)
            (image-eob)))

        (defun pdf-view-goto-first-page-with-prefix (&optional page)
          "`evil' wrapper around `pdf-view-first-page'."
          (interactive "P")
          (if page
              (pdf-view-goto-page page)
            (pdf-view-first-page)
            (image-bob))))
    #+END_SRC

*** persp-mode
    the core backend for spacemacs's layout functionality.

    #+BEGIN_SRC emacs-lisp
      (use-package persp-mode
        ;; unbound functions:
        ;;    persp-kill-buffer
        ;;    persp-save-and-kill

        :ensure t
        :defer  load-me-now-duration
        :diminish persp-mode
        :commands (ivy-find-file-new-perspective
                   switch-to-persp-by-num
                   persp-kill-current
                   persp-add-current-buffer
                   persp-remove-current-buffer)
        :init
        (leader/set-keys
          "ba" 'persp-add-current-buffer
          "bA" 'persp-add-buffer
          "br" 'persp-remove-buffer
          "bR" 'persp-remove-current-buffer
          "fl" 'ivy-find-file-new-perspective)

        :config
        (require 'eyebrowse)

        (persp-mode +1)
        (setq persp-autokill-buffer-on-remove 'kill-weak)

        (defun ivy-find-file-new-perspective--action (file)
          (let* ((name (if current-prefix-arg
                           (let (done value)
                             (while (not done)
                               (setq value (read-string "Name for new perspective: "))
                               (if (not (persp-with-name-exists-p value))
                                   (setq done t) ;; break loop, valid name encountered
                                 (unless (y-or-n-p (format "persp with name '%s' already exists. try again: "
                                                           value))
                                   (setq done t)) ;; user no longer wishes to create persp
                                 (setq value nil) ;; unbind in case value being returned
                                 ))
                             value)
                         (file-name-nondirectory (string-trim-right file "/")))))
            (when name
              (persp-add-new name)
              (persp-switch name)
              (let ((buffer (find-file file)))
                (switch-to-buffer buffer)
                (persp-add-buffer buffer)))))

        (defun ivy-find-file-new-perspective ()
          (interactive)
          (counsel--find-file-1
           "New Persp File: " nil
           #'ivy-find-file-new-perspective--action
           ;; 'ivy-find-file-new-perspective
           ;; with another value, dirs aren't colored
           'counsel-find-file))

        (defun switch-to-persp-by-num (index)
          "switch to a perspective based on it's position in (persp-persps)
      the first position is assumed to be associated with a perspective name `none'.
      if a perspective at the given index doesn't exist, it's assumed you wish to
      create a new one, so you'll be prompted to do so at the largest available index."
          (let* ((persp-list (nreverse (persp-persps)))
                 (persp-count (length persp-list)))
            ;; last value is nil persp with name none
            (if (>= index persp-count)
                (when (yes-or-no-p (format "no layout exists at %d, would you like to make a new layout:"
                                           (1+ persp-count)))
                  (call-interactively 'persp-add-new))
              (let ((current-persp (get-current-persp))
                    (dest-persp    (nth index persp-list)))
                (unless (string-equal (safe-persp-name dest-persp)
                                      (safe-persp-name current-persp))
                  (persp-switch (safe-persp-name dest-persp)))))))

        (defvar persp--copying-p nil
          "true if persp-add-new is called with intent to copy current persp")

        (defun persp-add-new--after (&rest args)
          "hook which is run immeadiately after `persp-add-new'
      this function sets the current persp to the new persp... unless
      `persp-add-new' wasn't invoked interactively. It also kills all
      displayed windows and returns to the home buffer... unless the
      previous persp is being copied."
          (let ((persp-list (nreverse (persp-persps)))
                (start-persp (get-current-persp)))
            (persp-switch (safe-persp-name (car (last persp-list))))

            (unless persp--copying-p
              (kill-all-windows-and-return-to-home))

            (unless (called-interactively-p)
              (persp-switch (safe-persp-name start-persp)))))

        (advice-add 'persp-add-new :after #'persp-add-new--after)
        (advice-add 'persp-copy :around (lambda (func &rest args)
                                          (let ((persp--copying-p t))
                                            (apply func args))))

        (defun mohkale//persp-kill-wrapper (func &rest args)
          "function which wraps around persp-kill
      this function will ensure after a perspective is killed, the next
      perspective you reach will be the one immeadiately before the erased
      one. Not really necessary, but when you try to delete 3 perspectives
      in a row, this'll make things easier. Besides, this is what you expect
      to happen."
          (let* ((perspectives (nreverse (persp-persps)))
                 (current-persp (get-current-persp))
                 (current-index (cl-position current-persp perspectives))
                 (next-persp (when (and current-index
                                        (not (zerop current-index)))
                               (nth (- current-index 1) perspectives))))
            (apply func args)
            (when next-persp
              (persp-switch (persp-name next-persp)))))

        (advice-add 'persp-kill :around #'mohkale//persp-kill-wrapper)

        (defun persp-kill-current ()
          "kill the current perspective"
          (interactive)
          (persp-kill (safe-persp-name (get-current-persp))))

        ;; (defun spacemacs//layout-contains-buffer-p (buffer)
        ;;   "returns true if the given buffer is in the current layout"
        ;;   (not (spacemacs//layout-not-contains-buffer-p buffer)))

        (defun persp-add-current-buffer ()
          "adds current buffer to current perspective"
          (interactive)
          (persp-add-buffer (current-buffer)))

        (defun persp-remove-current-buffer ()
          "removes current buffer from current persp"
          (interactive)
          (persp-remove-buffer (current-buffer)))

        (defun persp-move-layout-left ()
          (interactive)
          ;; (let* ((current-persp (get-current-persp))
          ;;        (current-persp-num (progn
          ;;                             (let (value)
          ;;                               (dolist (persp)))))
          ;;        ))
          (message "not yet implemented") ;; TODO implement
          )

        (defun persp-move-layout-right ()
          (interactive)
          (message "not yet implemented") ;; TODO implement
          )

        ;; thank you spacemacs for giving us perspective mode with eyebrowse... ergo, layouts :)
        ;; https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bspacemacs/spacemacs-layouts/funcs.el
        ;; the following is just a lazy translation of the spacemacs implementation from above for my config.
        ;; some vocabulary notes:
        ;;   * a workspace is a list of eyebrowse window configurations
        ;;   * a layout is a perspective-mode perspective which has an associated workspace.
        ;; for further elaborations on what those terms mean, see the README for perspective-mode and eyebrowse.

        ;; XXXX TBH I don't really understand what most of this does, a lot of it I just copied and pasted from
        ;;      spacemacs and changed spacemacs to layouts... if spacemacs ever realeases this as a standalone
        ;;      package, like they did with spaceline, make sure to switch to that. In the meantime, the following
        ;;      uses the same license as spacemacs... I.E. GPL v3
        ;;      Reference Commit: b252d252b0e93249b51400f60a0c69a59aa140a4

        (defun layouts//get-persp-workspace (&optional persp frame)
          "Get the correct workspace parameters for perspective.
      PERSP is the perspective, and defaults to the current perspective.
      FRAME is the frame where the parameters are expected to be used, and
      defaults to the current frame."
          (let ((param-names (if (display-graphic-p frame)
                                 '(gui-eyebrowse-window-configs
                                   gui-eyebrowse-current-slot
                                   gui-eyebrowse-last-slot)
                               '(term-eyebrowse-window-configs
                                 term-eyebrowse-current-slot
                                 term-eyebrowse-last-slot))))
            (--map (persp-parameter it persp) param-names)))

        (defun layouts//set-persp-workspace (workspace-params &optional persp frame)
          "Set workspace parameters for perspective.
      WORKSPACE-PARAMS should be a list containing 3 elements in this order:
      - window-configs, as returned by (eyebrowse--get 'window-configs)
      - current-slot, as returned by (eyebrowse--get 'current-slot)
      - last-slot, as returned by (eyebrowse--get 'last-slot)
      PERSP is the perspective, and defaults to the current perspective.
      FRAME is the frame where the parameters came from, and defaults to the
      current frame.
      Each perspective has two sets of workspace parameters: one set for
      graphical frames, and one set for terminal frames."
          (let ((param-names (if (display-graphic-p frame)
                                 '(gui-eyebrowse-window-configs
                                   gui-eyebrowse-current-slot
                                   gui-eyebrowse-last-slot)
                               '(term-eyebrowse-window-configs
                                 term-eyebrowse-current-slot
                                 term-eyebrowse-last-slot))))
            (--zip-with (set-persp-parameter it other persp)
                        param-names workspace-params)))

        ;;  _                 _
        ;; | |__   ___   ___ | | _____
        ;; | '_ \ / _ \ / _ \| |/ / __|
        ;; | | | | (_) | (_) |   <\__ \
        ;; |_| |_|\___/ \___/|_|\_\___/
        ;;

        ;; spacemacs/save-eyebrowse-for-perspective
        (defun layouts//save-eyebrowse-for-perspective (&optional frame)
          "save FRAME's eyebrowse workspace to FRAME's perspective.
      FRAME defaults to the current frame."
          (layouts//set-persp-workspace (list (eyebrowse--get 'window-configs frame)
                                              (eyebrowse--get 'current-slot frame)
                                              (eyebrowse--get 'last-slot frame))
                                        (get-frame-persp frame)
                                        frame))

        (add-hook 'eyebrowse-post-window-switch-hook #'layouts//save-eyebrowse-for-perspective)

        ;; spacemacs/update-eyebrowse-for-perspective
        (defun layouts//update-eyebrowse-for-perspective (&rest _args)
          "update & save current frame's eyebrowse workspace to its perspective"
          (let* ((current-slot (eyebrowse--get 'current-slot))
                 (current-tag (nth 2 (assoc current-slot (eyebrowse--get 'window-configs)))))
            (eyebrowse--update-window-config-element
             (eyebrowse--current-window-config current-slot current-tag)))
          (layouts//save-eyebrowse-for-perspective))

        (add-hook 'persp-before-switch-functions #'layouts//update-eyebrowse-for-perspective)
        (add-hook 'persp-before-save-state-to-file-functions #'layouts//update-eyebrowse-for-perspective)

        ;; spacemacs/load-eyebrowse-for-perspective
        (defun layouts//load-eyebrowse-for-perspective (type &optional frame)
          "load an eyebrowse workspace according to a perspective's parameters.
      FRAME's perspective is the perspective that is considered, defaulting to
      the current frame's perspective.
      If the perspective doesn't have a workspace, create one."
          (when (eq type 'frame)
            (let* ((workspace-params (layouts//get-persp-workspace (get-frame-persp frame) frame))
                   (window-configs (nth 0 workspace-params))
                   (current-slot (nth 1 workspace-params))
                   (last-slot (nth 2 workspace-params)))
              (if window-configs
                  (progn
                    (eyebrowse--set 'window-configs window-configs frame)
                    (eyebrowse--set 'current-slot current-slot frame)
                    (eyebrowse--set 'last-slot last-slot frame)
                    (eyebrowse--load-window-config current-slot))
                (eyebrowse--set 'window-configs nil frame)
                (eyebrowse-init frame)
                (layouts//save-eyebrowse-for-perspective frame)))))

        (add-hook 'persp-activated-functions #'layouts//load-eyebrowse-for-perspective)

        ;; spacemacs/load-eyebrowse-after-loading-layout
        (defun layouts//load-eyebrowse-after-perspective-load (_state-file _persp-hash _persp-names)
          "bridge between `persp-after-load-state-functions' and
      `layouts//load-eyebrowse-for-perspective'.
      _PHASH is the hash were the loaded perspectives were placed, and
      PERSP-NAMES are the names of these perspectives."
          (let ((cur-persp (get-current-persp)))
            ;; load eyebrowse for current perspective only if it was one of the loaded
            ;; perspectives
            (when (member (or (and cur-persp (persp-name cur-persp))
                              persp-nil-name)
                          persp-names)
              (layouts//load-eyebrowse-for-perspective 'frame))))

        (add-hook 'persp-after-load-state-functions #'layouts//load-eyebrowse-after-perspective-load))
    #+END_SRC


*** piper
    #+BEGIN_SRC emacs-lisp
      (use-package piper
        :defer t
        :straight (emacs-piper :type git :host gitlab :repo "howardabrams/emacs-piper")
        :commands (piper-ui)
        :init
        (leader/declare-prefix "|" "piper" "interactive emacs pipeline")

        (leader/with-prefix "|"
          (leader/set-keys
            "RET" 'piper-ui
            "|"   'piper
            "o"   'piper-other
            "@"   'piper-remote))

        :config
        (defalias 'piper-ui #'piper-user-interface))
    #+END_SRC

*** proced
    edit processes, like windows task-manager but within emacs :)

    #+BEGIN_SRC emacs-lisp
      (use-package proced
        :config
        (evil-set-initial-state 'proced-mode 'motion)

        (leader/declare-prefix-for-mode!* 'proced-mode
          "m" "mark")

        (leader/set-keys-for-mode! 'proced-mode
          "ma" 'proced-mark-all
          "mu" 'proced-unmark-all
          "mp" 'proced-mark-parents
          "mc" 'proced-mark-children
          "mt" 'proced-toggle-marks
          "mm" 'proced-toggle-marks

          "k" 'proced-send-signal)

        (general-define-key
          :states  'motion
          :keymaps 'proced-mode-map

          "q"      'quit-window
          "C-?"    'proced-help

          "<C-SPC>" 'proced-mark
          "<DEL>"   'proced-unmark-backward
          "a" 'proced-mark
          "A" 'proced-mark-all
          "u" 'proced-unmark
          "U" 'proced-unmark-all
          "p" 'proced-mark-parents
          "P" 'proced-mark-children
          "M" 'proced-toggle-marks

          "x"   'proced-send-signal
          "C-k" 'proced-send-signal

          "<M-SPC>" 'proced-toggle-tree

          "r" 'proced-refine
          "R" 'proced-renice

          "o" 'proced-omit-processes ;; marked

          "<C-M-SPC>" 'proced-format-interactive

          "sS" 'proced-sort-interactive
          "sc" 'proced-sort-pcpu
          "sm" 'proced-sort-pmem
          "sp" 'proced-sort-pid
          "ss" 'proced-sort-start
          "st" 'proced-sort-time
          "su" 'proced-sort-user
          "S"  'proced-filter-interactive))
    #+END_SRC

*** process-menu
    #+BEGIN_SRC emacs-lisp
      (use-package simple
        :straight (simple :type built-in)
        :defer t
        :config
        (evil-set-initial-state 'process-menu-mode 'motion)

        (general-define-key
          :states  'motion
          :keymaps 'process-menu-mode-map
          "d" 'process-menu-delete-process

          "TAB"   'forward-button
          "S-TAB" 'backward-button
          "C-j"   'forward-button
          "C-k"   'backward-button))
    #+END_SRC

*** projectile
**** projectile
     #+BEGIN_SRC emacs-lisp
       (use-package projectile
         :ensure t
         :defer  10
         :delight ""
         :hook (prog-mode . projectile-mode)
         :commands (projectile-ivy-persp-switch-project
                    projectile-show-and-copy-project-dir)
         :init
         (leader/declare-prefix*
           "p" '("projectile" . "project management")
           "px" "execute")

         (leader/set-keys
           "p!" 'projectile-run-shell-command-in-root
           "p%" 'projectile-replace-regexp
           "p&" 'projectile-run-async-shell-command-in-root
           "pa" 'projectile-toggle-between-implementation-and-test
           "pb" 'projectile-switch-to-buffer
           "pc" 'projectile-compile-project
           "ph" 'projectile-dired ;; dired in project home directory
           "pd" 'projectile-find-dir
           "pD" 'projectile-discover-projects-in-directory
           "pf" 'projectile-find-file
           "pF" 'projectile-find-file-in-known-projects
           "pG" 'projectile-regenerate-tags
           "pg" 'projectile-find-tag
           "pI" 'projectile-invalidate-cache
           "pk" 'projectile-kill-buffers
           "pl" 'projectile-ivy-persp-switch-project
           "py" 'projectile-show-and-copy-project-dir
           "pp" 'projectile-run-project
           "pr" 'projectile-recentf
           "p[" 'projectile-previous-project-buffer
           "p]" 'projectile-next-project-buffer
           "pt" 'projectile-test-project
           "xe" 'projectile-run-eshell
           "xi" 'projectile-run-ielm
           "xt" 'projectile-run-term
           "xs" 'projectile-run-shell
           "xv" 'projectile-run-vterm
           "pso" 'projectile-multi-occur
           "psR" 'projectile-replace
           "p TAB" 'projectile-find-other-file
           "p DEL" 'projectile-browse-dirty-projects
           "p RET" 'projectile-find-file-dwim
           "p M-RET" 'projectile-find-file-dwim-other-window)

         (advice-add 'delete-buffer-file :after (lambda (&rest r)
                                                  (when (projectile-project-p)
                                                    (call-interactively 'projectile-invalidate-cache))))
         :config
         (projectile-register-project-type 'rake '("rakefile")
                                           :compile "rake build"
                                           :test    "rake test"
                                           :run     "rake run"
                                           :test-suffix ".spec")

         (projectile-register-project-type 'pipenv '("Pipfile")
                                           :test "pipenv py -m pytest")

         (defun projectile-ensure-no-trailing-slash-in-root (func &rest args)
           (cl-letf* (((symbol-function 'true-projectile-project-root)
                       (symbol-function 'projectile-project-root))
                      ((symbol-function 'projectile-project-root)
                       (lambda (&rest args)
                         ;; TODO maybe don't hardcode file name seperator
                         (string-remove-suffix "/"
                                               (apply 'true-projectile-project-root args)))))
             (apply func args)))

         (advice-add 'projectile-regenerate-tags :around #'projectile-ensure-no-trailing-slash-in-root)

         (setq projectile-project-search-path '("~/programming/projects/"
                                                "~/programming/repos/"
                                                "~/programming/.modules/python/"
                                                "~/programming/")
               projectile-tags-backend 'xref ;; opt into gtags
               projectile-indexing-method 'alien ;; never use native
               projectile-tags-command "ctags -Re -f \"%s\" %s \"%s\"")

         (dolist (path projectile-project-search-path)
           ;; ensure project paths exist
           (unless (file-exists-p path)
             (mkdir path t)))

         (unless (eq system-type 'gnu/linux)
           ;; fixes search glitches on windows when using cygwin... also strips out leading ./ because
           ;; ivy seems to recognise ./ paths as distinct from their non ./ counterparts... maybe that's
           ;; projectiles fault... who knows. also exclude special emacs backup files from search results.
           (setq projectile-generic-command "find . -type f -not -iname '#*#' -print | cut -c3- | tr '\\n' '\\0'"))

         (defun projectile-ivy-persp-switch-project (arg)
           (interactive "P")
           (ivy-read "Switch to Project Perspective: "
                     (if (projectile-project-p)
                         (cons (abbreviate-file-name (projectile-project-root))
                               (projectile-relevant-known-projects))
                       projectile-known-projects)
                     :action (lambda (project)
                               (let ((persp-reset-windows-on-nil-window-conf t)
                                     (project-name (file-name-nondirectory
                                                    (string-remove-suffix "/" project))))
                                 (persp-switch project-name)
                                 (projectile-switch-project-by-name project)))))

         (defun projectile-cleanup--shut-up-please (func &rest args)
           "I don't need to know when you've done nothing... thnx tho :P"
           (cl-letf* (((symbol-function 'actual-message)
                       (symbol-function 'message))
                      ((symbol-function 'message)
                       (lambda (format &rest args)
                         (if (string-equal format
                                           "No projects needed to be removed.")
                             (apply 'format format args)
                           (apply 'actual-message format args)))))
             (apply func args)))

         (advice-add 'projectile-cleanup-known-projects :around #'projectile-cleanup--shut-up-please)

         (defun projectile-compile--double-prefix-means-run-comint (func &optional args)
           "allow running compilation interactively when multiple prefixes are given.
       with two prefixes (C-u C-u) runs default compilation command in interactive
       compilation buffer. with three prompts for command and then runs it in an
       interactive compilation buffer."
           (let ((prefix current-prefix-arg))
             (if (and (consp prefix)
                      (setq prefix (car prefix))
                      (>= prefix 16))
                 (cl-letf* (((symbol-function 'actual-compile)
                             (symbol-function 'compile))
                            ((symbol-function 'compile)
                             (lambda (command &optional comint)
                               (actual-compile command t))))
                   (funcall func (if (eq prefix 16) nil '(4))))
               (funcall func prefix))))

         (advice-add 'projectile-run-project     :around #'projectile-compile--double-prefix-means-run-comint)
         (advice-add 'projectile-compile-project :around #'projectile-compile--double-prefix-means-run-comint)
         (advice-add 'projectile-test-project    :around #'projectile-compile--double-prefix-means-run-comint)

         (defun projectile-show-and-copy-project-dir (&optional prefix)
           (interactive "P")
           (if (not (projectile-project-p))
               (message "you're not currently in a project")
             (let ((path (projectile-project-root)))
               (when prefix
                 (if (and (consp prefix) (eq (car prefix) 4))
                     (insert path)
                   (save-excursion
                     (insert path))))
               (message (abbreviate-file-name path))
               (kill-new path)))))
     #+END_SRC

**** counsel-projectile
     needs to be loaded after ivy and projectile, including the init function.

     #+BEGIN_SRC emacs-lisp
       (use-package counsel-projectile
         :ensure t
         :defer  t
         ;; :hook (projectile-mode . counsel-projectile-mode)
         :init
         (leader/declare-prefix "ps" "search")

         (leader/set-keys
           "fp"    'counsel-projectile-switch-project
           "pP"    'counsel-projectile-switch-project
           "pf"    'counsel-projectile-find-file
           "pd"    'counsel-projectile-find-dir
           "pb"    'counsel-projectile-switch-to-buffer
           "psg"   'counsel-projectile-grep
           "psv"   'counsel-projectile-git-grep
           "psa"   'counsel-projectile-ag
           "psr"   'counsel-projectile-rg
           "p SPC" 'counsel-projectile))
     #+END_SRC

*** rake
    #+BEGIN_SRC emacs-lisp
      (use-package rake
        :ensure t
        :defer  t
        :commands (rake-refresh)
        :init
        (leader/set-keys
          "cr" 'rake
          "cR" 'rake-rerun)

        :config
        (setq rake-completion-system 'ivy-read)
        (defalias 'rake-refresh #'rake-regenerate-cache))
    #+END_SRC

*** restclient
**** restclient-mode
     #+BEGIN_SRC emacs-lisp
       (use-package restclient
         :ensure t
         :defer  t
         :commands (restclient)
         :init
         (leader/set-keys
           "ar" 'restclient)

         :config
         (let ((leader leader-major-mode-key))
           (leader/set-keys-for-mode! 'restclient-mode
             "RET"   'restclient-http-send-current
             "M-RET" 'restclient-http-send-current-raw
             leader  'restclient-http-send-current-stay-in-window
             "y"     'restclient-copy-curl-command
             "m"     'restclient-mark-current
             "n"     'restclient-narrow-to-current
             "w"     'widen)

           (leader/declare-prefix-for-mode!* 'restclient-mode
             "RET"   "execute-current"
             "M-RET" "execute-current-raw"
             leader  "execute-current-same-window"
             "y"     "yank-curl-command"
             "m"     "mark-current"
             "n"     "narrow-to-current"))

         (general-define-key
           :states 'normal
           :keymaps 'restclient-mode-map
           "gj" 'restclient-jump-next
           "gk" 'restclient-jump-prev)

         (general-define-key
           :states  'normal
           :keymaps 'restclient-outline-mode-map
           "TAB"   'restclient-toggle-body-visibility-or-indent
           "g TAB" 'restclient-toggle-body-visibility-or-indent)

         (add-hook 'restclient-response-mode-hook
                   'evil-motion-state)

         (push "*HTTP Response*" mohkale--whitespace-exempt-buffers)

         (defun restclient ()
           "create a new buffer in restclient mode"
           (interactive)
           (let ((buffer (create-new-empty-buffer "restclient")))
             (with-current-buffer buffer
               (restclient-mode))
             (display-buffer buffer))))
     #+END_SRC

**** company-restclient
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'restclient
         (use-package company-restclient
           :ensure t
           :defer  t
           :commands (company-restclient)
           :config
           (company/configure-mode (restclient-mode :major t)
             company-restclient)))
     #+END_SRC

**** org-babel-restclient
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'restclient
         (use-package ob-restclient
           :ensure t
           :defer  t
           :init
           (with-eval-after-load 'org
             (org-babel-do-load-languages
              'org-babel-load-languages
              '((restclient . t))))))
     #+END_SRC

*** save-place
    remembers the cursor position in open files... so when I reopen them I'm taken to that point
    immeadiately. It's a cool feature, but not really essential. Generally, when I open a file,
    I'll look around a bit to see where I was and what I was doing. Jumping to where I was
    immediately only helps with one of those problems & it seems like a bad habit to depend on
    that to remind me... use org capture for that and mode dependent jump keys to get to where
    you need to. quick & easy.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package saveplace
        :commands (save-place-mode)
        :init
        (save-place-mode +1))
    #+END_SRC

*** server
    #+BEGIN_SRC emacs-lisp
      (use-package server
        :demand t
        :commands (server-kill-clients-for-buffer)
        :config
        ;; see http://emacshorrors.com/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html
        ;; for why this is sometimes useless :(
        (or (server-running-p) (server-start))

        ;; see https://superuser.com/questions/295156/how-to-set-the-exit-status-for-emacsclient
        (defun server-kill-clients-for-buffer (&optional prefix)
          "Sends error exit command to every client for the current buffer."
          (interactive "P")
          (if (not server-buffer-clients)
              (error "current buffer has no server clients")
            (dolist (proc server-buffer-clients)
              (server-send-string proc "-error die"))
            (unless prefix (kill-buffer))))

        (defalias 'server-abort #'server-kill-clients-for-buffer)

        (advice-add 'server-edit :before
                    (defun server-edit--auto-save-on-exit (&rest args)
                      "automatically save file before server exit"
                      (save-buffer)))

        ;; add ,, and ,q like bindings in server edit sessions, like org-edit-src-code
        (define-minor-mode mohkale-server-mode
          "a dummy minor mode for files being edited by `server'.
      makes it easier to bind keys (& leaders :grinning: for them)."
          nil
          "ServerEdit"
          '(([remap evil-write] . server-edit)
            ([remap evil-save-and-close] . server-edit)
            ([remap evil-quit-all-with-error-code] . server-abort))
          (when mohkale-server-mode
            (setq header-line-format
                  (substitute-command-keys
                   "Editing an emacsclient sesssion.  Exit with '\\[server-edit]' or abort with '\\[server-abort]'"))))

        (add-hook 'server-switch-hook
                  (defun server-switch--enable-mohkale-server-mode ()
                    (when server-buffer-clients
                      (unless (or (bound-and-true-p magit-mode)
                                  (bound-and-true-p git-commit-mode))
                        (mohkale-server-mode)))))

        (add-hook 'server-done-hook (lambda () (mohkale-server-mode -1)))

        (leader/with-major-mode-prefix
          (leader/set-keys-for-mode 'mohkale-server-mode
            "," 'server-edit
            "q" 'server-abort)))
    #+END_SRC

**** edit-server
     invoke emacs-client from a browser... EPIC!!!

     #+BEGIN_SRC emacs-lisp
       (defvar mohkale-browser-edit-package 'edit-with-emacs
         "The extension with which I connect emacs to my browser.
       Set to atomic to use atomic-chrome and edit-with-emacs to use
       edit-with-emacs.

       Personally I prefer edit-with-emacs because it lets you a cancel
       an edit session and revert to the original (or last saved) text.
       It also has the option of binding M-<enter> in chrome to edit with
       emacs.

       Atomic chrome reflects changes live, which is pretty cool if you
       expect emacs to crash whilst writing... but otherwise isn't too
       useful.")

       (defvar mohkale-browser-edit-mode initial-major-mode
         "default major mode for a browser edit session.")

       (defvar mohkale-browser-edit-mode-alist
         `(("^github.com/" . ,#'markdown-mode)
           ("^gitlab.com/" . ,#'markdown-mode))
         "association list of url regexps against mode-functions.")

       (cond
        ((eq mohkale-browser-edit-package 'edit-with-emacs)
         (use-package edit-server
           :ensure t
           :demand t
           :delight
           (edit-server-edit-mode "ESE") ;; emacs server edit
           :init
           (setq edit-server-new-frame nil  ;; prefer current frame
                 edit-server-default-major-mode mohkale-browser-edit-mode
                 edit-server-url-major-mode-alist mohkale-browser-edit-mode-alist)

           (edit-server-start)
           :config
           (leader/with-major-mode-prefix
             (leader/set-keys-for-mode 'edit-server-edit-mode
               "s" 'edit-server-save
               "," 'edit-server-done
               "q" 'edit-server-abort)))

         ;; fixes issues with non conventional input components likes gmails compose box
         (use-package edit-server-htmlize
           :ensure t
           :defer  t
           :hook ((edit-server-start . edit-server-maybe-dehtmlize-buffer)
                  (edit-server-done  . edit-server-maybe-htmlize-buffer))))

        ((eq mohkale-browser-edit-package 'atomic)
         (use-package atomic-chrome
           :ensure t
           :demand t
           :delight
           (atomic-chrome-edit-mode "Atomic")
           :init
           (setq atomic-chrome-default-major-mode   mohkale-browser-edit-mode
                 atomic-chrome-url-major-mode-alist mohkale-browser-edit-mode-alist)

           (atomic-chrome-start-server)
           :config
           (leader/with-major-mode-prefix
             (leader/set-keys-for-mode 'atomic-chrome-edit-mode
               "s" 'atomic-chrome-send-buffer-text
               "," 'atomic-chrome-close-current-buffer))))

        (mohkale-browser-edit-package
         (message "unknown browser extension package: %s"
                  mohkale-browser-edit-package)))
     #+END_SRC

*** simple
    #+BEGIN_SRC emacs-lisp
      (use-package simple
        :straight (simple :type built-in)
        :defer t
        :commands (smart-universal-argument
                   universal-argument-batch-increment
                   universal-argument-batch-decrement)
        :init
        (push 'messages-buffer-mode mohkale--whitespace-exempt-modes)

        :config
        (defmacro defun-universal-argument-operation (name docstring &rest body)
          `(defun ,name ()
             ,docstring
             (interactive)
             (prefix-command-preserve-state)
             (if (not prefix-arg)
                 (universal-argument)
               ,@body)

             (when prefix-arg
               (universal-argument--mode))))
        (put 'defun-universal-argument-operation 'lisp-indent-function 'defun)

        (defun-universal-argument-operation smart-universal-argument
          "combine both universal-argument and universal-argument-more
      into a single invokeable command. for some reason, calling simply
      more before a regular prefix has been specified, will result in no
      overall prefix being set :("
          (universal-argument-more prefix-arg))

        (let ((universal-argument-increment-by 4))
          ;; I'm not sure why universal-argument-more multiplies
          ;; the prefix arg by a factor of 4. I mean, 4 to 16 is
          ;; fine, but 16 to 64 is pretty unlikely to be what you
          ;; wanted. Adding by 4 would be more useful, especially
          ;; if you're using it to gauge indents.
          (defun-universal-argument-operation universal-argument-batch-increment
            (format "increment the current prefix-arg by %d."
                    universal-argument-increment-by)
            (let* ((prefix-value (prefix-numeric-value prefix-arg)))
              (setq prefix-arg
                    (+ prefix-value universal-argument-increment-by))))

          (defun-universal-argument-operation universal-argument-batch-decrement
            (format "decrement the current prefix-arg by %d."
                    universal-argument-increment-by)
            (let* ((prefix-value (prefix-numeric-value prefix-arg)))
              (setq prefix-arg (- prefix-value universal-argument-increment-by)))))

        (dolist (mode `(messages-buffer-mode
                        completion-list-mode
                        special-mode
                        message-mode))
          (evil-set-initial-state mode 'motion))

        (leader/declare-prefix "i TAB" "indent" "indentation")

        (leader/set-keys
          "i TAB <tab>" 'indent-region
          "i TAB RET"   'split-line
          "i TAB SPC"   'just-one-space
          "i TAB r"     'indent-relative
          "i TAB R"     'indent-relative-first-indent-point
          "i TAB ."     'hydra-indent/body
          "i TAB n"     'forward-to-indentation
          "i TAB N"     'back-to-indentation)

        ;; force state for buffer if it already exists
        (let ((buffer (get-buffer "*Messages*")))
          (when buffer
            (with-current-buffer buffer
              (evil-motion-state))))

        (general-define-key
          :keymaps 'completion-list-mode-map
          :states  'motion
          "RET" 'choose-completion
          "C-j" 'choose-completion

          "q" 'quit-window
          "Q" 'delete-completion-window

          "j" 'next-completion
          "k" 'previous-completion
          "n" 'next-completion
          "p" 'previous-completion
          "N" 'previous-completion))
    #+END_SRC

*** sudo-edit
    any machine with SSH makes this kind of obsolete :P.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package sudo-edit
        :ensure t
        :defer  t
        :commands sudo-edit
        :init
        (leader/set-keys
          "fE" 'sudo-edit))
    #+END_SRC

*** rainbow-delimeters
    pretty colors for my lisp parens :)

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :ensure t
        :defer  t
        :hook (prog-mode . rainbow-delimiters-mode)
        :commands rainbow-delimiters-mode)
    #+END_SRC

*** rainbow-mode
    highlights hex color strings in their appropriate color. keep it around... though I'll
    probably never use it.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package rainbow-mode
        :ensure t
        :defer  t)
    #+END_SRC

*** tabulated-list-mode
    #+BEGIN_SRC emacs-lisp
      (use-package tabulated-list
        :defer t
        :hook (tabulated-list-mode . hl-line-mode)
        :commands (tabulated-list-next-column)
        :config
        (evil-set-initial-state 'tabulated-list-mode 'motion)

        (defun tabulated-list--get-column-widths ()
          "return a list of all the "
          (mapcar (lambda (x) (+ (nth 1 x)
                                 (or (plist-get (cdr x) :pad-right) 1)))
                  tabulated-list-format))

        (defun tabulated-list--get-column-pivots ()
          (let (prev values)
            (setq values (mapcar (lambda (x)
                                   (let ((new-val (+ x (or prev 0))))
                                     (setq prev new-val)
                                     new-val))
                                 (tabulated-list--get-column-widths)))
            ;; (mapcar (lambda (x) (- x 1)) values)
            values))

        (defun tabulated-list--properties ()
          (let* ((current-column-position (- (point)
                                             (line-beginning-position)))
                 (column-pivots (tabulated-list--get-column-pivots))
                 (column-count (length column-pivots))
                 (preceding-columns (seq-filter
                                     (lambda (x)
                                       (<= x current-column-position))
                                     column-pivots))
                 (following-columns (nthcdr (length preceding-columns)
                                            column-pivots))
                 (current-column (car following-columns))
                 (following-columns (cdr following-columns)))
            `(:current-column-position ,current-column-position
                                       :column-pivots           ,column-pivots
                                       :column-count            ,column-count
                                       :preceding-cols          ,preceding-columns
                                       :current-column          ,current-column
                                       :following-cols          ,following-columns)))

        ;; doesn't work when row contains truncated entries, such as
        ;; buffers with a "name..." entry, because those dots aren't
        ;; included in the width of the column.
        (defun tabulated-list-next-column (&optional count)
          "moves to the next column shown by tabulated list mode"
          (interactive)
          (or count (setq count 1))

          (when tabulated-list-format
            (let* ((properties (tabulated-list--properties))
                   (line-step (floor (/ count
                                        (plist-get properties :column-count)))))
              ;; move however many lines it takes to reach row with desired column
              (unless (zerop line-step)
                (next-line line-step))

              (unless (eobp)
                (cond
                 ((eq (point) (line-end-position))
                  ;; when at the end of the last column, goto next row
                  (next-line)
                  (goto-char (line-beginning-position)))
                 ((not (plist-get properties :following-cols))
                  ;; no next column, goto end of current
                  (goto-char (line-end-position)))
                 (t
                  ;; goto next column from the end of the current one
                  (goto-char (+ (line-beginning-position)
                                (plist-get properties :current-column)))))))))

        (general-define-key
          :keymaps 'tabulated-list-mode-map
          "SPC"   nil
          "ESC"   nil
          "0"     nil
          "<"     nil
          ">"     nil
          "?"     nil
          "g"     nil
          "h"     nil
          "n"     nil
          "p"     nil
          "DEL"   nil
          "S-SPC" nil
          "gr" 'revert-buffer))
    #+END_SRC

*** tags
    #+BEGIN_SRC emacs-lisp
      (use-package ggtags
        :ensure t
        :defer  t
        :init
        (leader/declare-prefix "T" "tags")

        (leader/set-keys
          "TD" 'ggtags-delete-tags
          "T/" 'ggtags-grep)

        :config
        ;; NOTE ggtags-global-mode is not a global mode... global is
        ;;      for GNU *global* tagging system
        (leader/set-keys-for-mode! 'ggtags-global-mode
          "r" 'recompile
          "f" 'next-error-follow-minor-mode))
    #+END_SRC

*** tramp
    Transparent ReMote Access Protocol

    #+BEGIN_SRC emacs-lisp
      (use-package tramp
        :defer t
        :config
        ;; google cloud integration... curtesy of:
        ;;   https://qiita.com/tanatana/items/218b19808f2428b125fe
        ;; see [[https://cloud.google.com/sdk/docs/quickstart-windows][here]] for how to install gcloud CLI.
        (push
         '("gcssh"
           (tramp-login-program        "gcloud compute ssh")
           (tramp-login-args           (("%h")))
           (tramp-async-args           (("-q")))
           (tramp-remote-shell         "/bin/sh")
           (tramp-remote-shell-args    ("-c"))
           (tramp-gw-args              (("-o" "GlobalKnownHostsFile=/dev/null")
                                        ("-o" "UserKnownHostsFile=/dev/null")
                                        ("-o" "StrictHostKeyChecking=no")))
           (tramp-default-port         22))
         tramp-methods))
    #+END_SRC

*** tramp-term
    create remote terminal sessions effortlessly... this should be built into term tbh.

    #+BEGIN_SRC emacs-lisp
      (use-package tramp-term
        :ensure t
        :defer  t
        :commands (tramp-term
                   ;; term--use-tramp-term-when-in-tramp-directory
                   )
        :init
        ;; (add-hook 'term :before-until #'term--use-tramp-term-when-in-tramp-directory)
        :config
      ;;   (defun term--use-tramp-term-when-in-tramp-directory (&rest args)
      ;;     "when current buffers is in a tramp path open a tramp term session
      ;; if prefix arg specified, disregard this and open a local term sessions"
      ;;     (when (and (not current-prefix-arg)
      ;;                default-directory
      ;;                (tramp-tramp-file-p default-directory))
      ;;       (tramp-term )
      ;;         )
      ;;     )
        )
    #+END_SRC

*** transpose-frame
    #+BEGIN_SRC emacs-lisp
      (use-package transpose-frame
        :defer t
        :commands (transpose-frame
                   flip-frame
                   flop-frame ;; flip horizontally
                   rotate-frame ;; 180 degrees
                   rotate-frame-clockwise ;; 90 degrees
                   rotate-frame-anti-clockwise ;; 90 degrees
                   )
        :init
        (general-define-key
          :keymaps 'mohkale-window-map
          "C-t"   'transpose-frame
          "t"     'transpose-frame
          "("     'rotate-frame-clockwise
          ")"     'rotate-frame-anti-clockwise
          "*"     'rotate-frame
          "f"     'flip-frame
          "F"     'flop-frame))
    #+END_SRC

*** undo-tree
    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :ensure t
        :defer  t
        :diminish
        :init
        (push 'undo-tree-visualizer-mode mohkale--whitespace-exempt-modes)

        (defvar undo-tree-skip-autosave-regex+ nil
          "don't create an undo-tree auto-save for file if `buffer-file-name' \
      matches this regexp.")

        (setq undo-tree-auto-save-history t
              ;; TODO look into undoing within region
              ;; undo-tree-enable-undo-in-region t
              )

        :config
        (advice-add 'undo-tree-save-history :around
                    (defun undo-tree-save-history--respect-ignore+ (func &rest args)
                      "respect `undo-tree-skip-autosave-regex+'.
      also suppresses undo-tree messages relating to saving files."
                      (when (and undo-tree-skip-autosave-regex+
                                 (not (string-match-p undo-tree-skip-autosave-regex+
                                                      buffer-file-name)))
                        (apply func args))))

        (advice-add 'undo-tree-save-history :around
                    (defun undo-tree-save-history--suppress-message+ (func &rest args)
                      (with-no-write-messages (apply func args))))

        (general-define-key
          :keymaps 'undo-tree-map
          "C-/" nil
          "C-_" nil
          "C-?" nil))
    #+END_SRC

*** uuidgen
    #+BEGIN_SRC emacs-lisp
      (use-package uuidgen
        :ensure t
        :defer  t
        :commands uuidgen
        :init
        (leader/set-keys
          "iU" 'uuidgen
          ;; "U" '(:prefix-command mohkale-insert-uuid-map :which-key "uuid")
          ;; "U1" 'uuidgen-1
          ;; "U4" 'uuidgen-4
          ;; "UU" 'uuidgen-U
          ))
    #+END_SRC

*** vi-tilde
    display ~ on trailing lines in the fringe. doesn't work with emacs's new builtin line
    numbers mode.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package vi-tilde-fringe
        :ensure t
        :defer  t
        :diminish
        :commands (vi-tilde-fringe-mode global-vi-tilde-fringe-mode)
        :config
        (global-vi-tilde-fringe-mode))
    #+END_SRC

*** view-mode
    #+BEGIN_SRC emacs-lisp
      (use-package view
        :defer t
        :config
        (general-define-key
          :keymaps 'view-mode-map
          :states  'normal
          "q" 'View-quit
          "Q" 'View-quit-all
          "G" 'View-scroll-to-buffer-end
          "zq" 'View-exit
          "zk" 'View-kill-and-leave
          "C-j" 'View-scroll-line-forward
          "C-k" 'View-scroll-line-backward
          ;; "C-d" 'View-scroll-half-page-forward
          ;; "C-u" 'View-scroll-half-page-backward
          "M-d" 'View-scroll-page-forward
          "M-u" 'View-scroll-page-backward))
    #+END_SRC

*** visible-mark
    highlight region when mark is active.

    #+BEGIN_SRC emacs-lisp
      (use-package visible-mark
        :ensure t
        :defer  t
        :commands (visible-mark-mode))
    #+END_SRC

*** visual-line
    auto wrap long lines at the end of words.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package visual-line
        :straight (visual-line :type built-in)
        :defer t
        :delight " Ⓛ")
    #+END_SRC

*** vlc-rc
    #+BEGIN_SRC emacs-lisp
      (use-package vlc-rc
        :straight (vlc-rc :type git :host github :repo "mohkale/vlc-rc")
        :defer t
        ;; can't defer for now, hopefully when use-package
        ;; supports bind-keymap with specific map, change.
        :commands (vlc/dired-add-file
                   vlc/dired-enqueue-file)
        :init
        (setq vlc-rc-map (make-sparse-keymap))

        (leader/with-prefix "v"
          (leader/declare-prefix*
            "" '("VLC" . "VideoLanCodec")
            "s" "set"
            "t" "toggle")

          (leader/set-keys "" vlc-rc-map))

        (general-define-key
          :keymaps 'dired-mode-map
          :states '(normal motion)
          "v"  nil
          "vv" 'vlc/dired-add-file
          "vq" 'vlc/dired-enqueue-file)

        (general-define-key
          :keymaps 'vlc-rc-map
          "C-." 'hydra-vlc-rc/body))
    #+END_SRC

*** which-key
    show completion candidates for the current key prefix, after a mild delay.

    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :demand t
        :diminish
        :commands (which-key-M-x+)
        :init
        (leader/set-keys
          "hk" 'which-key-show-top-level
          "h RET" 'which-key-M-x+)

        ;; prefix-completion courtesy of clemara
        ;; see https://with-emacs.com/posts/ui-hacks/prefix-command-completion/
        (defun which-key-M-x-prefix+ (&optional _)
          "Completing read and execute command from prefix-map.

      This command can be used as `prefix-help-command'. The optional
      argument is ignored and only for compatability with
      `which-key-C-h-dispatch' so this command can be bound in
      `which-key-C-h-map', too."
          (interactive)
          (let* ((evs (cond ((which-key--current-prefix)
                             (which-key--current-key-list))
                            (t
                             (butlast (append (this-command-keys-vector) nil)))))
                 (key  (and evs (apply #'vector evs))))
            (which-key-M-x+ key)))

        (setq prefix-help-command #'which-key-M-x-prefix+)

        :config
        (which-key-mode 1)

        ;; order of keys is case insensetive
        (setq which-key-sort-order 'which-key-key-order-alpha
              which-key-echo-keystrokes 0.02)

        (defun which-key-M-x+ (&optional key)
          "Completing read command and execute it.

      Only commands which are bound to keys are considered. If KEY is
      given it should be the prefix-key for which commands should be
      completed. Otherwise read command from top-level. "
          (interactive)
          (let ((cmd (which-key--completing-read-cmd+ key)))
            (when (commandp cmd)
              (which-key--execute-cmd+ cmd))))

        (defun which-key--completing-read-cmd+ (&optional prefix)
          "Completing read command for PREFIX.

      Read commands for PREFIX or top-level if PREFIX not given."
          (which-key--hide-popup-ignore-command)
          (let ((desc
                 (completing-read
                  (if prefix
                      (format "Execute (%s): " (key-description prefix))
                    "Execute: ")
                  (mapcar #'which-key--completing-read-format+
                          (which-key--get-current-bindings prefix)))))
            (intern (car (split-string desc)))))

        (defun which-key--execute-cmd+ (cmd)
          "Execute command CMD as if invoked by key sequence."
          (setq prefix-arg current-prefix-arg)
          (setq this-command cmd)
          (setq real-this-command cmd)
          (command-execute cmd 'record))

        (defun which-key--completing-read-format+ (bnd)
          "Format binding BND for `completing-read'."
          (let* ((key (car bnd))
                 (cmd (cdr bnd))
                 (desc (format "%s (%s)" cmd
                               (propertize key 'face 'which-key-key-face))))
            (which-key--maybe-add-docstring
             (format "%-50s" desc) cmd))))
    #+END_SRC

*** whitespace
    #+BEGIN_SRC emacs-lisp
      (use-package whitespace
        :defer t
        :delight
        (whitespace-mode " ⓦ")
        (global-whitespace-mode " ⓦ"))
    #+END_SRC

*** winner
    undo changes to window configurations.

    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :defer 10
        :init
        (general-define-key
          :keymaps 'mohkale-window-map
          "<left>"  'winner-undo
          "<right>" 'winner-redo)

        :config
        (winner-mode +1))
    #+END_SRC

*** winum
    number windows, to make jumping to them easier.

    #+BEGIN_SRC emacs-lisp
      (use-package winum
        :ensure t
        :demand t
        :after which-key
        :commands (winum-select-window-1
                   winum-select-window-2
                   winum-select-window-3
                   winum-select-window-4
                   winum-select-window-5
                   winum-select-window-6
                   winum-select-window-7
                   winum-select-window-8
                   winum-select-window-9
                   winum-select-window-by-number)
        :init
        (general-define-key
          :keymaps 'mohkale-window-map
          "1" 'winum-select-window-1
          "2" 'winum-select-window-2
          "3" 'winum-select-window-3
          "4" 'winum-select-window-4
          "5" 'winum-select-window-5
          "6" 'winum-select-window-6
          "7" 'winum-select-window-7
          "8" 'winum-select-window-8
          "9" 'winum-select-window-9
          "0" 'winum-select-window-by-number
          )

        :config
        (winum-mode)

        ;; reset 1st window number option to window by number
        (push (cons '("\\(.*\\) 1" . "winum-select-window-1")
                    '("\\1 1..9"   . "window-by-number"))
              which-key-replacement-alist)

        ;; hide numbers 2 through to nine
        (push (cons '(nil . "winum-select-window-[2-9]") t)
              which-key-replacement-alist)

        ;; abbreviate 0 value
        (push (cons '("\\(.*\\) 0" . "winum-select-window-by-number")
                    '("\\1 0"      . "window-by-prompt"))
              which-key-replacement-alist))
    #+END_SRC

*** xref
    cross reference keywords across a number of different backends.

    #+BEGIN_SRC emacs-lisp
      (use-package xref
        :defer t
        :init
        (leader/declare-prefix "ax" "xref")

        (leader/set-keys
          "axx" 'xref-find-references
          "axX" 'xref-find-definitions
          "ax/" 'xref-find-apropos
          "axw" 'xref-find-definitions-other-window
          "axf" 'xref-find-definitions-other-frame
          "ax SPC" 'xref-pop-marker-stack)

        ;; erase global xref bindings
        (general-define-key
          "M-."   nil ; xref-find-definitions
          "M-,"   nil ; xref-pop-marker-stack
          "M-?"   nil ; xref-find-references
          "C-M-." nil ; xref-find-apropos
          )

        :config
        (evil-set-initial-state 'xref--xref-buffer-mode 'motion)

        (general-define-key
          :keymaps 'xref--xref-buffer-mode-map
          :states 'motion
          "j" 'xref-next-line
          "k" 'xref-prev-line
          "RET" 'xref-goto-xref
          "M-RET" 'xref-show-location-at-point
          "TAB" 'xref-quit-and-goto-xref)

        (leader/set-keys-for-mode! 'xref--xref-buffer-mode
          "s" 'xref-query-replace-in-results))
    #+END_SRC

*** yasnippet
    yet another snippets tool... but amazingly powerful. :-P
    See the snippet [[https://joaotavora.github.io/yasnippet/snippet-development.html#org6796ab7][dev]] guide at.

**** yasnippet
     #+BEGIN_SRC emacs-lisp
       (use-package yasnippet
         :ensure t
         :defer  load-me-now-duration
         :delight (yas-minor-mode "YAS")
         :commands (yas-expand
                    yas-new-snippet
                    yas-visit-snippet-file)
         :init
         (leader/set-keys
           "iSn" 'yas-new-snippet
           "fS" 'yas-visit-snippet-file)

         (general-define-key
           :states 'insert
           "C-i" 'yas-expand)

         :config
         (yas-global-mode 1)

         (general-define-key
           :keymaps 'yas-keymap
           "<C-return>" 'yas-next-field
           "<C-M-return>" 'yas-prev-field
           "C-l" 'yas-next-field
           "C-h" 'yas-prev-field)

         (leader/set-keys-for-mode! 'snippet-mode
           "m" 'yas-load-snippet-buffer-and-close
           "l" 'load-snippet-buffer
           "t" 'yas-tryout-snippet)

         (yas-load-directory mohkale-snippets-dir t))
     #+END_SRC

**** auto-yasnippet
     allows you to create dynamic/in-place snippets and repeatedly execute them.

     #+BEGIN_SRC emacs-lisp
       (use-package auto-yasnippet
         :ensure t
         :defer  t
         :init
         (leader/declare-prefix "iS" "auto-yasnippet")

         (leader/set-keys
           "iSc" 'aya-create
           "iSe" 'aya-expand
           "iSw" 'aya-persist-snippet)

         (general-define-key
           :states 'insert
           "M-i" 'aya-expand))
     #+END_SRC

**** snippet-sources
***** yasnippet-snippets
      #+BEGIN_SRC emacs-lisp
        (with-eval-after-load 'yasnippet
          (use-package yasnippet-snippets
            :ensure t
            :defer  t))
      #+END_SRC

*** ycmd
**** ycmd-mode
     #+BEGIN_SRC emacs-lisp
       (use-package ycmd
         :ensure t
         :defer  t
         :delight "YCMD"
         :hook (ycmd-mode . ycmd-eldoc-setup)
         :init
         ;; NOTE to enable ycmd completion, hook ycmd-mode into any desired
         ;;      buffers and include company-ycmd in the company backends for
         ;;      the mode.

         (setq ycmd-global-config (expand-file-name "~/.ycmd-config")
               ycmd-startup-timeout 10
               ycmd-server-command `("python3" "-u" ,(expand-file-name "~/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd"))
               mohkale-ycmd-map (make-sparse-keymap))

         :config
         ;; (ycmd-toggle-force-semantic-completion)

         (leader/with-prefix mohkale--server-leader-key
           (leader/set-keys-for-mode 'ycmd-mode
             "y" 'ycmd-mode
             "Y" 'global-ycmd-mode
             "n" 'ycmd-open
             "k" 'ycmd-close
             "v" 'ycmd-version
             "b" 'ycmd-parse-buffer
             "c" 'ycmd-load-conf-file
             "C" 'ycmd-clear-compilation-flag-cache
             "s" 'ycmd-show-debug-info
             "d" 'ycmd-show-documentation
             "l" 'ycmd-toggle-log-enabled
             "r" 'ycmd-restart-semantic-server
             "t" 'ycmd-get-type
             "." 'ycmd-completer ;; completing-read all ycmd requests
             "SPC" 'ycmd-toggle-force-semantic-completion
             "C-r" 'ycmd-refactor-rename
             "C-c" 'ycmd-display-completions
             "gg" 'ycmd-goto
             "gG" 'ycmd-goto-imprecise
             "gt" 'ycmd-goto-type
             "gd" 'ycmd-goto-definition
             "gD" 'ycmd-goto-declaration
             "gr" 'ycmd-goto-references
             "gi" 'ycmd-goto-include
             "gI" 'ycmd-goto-implementation)

           (leader/declare-prefix-for-mode* 'ycmd-mode
             ""  "ycmd"
             "g" "jump")))
     #+END_SRC

**** company-ycmd
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'ycmd
         (use-package company-ycmd
           :ensure t
           :defer  t))
     #+END_SRC

**** flycheck-ycmd
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'ycmd
         (use-package flycheck-ycmd
           :ensure t
           :defer  t
           :hook (ycmd-mode . flycheck-ycmd-setup)))
     #+END_SRC

*** vc
    #+BEGIN_SRC emacs-lisp
      (use-package vc
        :defer t
        :commands (vc-annotate              ;; history of current file
                   vc-create-tag
                   vc-delete-file
                   vc-diff                  ;; diff current file
                   vc-dir                   ;; status of directory
                   vc-ediff                 ;; ediff current file
                   vc-ignore                ;; prompt and exclude file
                   vc-log-incoming          ;; log for pull commits
                   vc-log-outgoing          ;; log for push commits
                   vc-merge
                   vc-next-action           ;; makes a commit... annoyingly named
                   vc-print-log             ;; log of commits affecting current file
                   vc-print-root-log        ;; log of all commits in project
                   vc-push
                   vc-region-history        ;; log of commits affecting region in file
                   vc-register              ;; add file
                   vc-retrieve-tag
                   vc-revert                ;; undo changes to working files... permenently
                   vc-revision-other-window ;; view file in previous tag/commit
                   vc-root-diff
                   vc-switch-backend        ;; not using git... for shame :P
                   vc-update-change-log)
        :init
        ;;; include vc leader key in defaults leader keys
        (leader/declare-prefix "V" "version control")

        (leader/with-prefix leader-diff-mode-prefix
          (leader/set-keys
            ;; "=v" 'vc-ediff
            "v" 'vc-diff))

        (push 'vc-annotate-mode mohkale--whitespace-exempt-modes)
        (push 'vc-git-log-view-mode mohkale--whitespace-exempt-modes)

        ;; need to require for bindings to show up :(
        :config
        (require 'vc-git) ;; supported

        (leader/set-keys "V" vc-prefix-map)

        (general-define-key
          :keymaps 'vc-prefix-map
          "C-=" 'vc-ediff
          "r"   'vc-rename-file
          "R"   'vc-retrieve-tag)

        (advice-add 'vc-region-history :after (lambda (&rest args)
                                                (when (evil-visual-state-p)
                                                  (evil-exit-visual-state))))

        (setq vc-ignore-dir-regexp
              (format "%s\\|%s"
                      vc-ignore-dir-regexp
                      tramp-file-name-regexp))

        ;;; annotations
        ;; pops up a buffer showing the most recent changes for every line
        ;; in the current file alongside the commit which made those changes.
        (evil-set-initial-state 'vc-annotate-mode 'motion)

        (general-define-key
          :states  'motion
          :keymaps 'vc-annotate-mode-map
          "C-j" 'vc-annotate-prev-revision ;; older revisions
          "C-k" 'vc-annotate-next-revision ;; newer revisions
          "C-t" 'vc-annotate-toggle-annotation-visibility
          "RET" 'vc-annotate-goto-line

          "d" 'vc-annotate-show-diff-revision-at-line
          "D" 'vc-annotate-show-changeset-diff-revision-at-line
          "t" 'vc-annotate-toggle-annotation-visibility)

        (leader/declare-prefix-for-mode!* 'vc-annotate-mode
          "g" "goto")

        (leader/set-keys-for-mode! 'vc-annotate-mode
          "m"     'vc-next-action
          "l"     'vc-annotate-show-log-revision-at-line
          "d"     'vc-annotate-show-diff-revision-at-line
          "D"     'vc-annotate-show-changeset-diff-revision-at-line
          "t"     'vc-annotate-toggle-annotation-visibility
          "gg"    'vc-annotate-goto-line
          "gc"    'vc-annotate-revision-at-line
          "gp"    'vc-annotate-revision-previous-to-line
          "gl"    'vc-annotate-show-log-revision-at-line
          "gG"    'vc-annotate-working-revision
          "g SPC" 'vc-annotate-working-revision)

        ;;; vc-directory
        ;; check status of files for an entire directory
        (evil-set-initial-state 'vc-dir-mode 'motion)

        (general-define-key
          :states  'motion
          :keymaps 'vc-dir-mode-map

          "a" 'vc-register ;; git add FILE
          "d" 'vc-diff
          "=" 'vc-diff
          "Q" 'vc-dir-kill-dir-status-process
          "i" 'vc-dir-ignore
          "x" 'vc-dir-kill-line

          ;; vc-dir-search
          "C-s" 'vc-dir-isearch-regexp
          "M-s" 'vc-dir-query-replace-regexp

          "A" 'vc-dir-mark-all-files
          "m" 'vc-dir-mark
          "U" 'vc-dir-unmark-all-files
          "u" 'vc-dir-unmark
          ;; "t" 'vc-dir-toggle-mark ;; mouse event
          "<backspace>" 'vc-dir-unmark-file-up

          "p" 'vc-pull
          "P" 'vc-push

          "o"   'vc-dir-display-file
          "RET" 'vc-dir-find-file

          "C-j" 'vc-dir-next-line
          "C-k" 'vc-dir-previous-line
          "M-j" 'vc-dir-next-directory
          "M-k" 'vc-dir-previous-directory)

        (leader/set-keys-for-mode! 'vc-dir-mode
          "i" 'vc-log-incoming
          "o" 'vc-log-incoming
          "l" 'vc-print-log
          "L" 'vc-print-root-log
          "D" 'vc-root-diff
          "d" 'vc-diff
          "h" 'vc-dir-hide-up-to-date
          "u" 'vc-update ;; don't understand
          "m" 'vc-next-action)

        ;;; history + log
        ;; despite being different modes and using different maps, theses both incorporate
        ;; basically the same functions to accomplish the same things, so use the same config
        ;; for both of them.
        (dolist (tuple '((vc-git-region-history-mode . vc-git-region-history-mode-map)
                         ;; opens a log buffer showing all the commits affecting the highlighted
                         ;; region in the current file. It also shows the diffs for each commit.
                         (vc-git-log-view-mode       . vc-git-log-view-mode-map)
                         ;; shows all the previous commits alongside their commit messages
                         ))
          (let ((mode (car tuple))
                (kmap (cdr tuple)))
            (evil-set-initial-state mode 'motion)

            (general-define-key
              ;;; WARN unknown functions
              ;;    * log-view-modify-change-comment
              :states  'motion
              :keymaps kmap

              "q" 'quit-window
              "d" 'log-view-diff
              "=" 'log-view-diff
              "o" 'log-view-find-revision ; open current file at current commit

              "<return>" 'log-view-toggle-entry-display
              "<tab>"    'log-view-toggle-entry-display

              ;; move to next message, then reallign to top
              ;; (kbd "C-j") (lambda () (interactive) (log-view-msg-next)
              ;;               (call-interactively 'evil-scroll-line-to-top))
              "C-j" 'log-view-msg-next
              "C-k" 'log-view-msg-prev

              "M-j" 'log-view-file-next
              "M-k" 'log-view-file-prev

              "C-M-j" 'diff-hunk-next
              ;; TODO reallign diff to propper location on move down without trapping on a single diff
              ;; (kbd "M-j") (lambda () (interactive) (diff-hunk-next)
              ;;               (call-interactively 'evil-scroll-line-to-top)
              ;;               (evil-previous-line 3))
              "C-M-k" (lambda () (interactive) (diff-hunk-prev) (evil-previous-line 3)))

            (leader/set-keys-for-mode! mode
              "p" 'log-view-diff-changeset
              "a" 'log-view-annotate-version
              "m" 'log-view-toggle-mark-entry
              "s" 'diff-goto-source)))

        ;;; making commits... why name it log :P
        (dolist (tuple '((vc-git-log-edit-mode . vc-git-log-edit-mode-map)))
          (let ((mode (car tuple))
                (kmap (cdr tuple)))
            (evil-set-initial-state mode 'insert)

            (general-define-key
              :states  'normal
              :keymaps kmap
              "C-q" 'log-edit-kill-buffer
              "M-s" 'log-edit-next-comment
              "M-r" 'log-edit-previous-comment
              "C-s" 'log-edit-comment-search-forward
              "C-r" 'log-edit-comment-search-backward
              "M-0" 'evil-beginning-of-line)

            ;; (evil-redirect-digit-argument kmap "0" 'log-edit-beginning-of-line)

            (leader/declare-prefix-for-mode* mode
              "mi" '("insert" . "insert shortcuts")
              "mt" '("toggle" . "toggle commit status"))

            (leader/set-keys-for-mode! mode
              "d" 'log-edit-show-diff
              "f" 'log-edit-show-files
              "?" 'log-edit-mode-help
              "SPC" 'log-edit-done
              "DEL" 'log-edit-kill-buffer

              "ic" 'log-edit-insert-changelog
              "if" 'log-edit-insert-filenames
              "iC" 'log-edit-insert-changelog-entries
              "iT" 'log-edit-insert-cvs-rcstemplate
              "it" 'log-edit-insert-cvs-template
              "iF" 'log-edit-insert-filenames-without-changelog
              "im" 'log-edit-insert-message-template

              "ta" 'vc-git-log-edit-toggle-amend
              "ts" 'vc-git-log-edit-toggle-signoff))))
    #+END_SRC

*** ztree
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ztree
        :ensure t
        :defer  t
        :config
        (evil-set-initial-state 'ztree-mode 'motion)

        (general-define-key
          :states  'motion
          :keymaps 'ztree-mode-map
          "gr"    'ztree-refresh-buffer
          "j"     'ztree-next-line
          "k"     'ztree-previous-line
          "gh"    'ztree-move-up-in-tree
          "gl"    'ztree-next-line
          "RET"   'ztree-dir-open-dired-at-point
          "TAB"   'ztree-perform-action
          "M-TAB" 'ztree-perform-soft-action
          "DEL"   'ztree-move-up-in-tree)

        (leader/set-keys-for-mode! 'ztree-mode
          "TAB" 'ztree-jump-side
          "n"   'ztree-dir-widen-to-parent
          "w"   'ztree-dir-narrow-to-dir
          "h"   'ztree-dir-toggle-show-filtered-files))
    #+END_SRC

*** hydra
    #+BEGIN_SRC emacs-lisp
      (use-package hydra
        :ensure t
        :defer  t
        :commands defhydra
        :config
        (setq lv-use-separator t))

      (use-package pretty-hydra
        :ensure t
        :defer  t)
    #+END_SRC

** languages
*** elisp
**** elisp-slime-nav
     #+BEGIN_SRC emacs-lisp
       (use-package elisp-slime-nav
         :ensure t
         :defer  t
         :hook (elisp-mode . elisp-slime-nav-mode)
         :config
         (leader/declare-prefix-for-mode! 'emacs-lisp-mode
           "h"  "describe-symbol-at-point")

         (leader/set-keys-for-mode! 'emacs-lisp-mode
           "gp" 'elisp-slime-nav-find-elisp-thing-at-point
           "h" 'elisp-slime-nav-describe-elisp-thing-at-point))
     #+END_SRC

**** evil-lisp-state
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package evil-lisp-state
         :ensure t
         :defer  t
         :init
         (leader/set-keys-for-mode! 'emacs-lisp-mode
           "el" 'lisp-state-eval-sexp-end-of-line
           "." 'lisp-state-toggle-lisp-state))
     #+END_SRC

**** pp
     #+BEGIN_SRC emacs-lisp
       (use-package pp
         :defer t
         :init
         (leader/with-prefix "k"
           (leader/set-keys
             "m" 'pp-macroexpand-last-sexp
             "M" 'pp-macroexpand-expression
             "x" 'pp-eval-last-sexp
             "X" 'pp-eval-expression))

         (with-eval-after-load 'elisp-mode
           (leader/set-keys-for-mode! '(emacs-lisp-mode lisp-interaction-mode)
             "eM" 'pp-macroexpand-expression
             "em" 'pp-macroexpand-last-sexp
             "ex" 'pp-eval-last-sexp
             "eX" 'pp-eval-expression)))
     #+END_SRC

**** paredit
     #+BEGIN_SRC emacs-lisp
       (use-package paredit
         :ensure t
         :defer  t
         :hook (emacs-lisp-mode . paredit-mode)
         :config
         (general-define-key
           :keymaps 'paredit-mode-map
           "C-<up>"    nil
           "C-<down>"  nil
           "C-<left>"  nil
           "C-<right>" nil
           "C-("       nil
           "C-)"       nil)

         ;; M-( wraps the next argument in parentheses
         ;; M-) closes the current argument, trims any
         ;;     trailing whitespace and inserts a newline
         ;; M-" same as " but then trims whitespace and inserts a newline
         (general-define-key
           :keymaps 'paredit-mode-map
           :states 'insert
           "<delete>" 'paredit-backward-delete
           "M-<delete>" 'paredit-forward-delete
           "C-<delete>" 'paredit-backward-kill-word
           ;; "C-M-<delete>" 'paredit-forward-kill-word
           ;; damn you windows
           ;; just use paredit forward, then kill backward
           "C-M-k" 'paredit-kill ;; forward body
           "<return>" 'paredit-newline)

         (general-define-key
           :keymaps 'paredit-mode-map
           :states 'normal
           "gsh" '(paredit-splice-sexp-killing-backward :which-key "splice-sexp-forward")
           "gsl" '(paredit-splice-sexp-killing-forward :which-key "splice-sexp-backward"))

         (general-define-key
           :keymaps 'paredit-mode-map
           :states '(normal insert)
           ;; movement
           ;; "C-h" 'backward-char
           ;; "C-l" 'forward-char
           "C-j" 'paredit-newline
           "C-M-h" 'paredit-backward
           "C-M-l" 'paredit-forward
           "C-<left>" 'paredit-backward
           "C-<right>" 'paredit-forward

           ;; transformation
           ;;; kill or wrap surrounding parentheses
           "C-S-K" 'paredit-splice-sexp
           "C-S-J" 'paredit-wrap-round
           ;;; include previous or next arguments in current sexp
           "C-S-H" 'paredit-backward-slurp-sexp
           "C-S-L" 'paredit-forward-slurp-sexp
           ;;; exclude previous or next arguments from current sexp
           "C-M-S-H" 'paredit-backward-barf-sexp
           "C-M-S-L" 'paredit-forward-barf-sexp

           "C-S-S" 'paredit-split-sexp
           "C-S-M-J" 'paredit-join-sexps ;; immeadiately with expression b4 point

           ;; splice next argument after point, deleting
           ;; arguments both before and after it
           ;; a cool shortcut, but not really necessary
           ;; "M-r"   'paredit-raise-sexp
           ))
     #+END_SRC

**** elisp-mode
     #+BEGIN_SRC emacs-lisp
       (use-package elisp-mode
         :straight (elisp-mode :type built-in)
         :defer t
         :init
         (add-hook 'emacs-lisp-mode-hook #'electric-pair-mode)

         (leader/with-prefix "k"
           (leader/set-keys
             "e" 'eval-last-sexp
             "(" 'eval-print-last-sexp
             ")" 'eval-replace-last-sexp))

         :config
         ;; show lambda as an actual lambda symbol
         (mohkale/define-pretty-symbols-for-mode 'lisp-interaction-mode
           ("lambda" . ?λ))

         (mohkale/define-pretty-symbols-for-mode 'emacs-lisp-mode
           ("lambda" . ?λ))

         (defun eval-replace-last-sexp (&optional prefix)
           "evaluate then replace the preceding sexp"
           (interactive "p")
           (let* ((sexp (preceding-sexp))
                  (value (eval sexp)))
             (kill-sexp -1)
             (insert (format (if prefix "%s" "%S") value))))

         (evil-set-initial-state 'inferior-emacs-lisp-mode 'emacs) ;; ielm

         ;;   (defun elisp-transcript ()
         ;;     ;; source https://www.emacswiki.org/emacs/LispInteractionMode
         ;;     "Make an Emacs Lisp interactive transcript.
         ;; In a new buffer, make a transcript of the Emacs Lisp code by
         ;; evaluating each line and printing the result under it (/a la/
         ;;   TODO fix last sexp in the buffer isn't transcripted
         ;;   `eval-print-last-sexp')."
         ;;     (interactive)
         ;;     (let* ((eval-expression-print-length nil)
         ;;            (eval-expression-print-level nil)
         ;;            (input-buffer (current-buffer))
         ;;            (dest-buffer (get-buffer-create (concat "*Transcript for "
         ;;                                                    (buffer-name input-buffer)
         ;;                                                    "*"))))
         ;;       (save-current-buffer
         ;;         (set-buffer dest-buffer)
         ;;         (lisp-interaction-mode)
         ;;         (delete-region (point-min) (point-max))
         ;;         (insert-buffer-substring input-buffer) ;; `slurp!'
         ;;         (goto-char (point-min))
         ;;         (forward-sexp 1)
         ;;         (while (> (point-max) (point))
         ;;           (condition-case err
         ;;               (evil-adjust-eval-print-last-sexp)
         ;;             (error
         ;;              (insert (format "%s" err))
         ;;              (newline)))
         ;;           (forward-sexp 1)))
         ;;       (display-buffer dest-buffer)))

         (push '(emacs-lisp-mode . 2) mohkale-indent-config)
         (push '(lisp-interaction-mode . 2) mohkale-indent-config)

         (let ((lisp-modes '(emacs-lisp-mode lisp-interaction-mode)))
           (leader/declare-prefix-for-mode!* lisp-modes
             "e" "eval"

             ;; method aliases
             "g" "jump-to-definition"
             "G" "jump-to-definition-other-window")

           (leader/set-keys-for-mode! lisp-modes
             "'" 'ielm
             "c" 'emacs-lisp-byte-compile
             "i" 'indent-sexp

             ;; eval
             "eb" 'eval-buffer
             "ee" 'eval-last-sexp
             "eE" 'eval-replace-last-sexp
             "ef" 'eval-defun
             "er" 'eval-region
             ;; "et" 'elisp-transcript

             ;; jump
             "g" 'xref-find-definitions
             "G" 'xref-find-definitions-other-window

             ;; tests
             "t" 'ert
             "T" 'ert-run-tests-interactively))

         (general-define-key
           :keymaps 'lisp-interaction-mode-map
           "C-j" nil
           "C-(" 'eval-print-last-sexp
           "C-)" 'eval-replace-last-sexp))
     #+END_SRC

*** python
**** company-anaconda
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'python
         (use-package company-anaconda
           :ensure t
           :defer  t
           :commands (company-anaconda)
           :init
           (company/configure-mode (python-mode :major t)
             company-anaconda)))
     #+END_SRC

**** anaconda
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'python
         (use-package anaconda-mode
           :ensure t
           :defer  t
           :hook ((python-mode . anaconda-mode)
                  (python-mode . anaconda-eldoc-mode))
           :config
           (leader/set-keys-for-mode! 'python-mode
             "TAB" 'anaconda-mode-complete
             "hh" 'anaconda-mode-show-doc

             "ga" 'anaconda-mode-find-assignments
             "gr" 'anaconda-mode-find-references
             "gg" 'anaconda-mode-find-definitions
             "gA" 'anaconda-mode-find-assignments-other-window
             "gR" 'anaconda-mode-find-references-other-window
             "gG" 'anaconda-mode-find-definitions-other-window
             "g M-a" 'anaconda-mode-find-assignments-other-frame
             "g M-r" 'anaconda-mode-find-references-other-frame
             "g M-g" 'anaconda-mode-find-definitions-other-frame)))
     #+END_SRC

**** pyimport
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'python
         (use-package pyimport
           :ensure t
           :defer  t
           :init
           (leader/declare-prefix-for-mode! 'python-mode "i" "imports")
           (leader/set-keys-for-mode! 'python-mode
             "ii" 'pytimport-remove-unused
             "iu" 'pyimport-insert-missing)))
     #+END_SRC

**** py-isort
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'python
         (use-package py-isort
             :ensure t
             :defer  t
             :init
             (leader/declare-prefix-for-mode! 'python-mode "i" "imports")
             (leader/set-keys-for-mode! 'python-mode
               "is" 'py-isort-buffer
               "ir" 'py-isort-region)))
     #+END_SRC

**** pip-requirements
     #+BEGIN_SRC emacs-lisp
       (use-package pip-requirements
         :ensure t
         :defer  t
         :mode ("^requirements\\.txt$" . pip-requirements-mode)
         :commands pip-requirements-mode)
     #+END_SRC

**** yapfify
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'python
         (use-package yapfify
           :ensure t
           :defer  t
           :init
           (leader/set-keys-for-mode! 'python-mode
             "y" 'yapfify-buffer
             "Y" 'yapfify-region)))
     #+END_SRC

**** python-mode
     #+BEGIN_SRC emacs-lisp
       (use-package python
         :straight (python :type built-in)
         :defer t
         :hook (python-mode . flycheck-mode)
         :init
         (defalias 'python-repl 'run-python)
         (evil-set-initial-state 'inferior-python-mode 'emacs)

         :config
         (setq python--prettify-symbols-alist nil)

         (mohkale/define-pretty-symbols-for-mode 'python-mode
           ("lambda" . ?λ))

         (defun python-shell-calculate-command ()
           "python3 -i")

         (leader/declare-prefix-for-mode!* 'python-mode
           "n" '("navigate" . "move-point")
           "e" "eval/exec"
           "h" "help"
           "g" "jump"

           "d" "method-signature")

         (leader/set-keys-for-mode! 'python-mode
           "r" 'run-python ;; REPL
           "R" 'python-shell-switch-to-shell
           "m" 'python-mark-defun
           "v" 'python-check
           ;; unbound: python-nav-forward-sexp[-safe]
           ;;          python-nav-backward-sexp[-safe]

           "nh" 'python-nav-forward-statement
           "nj" 'python-nav-forward-block
           "nk" 'python-nav-backward-block
           "nl" 'python-nav-backward-statement
           "n(" 'python-nav-backward-up-list
           "n)" 'python-nav-up-list
           "n0" 'python-nav-beginning-of-block
           "n$" 'python-nav-end-of-block
           "nm" 'python-nav-if-name-main
           "n C-0" 'python-nav-beginning-of-statement
           "n C-$" 'python-nav-end-of-statement
           "n M-j" 'python-nav-forward-defun
           "n M-k" 'python-nav-backward-defun
           ;; "n M-0" 'python-nav-beginning-of-defun
           "n M-$" 'python-nav-end-of-defun

           "hp" 'python-eldoc-at-point
           "s" 'python-describe-at-point

           "ed" 'python-shell-send-defun
           "eb" 'python-shell-send-buffer
           "ef" 'python-shell-send-file
           "er" 'python-shell-send-region
           "ec" 'python-shell-send-string))
     #+END_SRC

*** ruby
    #+BEGIN_SRC emacs-lisp
      (defvar mohkale-ruby-package (if (eq system-type 'gnu/linux) 'enh-ruby 'ruby)
        "determine which mode to use for ruby... enh-ruby is really slowing everything down on windows
      also, for some reason, creating a symlink to ruby on cygwin makes the process unrunnable from emacs,
      it just spits out exec error... my loathing towards windows grows :P
      TODO test out performance of enhanced ruby on linux.")

      (defvar mohkale-ruby-use-lsp 'projectile
        "whether to use `lsp-mode' with ruby-mode.
      set to 'projectile to only activate if in a projectile project with a Gemfile.

      NOTE solargraph... and basically every other ruby completion framework is
           useless if your project doesn't have a Gemfile... that means for simple
           scripts like ~/.emacs.d/bin/tangle, solargraph won't be of any use.
      ")

      (setq mohkale-ruby-mode      (intern (concat (symbol-name mohkale-ruby-package) "-mode"))
            mohkale-ruby-mode-hook (intern (concat (symbol-name mohkale-ruby-mode)    "-hook")))

      (push (cons mohkale-ruby-mode 2) mohkale-indent-config)

      (leader/set-keys "Mr" mohkale-ruby-mode)

      (defmacro when-project-has-gemfile (&rest body)
        `(let ((project-dir (projectile-project-p)))
           (when (and project-dir
                      (file-exists-p (concat project-dir "Gemfile")))
             ,@body)))
    #+END_SRC

**** ruby
     #+BEGIN_SRC emacs-lisp
       (use-package ruby-mode
         :if (eq mohkale-ruby-package 'ruby)
         :straight (ruby :type built-in)
         :defer t
         :mode ("\\.rb$" . ruby-mode)
         :interpreter "ruby"
         :config
         (leader/set-keys-for-mode! 'ruby-mode
           "'" 'ruby-toggle-string-quotes
           "{" 'ruby-toggle-block))
     #+END_SRC

**** enhanced ruby
     #+BEGIN_SRC emacs-lisp
       (use-package enh-ruby-mode
         :if (eq mohkale-ruby-package 'enh-ruby)
         :ensure t
         :defer  t
         :mode ("\\.rb$" . enh-ruby-mode)
         :interpreter "ruby"
         :hook (enh-ruby-mode . flycheck-mode)
         :config
         (setq enh-ruby-deep-indent-paren nil
               enh-ruby-hanging-paren-deep-indent-level 2)

         (leader/declare-prefix-for-mode!* 'enh-ruby-mode
           "i" "insert/format"
           "n" "navigate")

         (leader/set-keys-for-mode! 'enh-ruby-mode
           "m" 'enh-ruby-mark-defun
           "f" 'enh-ruby-find-file
           "e" 'enh-ruby-find-error

           "i <tab>" 'enh-ruby-indent-exp
           "ie" 'enh-ruby-insert-end
           "it" 'enh-ruby-indent-exp

           "nh" 'enh-ruby-backward-sexp
           "nl" 'enh-ruby-forward-sexp
           "nk" 'enh-ruby-up-sexp
           "n0" 'enh-ruby-beginning-of-block
           "n$" 'enh-ruby-end-of-block
           "n M-0" 'enh-ruby-beginning-of-defun
           "n M-$" 'enh-ruby-end-of-defun)

         (general-define-key
           :keymaps 'enh-ruby-mode-map
           "{" nil
           "}" nil)

         (general-define-key
           :keymaps 'enh-ruby-mode-map
           :states 'insert
           "{" 'enh-ruby-electric-brace
           "}" 'enh-ruby-electric-brace)

         (general-define-key
           :keymaps 'enh-ruby-mode-map
           :states '(normal insert)
           "C-{" 'enh-ruby-toggle-block))
     #+END_SRC

**** solargraph
     language server implementation for ruby.

     #+BEGIN_SRC emacs-lisp
       (add-hook mohkale-ruby-mode-hook
                 (defun ruby-enable-lsp-in-projects (&rest args)
                   (when (eq mohkale-ruby-use-lsp 'projectile)
                     (when-project-has-gemfile
                       (call-interactively 'lsp)))))
     #+END_SRC

**** robe
     WARN robe won't work unless your project contains some identifying gemfile
          so if your not getting any completion help, that's probably why.

     #+BEGIN_SRC emacs-lisp :tangle no
       (with-eval-after-load mohkale-ruby-mode
         (use-package robe
           :ensure t
           :defer  t
           :init
           (add-hook mohkale-ruby-mode-hook
                     (defun ruby-robe-enable-in-projects (&rest args)
                       (unless (eq mohkale-ruby-use-lsp 'projectile)
                         (when-project-has-gemfile
                           (call-interactively 'robe-mode)))))

           :config
           (company/configure-mode (robe-mode)
             company-robe)

           (leader/declare-prefix-for-mode! mohkale-ruby-mode "g" "jump/goto")

           (leader/set-keys-for-mode! mohkale-ruby-mode
             "rs" 'robe-start ;; REPL
             "h" 'robe-doc

             ;; jumping
             "SPC" 'robe-ask
             "gg" 'robe-jump
             "gm" 'robe-jump-to-module)))
     #+END_SRC

**** inf-ruby
     #+BEGIN_SRC emacs-lisp
       (use-package inf-ruby
         :ensure t
         :defer  t
         :init
         (defalias 'ruby-repl 'inf-ruby)
         (push 'inf-ruby-mode mohkale--whitespace-exempt-modes)

         (leader/declare-prefix-for-mode!
           mohkale-ruby-mode "r" "REPL")

         (leader/set-keys-for-mode! mohkale-ruby-mode
           "rr" 'inf-ruby
           "rg" 'inf-ruby-console-gem
           "rz" 'inf-ruby-console-zues
           "ra" 'inf-ruby-console-auto
           "rR" 'inf-ruby-console-rails
           "rk" 'inf-ruby-console-racksh
           "rc" 'inf-ruby-console-script
           "rh" 'inf-ruby-console-hanami))
     #+END_SRC

**** ruby-tools
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load mohkale-ruby-mode
         (use-package ruby-tools
           :ensure t
           :defer  t
           :init
           (add-hook mohkale-ruby-mode-hook #'ruby-tools-mode)

           :config
           (leader/declare-prefix-for-mode!
             mohkale-ruby-mode "i" "insert")

           (leader/set-keys-for-mode! mohkale-ruby-mode
             "i:" 'ruby-tools-to-symbol
             "i{" 'ruby-tools-interpolate
             "i <backspace>" 'ruby-tools-clear-string
             "i\"" 'ruby-tools-to-double-quote-string
             "i'" 'ruby-tools-to-single-quote-string)))
     #+END_SRC

**** bundle
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load mohkale-ruby-mode
         (use-package bundler
           :ensure t
           :defer  t
           :init
           (leader/declare-prefix-for-mode!*
             mohkale-ruby-mode "b" "bundler")

           (leader/set-keys-for-mode! mohkale-ruby-mode
             "rb" 'bundle-console
             "bf" 'bundle-open
             "bi" 'bundle-install
             "bu" 'bundle-update
             "bc" 'bundle-check)))
     #+END_SRC

**** ruby-electric
     #+begin_src emacs-lisp
       (with-eval-after-load mohkale-ruby-mode
         (use-package ruby-electric
           :ensure t
           :defer  t
           :init
           (add-hook mohkale-ruby-mode-hook #'ruby-electric-mode)

           :config
           ;;; why poison the standard ruby map instead of using ruby-electric-mode-map?
           (defun ruby-electric-setup-keymap ()
             (general-define-key
               :keymaps 'ruby-mode-map
               " " 'ruby-electric-space
               ;; "{" 'ruby-electric-curlies
               "(" 'ruby-electric-matching-char
               "[" 'ruby-electric-matching-char
               ;; "\"" 'ruby-electric-quote
               ;; "\'" 'ruby-electric-quote
               "|" 'ruby-electric-bar
               (kbd "RET") 'ruby-electric-return
               ;; (kbd "C-j") 'ruby-electric-return
               ;; (kbd "C-m") 'ruby-electric-return
               "}" 'ruby-electric-close-matching-char
               ")" 'ruby-electric-close-matching-char
               "]" 'ruby-electric-close-matching-char))))
     #+end_src

*** HTML
**** web-mode
     #+BEGIN_SRC emacs-lisp
       (use-package web-mode
         :ensure t
         :defer  t
         :mode "\\.erb\\|\\.html"
         :init
         (leader/set-keys "Mh" 'web-mode)

         :config
         (general-define-key
           :keymaps 'web-mode-map
           :states 'normal
           "<tab>" 'web-mode-fold-or-unfold)

         (leader/declare-prefix-for-mode!* 'web-mode
           "m" "mark"
           "d" "delete/kill"
           "D" "DOM"
           "n" "navigate"
           "na" "attributes"
           "nt" "tags"
           "r" "refactor"
           "i" "insert")

         (leader/set-keys-for-mode! 'web-mode
           ;; unbound:
           ;;   * web-mode-buffer-highlight
           ;;   * web-mode-element-mute-blanks
           ;;   * web-mode-block-beginning
           ;;   * web-mode-block-end
           ;;   * web-mode-block-insert
           ;;   * web-mode-block-kill
           ;;   * web-mode-block-next
           ;;   * web-mode-block-previous
           ;;   * web-mode-block-select
           ;;   * web-mode-block-transpose
           ;;   * web-mode-navigate
           ;;
           ;; WARN the block commands don't seem to do anything

           ";"     'web-mode-comment-or-uncomment
           "f"     'web-mode-fold-or-unfold
           "l"     'web-mode-file-link
           "b"     'web-mode-element-close ; insert matching tag for body at point
           "M-r"   'web-mode-reload
           "<tab>" 'web-mode-buffer-indent
           "C-M-i" 'web-mode-snippet-insert
           ;; "tw" 'web-mode-whitespace-show

           ;; insert
           "ia" 'web-mode-attribute-insert
           "ip" 'web-mode-element-wrap ; wrap current element in a new element with name from prompt
           "ic" 'web-mode-element-clone
           "ie" 'web-mode-element-insert
           "ie" 'web-mode-element-insert-at-point ; converts word before point to tag

           ;; refactor/insert
           "rs" 'web-mode-tag-attributes-sort
           "r(" 'web-mode-element-extract  ; add linebreak before every tag in body
           "r)" 'web-mode-element-contract ; collapse tag into a single line
           "rn" 'web-mode-dom-normalize
           "ra" 'web-mode-attribute-transpose
           "re" 'web-mode-element-transpose
           "rr" 'web-mode-element-rename
           "rf" 'web-mode-fold-or-unfold
           "rF" 'web-mode-element-children-fold-or-unfold ; collapse the children of current tags body, not body itself

           ;; delete
           "da" 'web-mode-attribute-kill
           "de" 'web-mode-element-kill
           "dp" 'web-mode-element-vanish ; delete element, but move body up a level instead of erasing it

           ;; DOM
           "Da" 'web-mode-dom-apostrophes-replace
           "Ds" 'web-mode-dom-entities-replace
           "Dq" 'web-mode-dom-quotes-replace
           "D/" 'web-mode-dom-xpath
           ; shows the xpath of the current element

           "hd" 'web-mode-dom-errors-show
           "hj" 'web-mode-jshint

           ;; mark
           "mT" 'web-mode-tag-select
           ; only works while between <>
           "mt" 'web-mode-element-select
           "ma" 'web-mode-attribute-select
           "mb" 'web-mode-element-content-select
           "mm" 'web-mode-mark-and-expand

           ;; navigation
           "n0" 'web-mode-element-beginning
           "n$" 'web-mode-element-end
           "nn" 'web-mode-tag-match
           "nh" 'web-mode-element-next
           "nj" 'web-mode-element-child
           "nk" 'web-mode-element-previous
           "nh" 'web-mode-element-parent
           ;; "nt" 'web-mode-dom-traverse
           "na0" 'web-mode-attribute-beginning
           "na$" 'web-mode-attribute-end
           "nah" 'web-mode-attribute-previous
           "nal" 'web-mode-attribute-next
           "nt0" 'web-mode-tag-beginning
           "nt$" 'web-mode-tag-end
           "nth" 'web-mode-tag-previous
           "ntl" 'web-mode-tag-next))
     #+END_SRC

**** emmet-mode
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'web-mode
         (use-package emmet-mode
           :ensure t
           :defer  t
           :hook (web-mode . emmet-mode)
           :config
           (general-define-key
             :keymaps 'emmet-mode-keymap
             "C-j" nil)

           (leader/with-major-mode-prefix
             (leader/declare-prefix-for-mode 'emmet-mode
               "e" "emmet" "emmet mode")

             (leader/set-keys-for-mode 'emmet-mode
               "." 'emmet-expand-line
               ;; "'" 'emmet-preview
               "ee" 'emmet-expand-line
               "ep" 'emmet-preview
               "ew" 'emmet-wrap-with-markup
               "en" 'emmet-next-edit-point
               "eN" 'emmet-prev-edit-point))))
     #+END_SRC

**** company-web
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'web-mode
         (use-package company-web
           :ensure t
           :defer  t
           :config
           (company/configure-mode (web-mode :major t)
             company-web-html company-yasnippet)))
     #+END_SRC

**** simple-httpd
     #+BEGIN_SRC emacs-lisp
       (use-package simple-httpd
         :ensure t
         :defer  t
         :config
         (setq httpd-port 35343))
     #+END_SRC

**** web-beautify
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'web-mode
         (use-package web-beautify
           :ensure t
           :defer  t
           :init
           (leader/declare-prefix-for-mode! 'web-mode "rb" "beautify")

           (leader/set-keys-for-mode! 'web-mode
             "rbh" 'web-beautify-htlm
             "rbj" 'web-beautify-js
             "rbc" 'web-beautify-css)))
     #+END_SRC

*** org
    Yes, org mode is it's own language. Even if you don't think it is, it is :P

**** org-agenda
     #+BEGIN_SRC emacs-lisp
       (use-package org-agenda
         :straight (org-agenda :type built-in)
         :defer t
         :config
         (evil-set-initial-state 'org-agenda-mode 'normal)

         (leader/declare-prefix-for-mode!* 'org-agenda-mode
           "c" '("clock/calendar" . "time management based prefix keys")
           "m" '("modes" . "minor modes to support agenda mode")
           "p" '("priority" . "alter/view an entries priority")
           "/" '("search/filter" . "search / filter org agenda"))

         (leader/set-keys-for-mode! 'org-agenda-mode
           "." 'hydra-org-agenda/body
           "A" 'org-agenda-append-agenda
           "C" 'org-agenda-columns

           ;;; filter/search
           "/c" 'org-agenda-filter-by-category
           "/e" 'org-agenda-filter-by-effort
           "//" 'org-agenda-filter-by-regexp
           ;; "/t" 'org-agenda-filter-by-tag
           "/:" 'org-agenda-filter-by-tag
           "/h" 'org-agenda-filter-by-top-headline
           "/R" 'org-agenda-filter-remove-all

           "/?" 'org-agenda-bulk-mark-regexp
           "/a" 'org-agenda-bulk-mark-all
           "/u" 'org-agenda-bulk-unmark-all

           ;;; clock/calendar/diary
           "cp" 'org-agenda-date-prompt
           "cc" 'org-agenda-clock-in
           "co" 'org-agenda-clock-out
           "cC" 'org-agenda-clock-out ; alias
           "ct" 'org-timer-set-timer
           "c M-c" 'org-agenda-convert-date

           ;;; agenda minor modes
           "ma" 'org-agenda-archives-mode
           "md" 'org-agenda-day-view
           "mc" 'org-agenda-clockreport-mode
           "mt" 'org-agenda-entry-text-mode
           "mf" 'org-agenda-follow-mode
           "ml" 'org-agenda-log-mode
           "mw" 'org-agenda-week-view
           "my" 'org-agenda-year-view
           "mm" 'org-agenda-month-view

           ;;; priorities
           "pp" 'org-agenda-priority
           "pu" 'org-agenda-priority-up
           "pd" 'org-agenda-priority-down)

         (general-define-key
           :keymaps 'org-agenda-mode-map
           :states  'normal
           ;;; globally useful
           "q" 'org-agenda-exit
           "." 'org-agenda-goto-today
           "v" 'org-agenda-view-mode-dispatch
           "RET" 'org-agenda-goto
           "TAB" 'org-agenda-switch-to
           "M-c" 'org-agenda-clock-goto ; jumped to clocking task
           "C-t" 'org-agenda-todo
           "M-t" 'org-agenda-show-tags

           ;;; marking
           "C-<SPC>" 'org-agenda-bulk-mark
           "M-<SPC>" 'org-agenda-bulk-unmark
           "C-M-SPC" 'org-agenda-bulk-action

           ;;; undo/redo
           "C-r" 'org-agenda-redo
           "u"   'org-agenda-undo
           "gr"        'org-agenda-redo-all

           ;;; toggle displays
           "gm" 'org-agenda-phases-of-moon
           "C-l" 'org-agenda-log-mode
           "M-l" 'org-agenda-toggle-time-grid
           "M-h" 'org-agenda-holidays
           "M-s" 'org-agenda-sunrise-sunset

           ;; edit org items
           "M-e" 'org-agenda-set-effort
           "C-a" 'org-agenda-archive-default-with-confirmation

           ;;; notes and insertion
           "a"  'org-agenda-add-note
           "c"  'org-agenda-capture
           "gd" 'org-agenda-goto-date
           "gc" 'org-agenda-goto-calendar

           ;;; movement between lines
           ;;; NOTE org-next/prev-line is used by follow-mode
           "k"      'org-agenda-previous-line
           "j"      'org-agenda-next-line
           "<up>"   'org-agenda-previous-line ; alias
           "<down>" 'org-agenda-next-line     ; alias
           "C-j"    'org-agenda-next-item
           "C-k"    'org-agenda-previous-item

           ;;; move through time in blocks
           "f" 'org-agenda-later
           "F" 'org-agenda-earlier

           "C-f" 'org-agenda-follow-mode
           "M-f" 'org-agenda-recenterstates))
     #+END_SRC

**** org-bullets
     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
         :ensure t
         :defer  t
         :hook (org-mode . org-bullets-mode))
     #+END_SRC

**** org-link-edit
     #+BEGIN_SRC emacs-lisp
       (use-package org-link-edit
         :straight (org-link-edit :type built-in)
         :defer t
         :commands (org-link-edit-forward-slurp
                    org-link-edit-forward-barf
                    org-link-edit-backward-slurp
                    org-link-edit-backward-barf))
     #+END_SRC

**** org-toc
     #+BEGIN_SRC emacs-lisp
       (use-package toc-org
         :ensure t
         :defer  t
         ;; :hook (org-mode . toc-org-mode)
         )
     #+END_SRC

**** org-mode
     #+BEGIN_SRC emacs-lisp
       (use-package org
         :straight (org :type built-in)
         :defer t
         :hook ((org-mode . display-line-numbers-mode)
                (org-mode . hl-todo-mode))
         :init
         ;;; leader keys outside of org mode
         (leader/declare-prefix "o" "org")
         (leader/set-keys
           "oc" 'org-capture
           "oa" 'org-agenda
           "oy" 'org-copy-subtree
           "oY" 'org-cut-subtree)

         :config
         (mohkale/define-pretty-symbols-for-mode 'org-mode
           ("lambda" . ?λ))

         ;; switch to insert state when capturing org templates
         (add-hook 'org-capture-mode-hook (lambda () (evil-append nil)) t)

         (defun org-src--prevent-window-config-being-saved-wrapper (&rest args)
           "prevents org mode from saving and restoring the window config
       sorrunding a source code edit. it's annoyingly frustrating, so turn it off"
           (setq org-src--saved-temp-window-config nil))

         (advice-add 'org-edit-src-code :after #'org-src--prevent-window-config-being-saved-wrapper)

         (when (file-exists-p mohkale-library-of-babel-file)
            (org-babel-lob-ingest mohkale-library-of-babel-file))

          (setq-default org-src-window-setup 'current-window
                        org-babel-python-command "python3")

          (setq org-todo-keywords '((sequence "TODO" "DOING" "VERIFY" "|" "DONE" "DELAGATED" "SKIPPED"))
                org-refile-targets '((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))
                org-outline-path-complete-in-steps nil ; refile in a single go
                org-refile-use-outline-path t  ; show full paths for refiling
                org-cycle-separator-lines 0 ; prevents weird coloring of collapsed trees
                ;; org-blank-before-new-entry '((heading . nil) (plain-list-item . auto))
                ;; break org-cycle-seperator-lines from working automatically
                ;; org-src-tab-acts-natively t ;; tab is native to block language
                ;; native tabs are slow and unreliable... :sad:
                org-default-notes-file (org! "notes.org")
                org-agenda-files (file-expand-wildcards (org! "*.org")))

          (setq org-capture-templates
                `(("f" "File Task" entry (file ,org-default-notes-file)
                   "* TODO %?\n  %a"
                   :kill-buffer t)
                  ("t" "Todo" entry (file ,org-default-notes-file)
                   "* TODO %?\n%U")
                  ("T" "Todo with Clipboard" entry (file ,org-default-notes-file)
                   "* TODO %?\n%U\n   %c")
                  ("h" "Homework" entry (file+headline ,(org! "university.org") "Homework")
                   "* TODO%? %^g\n  DEADLINE: %^{Deadline}t\n  :LOGBOOK:\n  - Added %u\n  :END:"
                   :kill-buffer t)))

         (advice-add 'org-edit-src-code :before (lambda (&rest args)
                                                  (unless (eq evil-state 'normal)
                                                    (evil-normal-state))))

         (defun org-outline-smart-up-level ()
           "when at a heading, move to parent
       otherwise move to current heading."
           (interactive)
           (call-interactively (if (org-at-heading-p)
                                   'outline-up-heading
                                 'outline-previous-heading)))

         ;;  _
         ;; | | __ _ _ __   __ _ _   _  __ _  __ _  ___  ___
         ;; | |/ _` | '_ \ / _` | | | |/ _` |/ _` |/ _ \/ __|
         ;; | | (_| | | | | (_| | |_| | (_| | (_| |  __/\__ \
         ;; |_|\__,_|_| |_|\__, |\__,_|\__,_|\__, |\___||___/
         ;;                |___/             |___/

         (org-babel-do-load-languages
          'org-babel-load-languages
          '((emacs-lisp . t)
            (awk . t)
            (C . t)
            (awk . t)
            (haskell . t)
            (java . t)
            (js . t)
            (ditaa . t)
            (plantuml . t)
            (python . t)
            (ruby . t)
            (sed . t)
            (shell . t)
            (R . t)))

         ;;             _ _       _     _           _ _
         ;;   _____   _(_) |     | |__ (_)_ __   __| (_)_ __   __ _ ___
         ;;  / _ \ \ / / | |_____| '_ \| | '_ \ / _` | | '_ \ / _` / __|
         ;; |  __/\ V /| | |_____| |_) | | | | | (_| | | | | | (_| \__ \
         ;;  \___| \_/ |_|_|     |_.__/|_|_| |_|\__,_|_|_| |_|\__, |___/
         ;;                                                   |___/

         (defmacro evil-org-eol-call-anon (&rest body)
           "define an anonymous function running body at the end of the line"
           `(lambda () (interactive) (end-of-visual-line) ,@body (evil-append nil)))

         (defvar org-clever-return--insert-headings nil
           "when true, returning from the end of a heading
       inserts a heading.")

         (defun org-clever-return (&optional above)
           "depending on the local state, inserts a heading, a table row an item or newline.
       this function is functionally similair to the result of evil-org-eol-call-anon, but
       instead of checking the line after moving to the end of it (which doesn't work for
       folded lines, such as headings), it checks before moving and then inserts the right
       items depending on how things looked where you were."
           (interactive)
           (cl-letf (((symbol-function 'evil-open)
                      (lambda () (call-interactively
                             (if above
                                 'evil-open-above
                               'evil-open-below))))
                     ((symbol-function 'fallback-action)
                      (lambda (&optional interactive)
                        (when (and (line-empty-p)
                                   (not (zerop (column-number (point)))))
                          ;; don't leave a trailing indent on current line unecessarily
                          (remove-all-trailing-whitespace (line-beginning-position)
                                                          (line-end-position)))
                        (if (and interactive (not above))
                            (funcall-interactively
                             'newline-and-indent)
                          (evil-open)))))
             (if (and current-prefix-arg (listp current-prefix-arg))
                 ;; when called with simple prefix, goto
                 ;; fallaback action.
                 (let ((current-prefix-arg nil))
                   (fallback-action))
               (cond ((org-table-p)
                      (org-table-insert-row (not above))
                      (evil-insert nil))

                     ((and org-clever-return--insert-headings
                           (org-at-heading-p))
                      (evil-open)
                      (org-insert-heading))

                     ((org-at-item-p)
                      ;; position of cursor dictates where new point goes
                      (if above
                          (goto-char (line-beginning-position))
                        (goto-char (line-end-position)))
                      (org-insert-item)
                      (evil-append nil))

                     (t (fallback-action (called-interactively-p)))))))

         (defun org-openable-p ()
           (org-element-lineage
            (org-element-context)
            '(footnote-definition
              footnote-reference
              headline
              ;; inlinetask
              link
              timestamp)
            t))

         (defun org-normal-return ()
           (interactive)
           (call-interactively
            (cond
             ((org-openable-p) 'org-open-at-point)
             (t 'evil-ret))))

         (general-define-key
           :keymaps 'org-mode-map
           :states 'insert
           "<return>" 'org-clever-return
           "DEL" 'org-delete-backward-char
           "<S-backspace>" 'org-delete-char)

         (general-define-key
           :keymaps 'org-mode-map
           :states 'normal
           "RET" 'org-normal-return
           "o" (lambda () (interactive)
                 (let ((org-clever-return--insert-headings t))
                   (org-clever-return nil)))
           "O" (lambda () (interactive)
                 (let ((org-clever-return--insert-headings t))
                   (org-clever-return t)))
           "M-u" 'org-metaleft
           "M-i" 'org-metadown
           "M-o" 'org-metaup
           "M-p" 'org-metaright
           "M-U" 'org-shiftmetaleft
           "M-I" 'org-shiftmetadown
           "M-O" 'org-shiftmetaup
           "M-P" 'org-shiftmetaright)

         (general-define-key
           :keymaps 'org-mode-map
           :states '(normal insert)
           ;; NOTE meta keys insert headings with changed priority, shift keys insert todo headings
           ;; FIXME prefix arg doesn't work
           ;; FIXME doesn't work when on a heading
           "C-<return>"   (evil-org-eol-call-anon (org-insert-heading nil))
           "C-M-<return>" (evil-org-eol-call-anon
                           (org-insert-heading nil)
                           (if current-prefix-arg
                               (org-metaleft)
                             (org-metaright)))
           "C-S-<return>"   (evil-org-eol-call-anon (org-insert-todo-heading nil))
           "C-S-M-<return>" (evil-org-eol-call-anon
                             (org-insert-todo-heading nil)
                             (if current-prefix-arg
                                 (org-metaleft)
                               (org-metaright)))
           "C-." 'org-toggle-heading)

         (general-define-key
           :keymaps 'org-mode-map
           ;; "C-M-<return>" 'org-meta-return
           "C-s"          'org-sort
           "<C-tab>"      nil
           "M-S-<return>" nil
           "C-e"          nil
           "M-e"          nil
           "M-h"          nil
           "C-j"          nil)

         (general-define-key
           ;; most bindings stolen from: https://github.com/edwtjo/evil-org-mode
           :keymaps 'org-mode-map
           :states '(normal visual)
           "gh" 'org-outline-smart-up-level
           "gj" 'org-forward-heading-same-level
           "gk" 'org-backward-heading-same-level
           "gl" 'outline-next-visible-heading
           "g." 'hydra-org-navigate/body
           ;; "t" 'org-todo ; I use this too often
           ;; "T" 'org-insert-todo-heading ; rebound to C-S-<return>
           "$" 'org-end-of-line
           "^" 'org-beginning-of-line)

         (general-define-key
           :keymaps 'org-mode-map
           :states '(normal visual)
           :predicate '(or (org-table-p)
                           (org-at-heading-p)
                           (org-at-item-p))
           "C-j" 'org-metadown
           "C-k" 'org-metaup)

         (general-define-key
           :keymaps 'org-mode-map
           :states '(normal visual emacs)
           "<tab>" 'org-cycle
           "TAB" 'org-cycle
           "<S-tab>" 'org-shifttab)

         (general-define-key
           :keymaps 'org-mode-map
           :states '(normal visual)
           :predicate '(org-at-heading-p)
           ">" 'org-demote-subtree
           "<" 'org-promote-subtree)

         (general-define-key
           :keymaps 'org-mode-map
           :states '(normal insert)
           :predicate '(org-at-heading-p)
           "C->" 'org-demote-subtree
           "C-<" 'org-promote-subtree)

         ;;  _                _                _
         ;; | | ___  __ _  __| | ___ _ __     | | _____ _   _ ___
         ;; | |/ _ \/ _` |/ _` |/ _ \ '__|____| |/ / _ \ | | / __|
         ;; | |  __/ (_| | (_| |  __/ | |_____|   <  __/ |_| \__ \
         ;; |_|\___|\__,_|\__,_|\___|_|       |_|\_\___|\__, |___/
         ;;                                             |___/

         (leader/declare-prefix-for-mode!* 'org-mode
           "c" "clock/calendar"
           "e" "export"
           "h" "headings"
           "i" "insert"
           "S" "subtrees"
           "t" "tables"
           "m" "mark/move"
           "N" "narrow"
           "x" "text"

           "td" "delete"
           "ti" "insert"
           "tt" "toggle")

         (leader/set-keys-for-mode! 'org-mode
           "RET" 'org-ctrl-c-ret
           "SPC" 'org-display-outline-path
           "!" 'org-time-stamp-inactive
           "'" 'org-edit-special
           "*" 'org-ctrl-c-star
           "," 'org-ctrl-c-ctrl-c
           "-" 'org-ctrl-c-minus
           "." 'org-time-stamp
           "/" 'org-sparse-tree
           ":" 'org-set-tags-command
           "^" 'org-sort
           "A" 'org-archive-subtree
           "a" 'org-agenda
           "b" 'org-tree-to-indirect-buffer
           ;; "C" 'evil-org-recompute-clocks
           "D" 'org-insert-drawer
           "d" 'org-deadline
           "f" 'org-set-effort
           "I" 'org-clock-in
           "H" 'org-shiftleft
           "J" 'org-shiftdown
           "K" 'org-shitup
           "L" 'org-shiftright
           "l" 'org-open-at-point
           "n" 'org-add-note
           "O" 'org-clock-out
           "P" 'org-set-property
           "p" 'org-pomodoro
           "r" 'org-refile
           "R" 'org-refile-goto-last-stored
           "s" 'org-schedule
           "T" 'org-show-todo-tree
           "U" 'org-update-all-dblocks
           "u" 'org-dblock-update
           "C-h" 'org-shiftcontrolleft
           "C-j" 'org-shiftcontroldown
           "C-k" 'org-shiftcontrolup
           "C-l" 'org-shiftcontrolright
           "M-a" 'org-attach
           "M-c" 'org-columns
           "M-p" 'org-delete-property

           "c<" 'org-date-from-calendar
           "c>" 'org-goto-calendar
           "cC" 'org-clock-out
           "cc" 'org-clock-in
           ;; "cf" 'org-clock-modify-effort-estimate
           "cg" 'org-clock-goto
           "ch" 'org-clock-remove-overlays
           "ci" 'org-timer-item
           "cr" 'org-clock-report
           "cs" 'org-clock-display
           "c." 'hydra-org-clock/body
           "c C-c" 'org-clock-cancel

           "ee" 'org-export-dispatch
           "eh" 'org-html-export-to-html

           "hI" 'org-insert-heading
           "hi" 'org-insert-heading-after-current
           "hs" 'org-insert-subheading

           "ia" 'org-attach
           "if" 'org-footnote-new
           ;; "ik" 'insert-keybinding-org
           "il" 'org-insert-link
           "it" 'org-table-create
           ;; "is" 'org-download-screenshot
           ;; "iy" 'org-download-yank

           "ms" 'org-mark-subtree
           "me" 'org-mark-element
           "mb" 'org-babel-mark-block
           "mm." 'hydra-org-navigate/body

           "Nb" 'org-narrow-to-block
           "Ns" 'org-narrow-to-subtree
           "Ne" 'org-narrow-to-element
           "Nw" 'widen

           "Sh" 'org-promote-subtree
           "Sj" 'org-move-subtree-down
           "Sk" 'org-move-subtree-up
           "Sl" 'org-demote-subtree

           "t'"  'org-table-edit-field
           "ta"  'org-table-align
           "tb"  'org-table-blank-field
           "tc"  'org-table-convert
           "tE"  'org-table-export
           "te"  'org-table-eval-formula
           "tH"  'org-table-move-column-left
           "th"  'org-table-previous-field
           "tI"  'org-table-import
           "tJ"  'org-table-move-row-down
           "tj"  'org-table-next-row
           "tK"  'org-table-move-row-up
           "tL"  'org-table-move-column-right
           "tl"  'org-table-next-field
           "tN"  'org-table-create-with-table.el
           "tn"  'org-table-create
           "tp"  'org-plot/gnuplot
           "tr"  'org-table-recalculate
           "ts"  'org-table-sort-lines
           "tw"  'org-table-wrap-region
           "tdc" 'org-table-delete-column
           "tdr" 'org-table-delete-row
           "tic" 'org-table-insert-column
           "ti-" 'org-table-hline-and-move
           "tih" 'org-table-insert-hline
           "tir" 'org-table-insert-row
           "ttf" 'org-table-toggle-formula-debugger
           "tto" 'org-table-toggle-coordinate-overlays

           ;; "xb" 'org-bold
           ;; "xc" 'org-code
           ;; "xi" 'org-italic
           ;; "xr" 'org-clear
           ;; "xs" 'org-strike-through
           ;; "xu" 'org-underline
           ;; "xv" 'org-verbose
           ))
     #+END_SRC

**** org-capture
     #+BEGIN_SRC emacs-lisp
       (use-package org-capture
         :straight (org-capture :type built-in)
         :defer t
         :config
         ;; for some reason, the header for org-capture specifically uses
         ;; the org-capture-mode-map, meaning my leader key shortcuts won't
         ;; show up in it :(. Fix that here.
         (add-hook 'org-capture-mode-hook
                   (defun org-capture--fix-header (&rest args)
                     (setq-local
                      header-line-format
                      (substitute-command-keys
                       "Capture buffer. Finish `\\[org-capture-finalize]', \
       refile `\\[org-capture-refile]', abort `\\[org-capture-kill]'."))))

         (leader/with-major-mode-prefix
           (leader/set-keys-for-mode 'org-capture-mode
             "," 'org-capture-finalize
             "q" 'org-capture-kill
             "r" 'org-capture-refile)))
     #+END_SRC

**** org-src
     #+BEGIN_SRC emacs-lisp
       (use-package org-src
         :straight (org-src :type built-in)
         :defer t
         :config
         (leader/with-major-mode-prefix
           (leader/set-keys-for-mode 'org-src-mode
             "," 'org-edit-src-exit
             "q" 'org-edit-src-abort
             "s" 'org-edit-src-save)))
     #+END_SRC

**** org-projectile
     #+BEGIN_SRC emacs-lisp
       (use-package org-projectile
         :ensure t
         :defer  t
         :commands (org-projectile-find-todo-file
                    org-projectile-project-todo-entry)
         :init
         (with-eval-after-load 'org
           (add-to-list 'org-capture-templates (org-projectile-project-todo-entry) t)

           (setq org-confirm-elisp-link-function nil
                 org-agenda-files (append org-agenda-files
                                          (delq nil (mapcar (lambda (file) (when (file-exists-p file) file))
                                                            (org-projectile-todo-files))))))

         (leader/declare-prefix*
           "po" "org-projectile-goto-todos"
           "pO" "org-projectile-capture")

         (leader/set-keys
           "op" 'org-projectile-find-todo-file
           ;; "op" 'org-projectile-goto-location-for-project
           "po" 'org-projectile-goto-location-for-project
           ;; "pO" 'org-projectile-helm-template-or-project
           )
         :config
         (setq org-projectile-per-project-filepath
               (defun mohkale--org-projectile-path (project-path)
                 (let* ((project-path (replace-regexp-in-string "/$" "" project-path)))
                   (concat (file-name-nondirectory project-path) ".org"))))

         (org-projectile-per-project)
         (defun org-projectile-find-todo-file (&optional prefix)
           "find the org file for a given project
       by default it'll be the current project. If you're not in a project
       or you pass a PREFIX value, then you'll be prompted for which project
       to visit the TODO file for."
           (interactive "P")
           (let ((project-root (projectile-project-root)))
             (when (or prefix (not project-root))
               (setq project-root
                     ;; (completing-read "Project: " (projectile-relevant-known-projects))
                     (projectile-completing-read
                      "Project: " (occ-get-categories org-projectile-strategy))))

             (when project-root
               (let ((file (org-projectile-get-project-todo-file project-root)))
                 (when (or (file-exists-p file)
                           (y-or-n-p (format "Project TODO file '%s' doesn't exist, make now: "
                                             file)))
                   (find-file file)))))))
     #+END_SRC

*** JSON
    #+BEGIN_SRC emacs-lisp
      (use-package json-mode
        :ensure t
        :defer  t
        :mode "\\.json$"
        :hook (json-mode . flycheck-mode)

        :config
        (leader/set-keys-for-mode! 'json-mode
          "b" 'json-mode-beautify
          "/" 'json-mode-kill-path
          "t" 'json-toggle-boolean
          "<backspace>" 'json-nullify-sexp))
    #+END_SRC

*** vimscript
    #+BEGIN_SRC emacs-lisp
      (use-package vimrc-mode
        :ensure t
        :defer  t
        :mode "\\.vim"
        :hook (vimrc-mode . flycheck-mode)
        :delight (vimrc-mode "vim"))
    #+END_SRC

*** sql
**** sql
     #+BEGIN_SRC emacs-lisp
       (use-package sql
         :ensure t
         :defer  t
         :mode ("\\.sql" . sql-mode)
         :hook (sql-mode . flycheck-mode)
         :init
         (setq sql-sqlite-options '("-interactive"))
         (push 'sql-interactive-mode mohkale--whitespace-exempt-modes)

         (evil-set-initial-state 'sql-interactive-mode 'emacs)
         :config
         ;; see [here](https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client)
         ;; for a guide on how to make quick database access easier. or if you've already got
         ;; an interactive session running, use sql-save-connection to append it to a local
         ;; variable from which you can just paste it in here.
         (leader/declare-prefix-for-mode* 'sql-mode
           "e" "eval/exec"
           "l" "list")

         (leader/set-keys-for-mode! 'sql-mode
           "0" 'sql-beginning-of-statement
           "$" 'sql-end-of-statement
           "i" 'sql-show-sqli-buffer
           "t" 'sql-toggle-pop-to-buffer-after-send-region
           "eb" 'sql-send-buffer
           "ep" 'sql-send-paragraph
           "er" 'sql-send-region
           "es" 'sql-send-string
           "ll" 'sql-list-all
           "lt" 'sql-list-table)

         (leader/set-keys-for-mode! 'sql-interactive-mode
           "t" 'sql-list-table
           "a" 'sql-list-all))

     #+END_SRC

**** sqlup
     upcases SQL specific keywords after completing them.

     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'sql
         (use-package sqlup-mode
           :ensure t
           :defer  t
           :hook ((sql-mode . sqlup-mode)
                  (sql-interactive-mode . sqlup-mode))
           :config
           (leader/declare-prefix-for-mode 'sql-mode
             "u" "upcase")
           (leader/set-keys-for-mode! 'sql-mode
             "ur" 'sqlup-capitalize-keywords-in-region
             "ub" 'sqlup-capitalize-keywords-in-buffer)

           (push "name" sqlup-blacklist)))
     #+END_SRC

**** sqlite-dump
     converts an sqlite database file into the SQL schema required to reproduce it.

     #+BEGIN_SRC emacs-lisp
       (use-package sqlite-dump
         :defer t
         :commands (sqlite-dump))
     #+END_SRC

*** YAML
    #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
        :ensure t
        :defer  t
        :mode "\\.yaml"
        :hook (yaml-mode . flycheck-mode)
        :config
        (general-define-key
          :keymaps 'yaml-mode-map
          :states 'insert
          "<tab>" 'yaml-indent-line)

        (leader/set-keys-for-mode! 'yaml-mode
          "n" 'yaml-narrow-to-block-literal
          "f" 'yaml-fill-paragraph
          "v" 'yaml-mode-version)

        (push '(yaml-mode . 2) mohkale-indent-config))
    #+END_SRC

*** csv
    #+BEGIN_SRC emacs-lisp
      (use-package csv-mode
        :ensure t
        :defer  t
        :init
        (setq csv-separators '("," ":" ";" "\t"))

        :config
        (general-define-key
          :keymaps 'csv-mode-map
          "<tab>"     'csv-forward-field
          "<backtab>" 'csv-backward-field)

        (leader/declare-prefix-for-mode!* 'csv-mode
          "s" "sort"
          "v" "yank")

        (leader/set-keys-for-mode! 'csv-mode
          "a"  'csv-align-fields
          "d"  'csv-kill-fields
          "i"  'csv-toggle-invisibility
          "r"  'csv-reverse-region
          "sf" 'csv-sort-fields
          "sn" 'csv-sort-numeric-fields
          "so" 'csv-toggle-descending
          "t"  'csv-transpose
          "u"  'csv-unalign-fields
          "vf" 'csv-yank-fields
          "vt" 'csv-yank-as-new-table))
    #+END_SRC

*** shell-script
**** company-shell
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'sh-script
         (use-package company-shell
           :ensure t
           :defer  t
           :config
           (company/configure-mode (sh-mode :major t)
             company-shell company-shell-env)))
     #+END_SRC

**** shell-script-mode
     #+BEGIN_SRC emacs-lisp
       (use-package sh-script
         :straight (sh-script :type built-in)
         :defer t
         :hook ((sh-script-mode . electric-pair-mode)
                (sh-script-mode . flycheck-mode))
         :config
         (leader/declare-prefix-for-mode!* 'sh-mode
           "<tab>" "indentation")
         (leader/set-keys-for-mode! 'sh-mode
           ":" 'sh-set-shell
           "0" 'sh-beginning-of-command
           "$" 'sh-end-of-command
           "!" 'executable-interpret
           "b" 'sh-show-shell
           "\\" 'sh-backslash-region

           "er" 'sh-execute-region
           "ej" 'sh-send-line-or-region-and-step

           "i=" 'sh-assignment
           "ic" 'sh-case
           "id" 'sh-cd-here
           "if" 'sh-for
           "i TAB" 'sh-if
           "il" 'sh-indexed-loop
           "io" 'sh-while-getopts
           "ir" 'sh-repeat
           "is" 'sh-select
           "it" 'sh-tmp-file
           "iu" 'sh-until
           "iw" 'sh-while
           "i(" 'sh-function
           "i+" 'sh-add

           "<tab> -" 'sh-learn-line-indent
           "<tab> =" 'sh-set-indent
           "<tab> |" 'sh-learn-buffer-indent
           "<tab> ?" 'sh-show-indent)

         (advice-add 'sh-set-shell :around 'inhibit-messages-wrapper))
     #+END_SRC

*** ssh
    #+BEGIN_SRC emacs-lisp
      (use-package ssh-config-mode
        :ensure t
        :defer  t
        :delight (ssh-config-mode "SSH")
        :config
        ;; TODO advise last host to behave like org mode
        (general-define-key
          :keymaps '(ssh-config-mode-map
                     ssh-known-hosts-mode-map)
          :states leader-norm-states
          "gj" 'ssh-config-host-next
          "gk" 'ssh-config-host-prev))
    #+END_SRC

*** Markdown
**** company-emoji
     #+BEGIN_SRC emacs-lisp
       (use-package company-emoji
         :ensure t
         :defer  t
         :config
         (setq company-emoji-insert-unicode nil))
     #+END_SRC

**** emojify
     #+BEGIN_SRC emacs-lisp
       (use-package emojify
         :ensure t
         :defer  t)
     #+END_SRC

**** gh-md
     #+BEGIN_SRC emacs-lisp
       (use-package gh-md
         :ensure t
         :defer  t)
     #+END_SRC

**** markdown-mode
     #+BEGIN_SRC emacs-lisp
       (use-package markdown-mode
         :ensure t
         :defer  t
         :hook ((markdown-mode . display-line-numbers-mode)
                ;; (markdown-mode . emojify-mode)
                (markdown-mode . flycheck-mode))
         :config
         (general-define-key
           :keymaps 'markdown-mode-map
           :states 'normal
           "gh" 'markdown-up-heading
           "gj" 'markdown-outline-next
           "gk" 'markdown-outline-previous
           "gl" 'markdown-outline-next-same-level)

         (general-define-key
           :keymaps 'markdown-mode-map
           :states 'insert
           "<return>" 'markdown-enter-key
           ;; "<backspace>" 'markdown-outdent-or-delete
           ;; "<S-iso-lefttab>" 'markdown-outdent-or-delete
           ;; "<S-tab>"         'markdown-outdent-or-delete
           ;; "<backtab>"       'markdown-outdent-or-delete
           )

         (general-define-key
           :keymaps 'markdown-mode-map
           :states '(insert normal)
           "C-<return>" 'markdown-insert-list-item
           "C-S-J" 'markdown-move-down
           "C-S-K" 'markdown-move-up
           "C-S-H" 'markdown-promote
           "C-S-L" 'markdown-demote)

         (general-define-key
           :keymaps 'markdown-mode-map
           :states '(insert normal)
           :predicate '(or (markdown--table-at-point-p)
                           (markdown-on-heading-p))
           "<tab>"           'markdown-cycle
           "<S-iso-lefttab>" 'markdown-shifttab
           "<S-tab>"         'markdown-shifttab
           "<backtab>"       'markdown-shifttab)

         (company/configure-mode (markdown-mode :major t)
           company-emoji)

         (advice-add 'markdown-insert-list-item :after (lambda (&rest args)
                                                         (if (eq (char-before)
                                                                 ?*)
                                                             (evil-append nil)
                                                           (evil-insert nil))))

         (leader/declare-prefix-for-mode!* 'markdown-mode
           "c" "check/complete"
           "e" "export"
           "i" "insert"
           "ih" "header"
           "il" "link"
           "d" "delete"
           "T" "toggle"
           "n" "navigate"
           "N" "narrow"
           "m" "mark"
           "t" "table"
           "r" "render"
           "ti" "insert"
           "td" "delete")

         (leader/set-keys-for-mode! 'markdown-mode
         ;;; unbound commands:
         ;;;  * markdown-outdent-region
         ;;;  * markdown-indent-region
         ;;;  * markdown-outline-previous-same-level

           "SPC" 'markdown-do
           "'" 'markdown-edit-code-block
           "f" 'markdown-follow-thing-at-point
           ">" 'markdown-blockquote-region
           "<tab>" 'markdown-pre-region ;; preformat

           "cc" 'markdown-complete
           "cb" 'markdown-complete-buffer
           "cr" 'markdown-check-refs
           "cR" 'markdown-unused-refs
           "cl" 'markdown-cleanup-list-numbers

           "eo" 'markdown-open
           "ee" 'markdown-export
           "ep" 'markdown-preview
           "ev" 'markdown-export-and-preview
           "em" 'markdown-other-window

           "rb" 'gh-md-render-buffer
           "rr" 'gh-md-render-region

           "i <tab>" 'markdown-insert-image
           "i*" 'markdown-insert-list-item
           "i!" 'markdown-insert-header-setext-1
           "i-" 'markdown-insert-hr
           "i1" 'markdown-insert-header-atx-1
           "i2" 'markdown-insert-header-atx-2
           "i3" 'markdown-insert-header-atx-3
           "i4" 'markdown-insert-header-atx-4
           "i5" 'markdown-insert-header-atx-5
           "i6" 'markdown-insert-header-atx-6
           "i@" 'markdown-insert-header-setext-2
           "iC" 'markdown-insert-gfm-code-block
           "iH" 'markdown-insert-header-setext-dwim
           "i[" 'markdown-insert-gfm-checkbox
           "ib" 'markdown-insert-bold
           "ic" 'markdown-insert-code
           "ie" 'markdown-insert-italic
           "if" 'markdown-insert-footnote
           "ii" 'markdown-insert-italic
           "ik" 'markdown-insert-kbd
           "ip" 'markdown-insert-pre
           "iq" 'markdown-insert-blockquote
           "is" 'markdown-insert-strike-through
           "ih!" 'markdown-insert-header-setext-1
           "ih1" 'markdown-insert-header-atx-1
           "ih2" 'markdown-insert-header-atx-2
           "ih3" 'markdown-insert-header-atx-3
           "ih4" 'markdown-insert-header-atx-4
           "ih5" 'markdown-insert-header-atx-5
           "ih6" 'markdown-insert-header-atx-6
           "ih@" 'markdown-insert-header-setext-2
           "ihH" 'markdown-insert-header-setext-dwim
           "ihh" 'markdown-insert-header-dwim
           "ihs" 'markdown-insert-header-setext-2
           "iht" 'markdown-insert-header-setext-1
           "ill" 'markdown-insert-link
           "ilf" 'markdown-insert-footnote
           "ilu" 'markdown-insert-uri
           "ilw" 'markdown-insert-wiki-link

           "dd" 'markdown-kill-thing-at-point
           "db" 'markdown-kill-block
           "do" 'markdown-kill-outline
           "dy" 'markdown-kill-ring-save

           "Tm" 'markdown-toggle-math
           "Tf" 'markdown-toggle-fontify-code-blocks-natively
           "Ti" 'markdown-toggle-inline-images
           "Tu" 'markdown-toggle-url-hiding
           "Tm" 'markdown-toggle-markup-hiding
           "Tc" 'markdown-toggle-gfm-checkbox
           "Tl" 'markdown-live-preview-mode

           "nu" 'markdown-next-link
           "nU" 'markdown-previous-link
           "nb" 'markdown-forward-block
           "nB" 'markdown-backward-block
           "nh" 'markdown-up
           "nj" 'markdown-next
           "nk" 'markdown-previous
           "nl" 'markdown-outline-next-same-level
           "nL" 'markdown-outline-previous-same-level

           "Nb" 'markdown-narrow-to-block
           "Np" 'markdown-narrow-to-page
           "Ns" 'markdown-narrow-to-subtree
           "Nw" 'widen

           "ms" 'markdown-mark-subtree
           "mb" 'markdown-mark-block

           "ts" 'markdown-table-sort-lines
           "tT" 'markdown-table-transpose
           "tt" 'markdown-insert-table
           "tn" 'markdown-insert-table
           "tc" 'markdown-table-convert-region
           "tir" 'markdown-table-insert-row
           "tic" 'markdown-table-insert-column
           "tit" 'markdown-insert-table
           "tdr" 'markdown-table-delete-row
           "tdc" 'markdown-table-delete-column))
     #+END_SRC

*** cmake
**** cmake-mode
     #+BEGIN_SRC emacs-lisp
       (use-package cmake-mode
         :ensure t
         :defer  t
         :mode "CMakeLists\\.txt\\|\\.cmake"
         :hook (cmake-mode . flycheck-mode)
         :config
         (company/configure-mode (cmake-mode :major t)
           company-cmake))
     #+END_SRC

**** company-cmake
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'cmake-mode
         (use-package company-cmake
           :defer  t
           :commands company-cmake))
     #+END_SRC

*** C-C++
**** company-c-headers
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'cc-mode
         (use-package company-c-headers
           :ensure t
           :defer  t))
     #+END_SRC

**** cc-mode
     #+BEGIN_SRC emacs-lisp
       (use-package cc-mode
         :straight (cc-mode :type built-in)
         :defer t
         :mode ("\\.h$" . c-mode)
         :commands (mohkale//set-c-mode-bindings)
         :hook (
                ;; use global-ycmd-mode manually
                ;; (c-mode   . ycmd-mode)
                ;; (c++-mode . ycmd-mode)
                (c-mode   . flycheck-mode)
                (c++-mode . flycheck-mode))
         :config
         (c-toggle-auto-newline  +1)
         ;; WARN never do this, it breaks commenting in
         ;;      weird places.
         ;; (c-toggle-comment-style +1)

         (setq c-default-style "stroustrup")

         ;; (company/configure-mode ((c-mode c++-mode) :major t :predicate ycmd-mode)
         ;;   company-ycmd company-c-headers)

         (defun mohkale//set-c-mode-bindings (mode)
           (leader/set-keys-for-mode! mode
             "S" 'c-set-style
             "D" 'c-display-defun-name
             "m" 'c-mark-function
             "r" 'c-indent-defun
             "/" 'c-backslash-region
             "\\" 'c-toggle-comment-style
             "DEL" 'c-hungry-delete-forward
             "M-DEL" 'c-hungry-delete-backwards)

           (let ((mode-map (intern (concat (symbol-name mode)
                                           "mode"))))
             (general-define-key
               :keymaps 'mode-map
               "C-M-a" 'c-beginning-of-defun
               ;; "C-M-e" 'c-end-of-defun
               "M-a"   'c-beginning-of-statement
               ;; "M-e"   'c-end-of-statement
               )))

         (mohkale//set-c-mode-bindings 'c-mode)
         (mohkale//set-c-mode-bindings 'cc-mode))
     #+END_SRC

**** disaster
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'cc-mode
         (use-package disaster
           :ensure t
           :defer  t
           :init
           (dolist (mode '(c-mode c++-mode))
             (leader/set-keys-for-mode! mode
               "D" 'disaster))))
     #+END_SRC

*** kotlin
**** kotlin-mode
     #+BEGIN_SRC emacs-lisp
       (use-package kotlin-mode
         :ensure t
         :defer  t
         :config
         (setq kotlin-tab-width 4)

         (leader/declare-prefix-for-mode! 'kotlin-mode
           "e" "eval")

         (leader/set-keys-for-mode! 'kotlin-mode
           "r" 'kotlin-repl
           "e-" 'kotlin-send-line
           "e|" 'kotlin-send-block
           "er" 'kotlin-send-region
           "eb" 'kotlin-send-buffer
           "e S--" 'kotlin-send-line-and-focus
           "e S-|" 'kotlin-send-block-and-focus
           "eR"    'kotlin-send-region-and-focus
           "eB"    'kotlin-send-buffer-and-focus))
     #+END_SRC

**** lsp-kotlin
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'kotlin-mode
         (add-hook 'kotlin-mode-hook 'lsp))
     #+END_SRC

*** java
    java, the language *everyone* tolerates.

**** java-mode
    #+BEGIN_SRC emacs-lisp
      (use-package cc-mode
        :straight (cc-mode :type built-in)
        :defer t
        :init
        (with-eval-after-load 'projectile
          ;; see: https://github.com/bbatsov/projectile/blob/master/projectile.el#L2636
          (projectile-register-project-type 'gradle '("build.gradle.kts")
                                            :run     "gradle run"
                                            :compile "gradle build"
                                            :test    "gradle test"
                                            :test-suffix "Spec")

          (projectile-register-project-type 'gradlew '("gradlew")
                                            :run     "./gradlew run"
                                            :compile "./gradlew build"
                                            :test    "./gradlew test"
                                            :test-suffix "Spec"))
        :config
        (mohkale//set-c-mode-bindings 'java-mode))
    #+END_SRC

**** meghanada
    #+BEGIN_SRC emacs-lisp
      (defun mohkale/load-meghanada ()
        "load and enable the meghanada java language server package"
        (interactive)

        (use-package meghanada
          :ensure t
          :defer  t
          :delight (meghanada "MEG")
          :hook ((java-mode . meghanada-mode))
          :config
          (require 'yasnippet)

          (company/configure-mode (meghanada-mode)
            company-meghanada)

          (setq mohkale-meghanada-map (make-sparse-keymap))

          (general-define-key
            :keymaps 'mohkale-meghanada-map
            "SPC" 'meghanada-run-task
            "D"   'meghanada-typeinfo
            "G"   'meghanada-back-jump
            "F"   'meghanada-search-everywhere-ex
            "d"   'meghanada-reference ;; documentation
            "g"   'meghanada-jump-declaration
            "k"   'meghanada-server-kill
            "n"   'meghanada-server-start
            "p"   'meghanada-code-beautify
            "r"   'meghanada-restart
            "s"   'meghanada-show-project
            "f"   'meghanada-search-everywhere
            "y"   'meghanada-mode

            "cc" 'meghanada-compile-project
            "cd" 'meghanada-debug-main
            "cf" 'meghanada-compile-file
            "cr" 'meghanada-exec-main

            "Si" 'meghanada-install-server
            "Su" 'meghanada-update-server

            "ia" 'meghanada-import-all
            "il" 'meghanada-local-variable
            "io" 'meghanada-optimize-import
            "ip" 'meghanada-import-at-point

            "td"      'meghanada-debug-junit-class
            "tt"      'meghanada-switch-testcase ;; test -> file -> test
            "tf"      'meghanada-run-junit-class
            "t SPC"   'meghanada-run-junit-test-case
            "t C-SPC" 'meghanada-debug-junit-test-case)

          (leader/with-prefix mohkale--server-leader-key
            (let ((prefixes (list "c" "compile/run"
                                  "t" "test"
                                  "S" "server"
                                  "i" "insert/refactor")))
              (apply 'leader/declare-prefix-for-mode* '(java-mode meghanada-mode) prefixes))

            (leader/declare-prefix-for-mode!* '(java-mode meghanada-mode)
              mohkale--server-leader-key "meghanada")

            ;; major-mode bindings
            (leader/set-keys-for-mode! 'java-mode
              mohkale--server-leader-key mohkale-meghanada-map)

            ;; global server-key bindings
            (leader/set-keys-for-mode 'meghanada-mode
              mohkale--server-leader-key mohkale-meghanada-map))))

      (mohkale/load-meghanada)
    #+END_SRC

*** javascript
    # NOTE no on the fly syntax checking? make sure eslint is installed no warning or error will be issued if it isn't :(

**** js2-mode
     #+BEGIN_SRC emacs-lisp
       (use-package js2-mode
         :ensure t
         :defer  t
         :mode "\\.js$"
         :hook (js2-mode . flycheck-mode)
         :config
         (setq js2-mode-show-parse-errors      nil
               js2-mode-show-strict-warnings   nil
               js2-strict-missing-semi-warning nil)

         (general-define-key
           :keymaps 'js2-mode-map
           :states  'insert
           ;; properly formets javadocs
           "<return>" 'js2-line-break)

         (leader/declare-prefix-for-mode!* 'js2-mode
           "i" "insert"
           "h" "help"
           "H" "hide/show"
           "Hh" "hide"
           "Hs" "show")

         (leader/set-keys-for-mode! 'js2-mode
           "gg" 'js2-jump-to-definition

           ;; toggle hide-show
           "HH" 'js2-mode-show-all
           "Hw" 'js2-mode-toggle-warnings-and-errors
           "He" 'js2-mode-toggle-element
           "Hc" 'js2-mode-toggle-hide-comments
           "Hf" 'js2-mode-toggle-hide-functions

           ;; hide
           "Hhw" 'js2-mode-hide-warnings-and-errors
           "Hhe" 'js2-mode-hide-element
           "Hhc" 'js2-mode-show-comments
           "Hhf" 'js2-mode-hide-functions

           ;; show
           "Hsw" 'js2-mode-display-warnings-and-errors
           "Hse" 'js2-mode-show-element
           "Hsc" 'js2-mode-hide-comments
           "Hsf" 'js2-mode-show-functions))
     #+END_SRC

**** tern
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'js2-mode
         (use-package tern
           :ensure t
           :defer  t
           :hook (js2-mode . tern-mode)))
     #+END_SRC

**** company-tern
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'js2-mode
         (use-package company-tern
           :ensure t
           :defer  t
           :hook (js2-mode . (lambda () (require 'company-tern)))
           :config
           (company/configure-mode (js2-mode :major t)
             company-tern)))
     #+END_SRC

**** js-doc
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'js2-mode
         (use-package js-doc
           :ensure t
           :defer  t
           :init
           ;; (general-define-key
           ;;   :keymaps 'js2-mode-map
           ;;   :states 'insert
           ;;   "@" 'js-doc-insert-tag)

           (leader/set-keys-for-mode! 'js2-mode
             "i@" 'js-doc-insert-tag
                                               ; only works from within method
             "i)" 'js-doc-insert-function-doc
             "i(" 'js-doc-insert-function-doc-snippet
             "if" 'js-doc-insert-file-doc
             "h@" 'js-doc-describe-tag)

           :config
           (advice-add 'js-doc-insert-function-doc-snippet :after (lambda (&rest r)
                                                                    (evil-insert nil)))))
     #+END_SRC

**** js2-refactor
     #+BEGIN_SRC emacs-lisp
       ;; most of this doesn't seem to work very well...
       ;; so I'm only using a few functions with simple features.
       (with-eval-after-load 'js2-mode
         (use-package js2-refactor
           :ensure t
           :defer  t
           :diminish
           :hook (js2-mode . js2-refactor-mode)
           :config
           (defun js2r-exit-visual-mode-after-func-call (&rest args)
             (when (evil-visual-state-p)
               (evil-exit-visual-state)))

           (advice-add 'js2r-extract-method   :after #'js2r-exit-visual-mode-after-func-call)
           (advice-add 'js2r-extract-function :after #'js2r-exit-visual-mode-after-func-call)

           (leader/declare-prefix-for-mode! 'js2-mode
             "e" "extract")

           (leader/set-keys-for-mode! 'js2-mode
             "[" 'js2r-expand-node-at-point
             "]" 'js2r-contract-node-at-point

                                               ; doesn't work unless executed from within a function
             "ef" 'js2r-extract-function
             "em" 'js2r-extract-method
             "ev" 'js2r-extract-var
             "el" 'js2r-extract-let
             "ec" 'js2r-extract-const

             "l" 'js2r-log-this
             "L" 'js2r-debug-this

             "v" 'js2r-var-to-this

             "s" 'js2r-forward-slurp
             "b" 'js2r-forward-barf)))
     #+END_SRC

**** xref-js2
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'js2-mode
         (use-package xref-js2
           :ensure t
           :defer  t
           :hook (xref-backend-functions . xref-js2-xref-backend)
           :init
           (setq xref-js2-search-program 'rg)))
     #+END_SRC

**** indium
     looks cool... but tad too much setup for me & requires you to src_sh{npm install -g indium}.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package indium
         :ensure t
         :defer  t)
     #+END_SRC

**** skewer-mode
     #+BEGIN_SRC emacs-lisp
       (use-package skewer-mode
         :ensure t
         :defer  t
         :delight
         (skewer-css-mode "skewerC")
         (skewer-html-mode "skewerH")
         :init
         (setq skewer-leader-prefix (concat leader-major-mode-prefix "S"))

         :config
         ;; once required, enable skewer in all
         ;; compatible buffers
         (add-hook 'js2-mode-hook 'skewer-mode)
         (add-hook 'css-mode-hook 'skewer-css-mode)
         (add-hook 'html-mode-hook 'skewer-html-mode)

         ;; (run-skewer) ;; and begin server

         (leader/with-prefix skewer-leader-prefix
           (leader/set-keys-for-mode 'skewer-mode
             "e" 'skewer-eval-last-expression
             "E" 'skewer-eval-print-last-expression
             "(" 'skewer-eval-defun
             "b" 'skewer-load-buffer

             "R" 'skewer-repl
             "L" 'skewer-bower-load
             "B" 'skewer-bower-refresh
             "p" 'skewer-run-phantomjs
             "P" 'skewer-phantomjs-kill)

           (leader/set-keys-for-mode 'skewer-html-mode
             "s" 'skewer-html-fetch-selector-into-buffer
             "e" 'skewer-html-eval-tag

             "R" 'skewer-repl
             "L" 'skewer-bower-load
             "B" 'skewer-bower-refresh
             "p" 'skewer-run-phantomjs
             "P" 'skewer-phantomjs-kill)

           (leader/set-keys-for-mode 'skewer-css-mode
             "e" 'skewer-css-eval-current-rule
             "b" 'skewer-css-eval-buffer
             "c" 'skewer-css-clear-all
             "d" 'skewer-css-eval-current-declaration

             "R" 'skewer-repl
             "L" 'skewer-bower-load
             "B" 'skewer-bower-refresh
             "p" 'skewer-run-phantomjs
             "P" 'skewer-phantomjs-kill)))
     #+END_SRC

*** css/less
**** css-mode
     #+BEGIN_SRC emacs-lisp
       (use-package css-mode
         :defer t
         :config
         (leader/set-keys-for-mode! 'css-mode
           "?" 'css-lookup-symbol
           "b" 'web-beautify-css)

         (company/configure-mode (css-mode :major t)
           company-css))
     #+END_SRC

**** less-css-mode
     #+BEGIN_SRC emacs-lisp
       (use-package less-css-mode
         :defer t
         :config
         (leader/set-keys-for-mode 'less-css-mode
           "c" 'less-css-compile))
     #+END_SRC

**** skewer-less
     #+BEGIN_SRC emacs-lisp
       (use-package skewer-less
         :ensure t
         :defer  t
         :init
         (with-eval-after-load 'skewer-mode
           (add-hook 'less-css-mode-hook 'skewer-less-mode))

         (leader/with-prefix skewer-leader-prefix
           (leader/set-keys-for-mode 'skewer-less-mode
             "b" 'skewer-less-eval-buffer
             "r" 'skewer-less-eval-region)))
     #+END_SRC

*** haskell
**** hindent
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'haskell-mode
         (use-package hindent
           :ensure t
           :defer  t
           :hook (haskell-mode . hindent-mode)))
     #+END_SRC

**** company-cabal
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'haskell-mode
         (use-package company-cabal
           :ensure t
           :defer  t))
     #+END_SRC

**** flycheck-haskell
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'haskell-mode
         (use-package flycheck-haskell
           :ensure t
           :defer  t))
     #+END_SRC

**** haskell-mode
     #+BEGIN_SRC emacs-lisp
       (use-package haskell-mode
         :ensure t
         :defer  t
         :init
         (push 'haskell-interactive-mode mohkale--whitespace-exempt-modes)
         (push 'inferior-haskell-mode mohkale--whitespace-exempt-modes)
         (defalias 'haskell-repl #'run-haskell)

         :config
         (use-package haskell-indent
           :commands (haskell-indent-cycle))

         (company/configure-mode (haskell-cabal-mode :major t)
           company-cabal)

         (setq haskell-process-type 'cabal-repl)

         (evil-set-initial-state 'haskell-interactive-mode 'emacs)

         (general-define-key
           :keymaps 'haskell-mode-map
           "C-M-i" nil)

         (defun haskell-enable-indent-control+ ()
           (interactive)
           (haskell-indent-mode +1)
           (general-define-key
             :states  '(insert replace)
             :keymaps 'haskell-mode-map
             "<tab>" 'haskell-indent-cycle))

         (leader/declare-prefix-for-mode!* 'haskell-mode
           "r" "refactor"
           "i" "insert"
           "s" "session")

         (leader/set-keys-for-mode! 'haskell-mode
           "TAB"   'haskell-indent-cycle
           "S-TAB" 'haskell-delete-indentation

           "ri" 'haskell-mode-format-imports
           "rI" 'haskell-sort-imports

           "is" 'haskell-mode-toggle-scc-at-point
           "i|" 'haskell-indent-insert-guard
           "iw" 'haskell-indent-insert-where
           "io" 'haskell-indent-insert-other
           "i=" 'haskell-indent-insert-equal

           "sc" 'haskell-session-change
           "sC" 'haskell-session-change-target
           "sk" 'haskell-session-kill
           "sK" 'haskell-kill-session-process))
     #+END_SRC

**** company-ghci
     #+BEGIN_SRC emacs-lisp
       ;; (use-package company-ghci
       ;;   :ensure t
       ;;   :defer  t
       ;;   :commands company-ghci)
     #+END_SRC

**** hs-lint
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'haskell-mode
         (use-package hs-lint
           :defer t
           :commands (hs-lint hs-lint-mode)))
     #+END_SRC

**** hlint-refactor-mode
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'haskell-mode
         (use-package hlint-refactor-mode
           :defer t
           :commands (hlint-refactor-refactor-buffer
                      hlint-refactor-refactor-at-point)))
     #+END_SRC

**** lsp-haskell
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'haskell-mode
         (with-eval-after-load 'lsp-mode
           (use-package lsp-haskell
             :ensure t
             :defer  t
             :hook ((haskell-mode . lsp) ;; order of evaluation matters
                    (haskell-mode . (lambda ()
                                      (require 'lsp-haskell)
                                      ;; until there's actually any useful info
                                      (setq-local lsp-eldoc-enable-hover nil))))
             :config
             (setq lsp-haskell-process-args-hie (list "-d" "-l" (make-temp-file "hie." nil ".log"))))))
     #+END_SRC

*** git
    I'm not ashamed to admit... 89% of everything here is just shamelessly stollen [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%252Bsource-control/git/packages.el][spacemacs]]. and before you say it, git is a language... +or at least my OCD needs it to be+ just look at all those proprietary formats:

    - gitignore
    - gitcontrol
    - gitconfig
    - gitattributes

    okay... I made one of those up, but can you honestly tell me which one before looking below :P

**** magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t
        :defer  t
        :init
        (setq magit-completing-read-function 'ivy-completing-read
              magit-revision-show-gravatars  '("^Author:     " . "^Commit:     ")
              ;; show magit status in a full screen window.
              magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)

        ;; On Windows, we must use Git GUI to enter username and password
        ;; See: https://github.com/magit/magit/wiki/FAQ#windows-cannot-push-via-https
        (when (eq window-system 'w32)
          (setenv "GIT_ASKPASS" "git-gui--askpass"))

        (leader/declare-prefix*
          "g" "magit"
          "gd" "diff"
          "gf" "file")

        (leader/set-keys
          "gm" 'magit-dispatch
          "g!" 'magit-run
          "gfh" 'magit-log-buffer-file
          "gm"  'magit-dispatch-popup
          "gs"  'magit-status
          "gS"  'magit-stage-file
          "gU"  'magit-unstage-file)

        :config
        (setq mohkale--whitespace-exempt-modes
              (append '(magit-status-mode
                        magit-log-mode
                        magit-diff-mode)
                      mohkale--whitespace-exempt-modes))

        ;; GIVE ME BACK MY LEADER!!!
        (general-define-key
          :keymaps '(magit-mode-map magit-diff-mode-map)
          leader-key nil
          "C-w" mohkale-window-map)

        (general-define-key
          :keymaps 'magit-mode-map
          "M-j" 'magit-section-forward-sibling
          "M-k" 'magit-section-backward-sibling

          ;; ;; toggle children doesn't seem to work
          ;; "C-r" 'magit-section-hide-children ; recursive close
          ;; "C-e" 'magit-section-show-children ; recursive expand
          ;; "M-r" 'magit-section-hide-children ; Meta aliases
          ;; "M-e" 'magit-section-show-children ; Meta aliases

          ;; visit and expand
          "RET"   'magit-section-toggle
          "TAB"   'magit-section-toggle
          "M-RET" 'magit-visit-thing)

        (general-define-key
          :keymaps 'magit-log-mode-map
          "RET" 'magit-visit-thing)

        (leader/with-major-mode-prefix
          (leader/declare-prefix-for-mode* 'git-commit-mode
            "i" "insert")

          (leader/set-keys-for-mode 'git-commit-mode
            ","  'with-editor-finish
            "q"  'with-editor-cancel
            "s"  'git-commit-save-message
            "d"  'magit-diff-while-committing
            "j"  'git-commit-next-message
            "k"  'git-commit-prev-message
            "ia" 'git-commit-ack ;; knowledgement
            "iS" 'git-commit-suggested
            "im" 'git-commit-modified
            "ic" 'git-commit-cc
            "ir" 'git-commit-reported
            "iR" 'git-commit-review
            "is" 'git-commit-signoff
            "it" 'git-commit-test)))
    #+END_SRC

**** gitattributes-mode
     #+BEGIN_SRC emacs-lisp
      (use-package gitignore-mode
        :ensure t
        :defer  t)
     #+END_SRC

**** gitconfig-mode
     #+BEGIN_SRC emacs-lisp
      (use-package gitconfig-mode
        :ensure t
        :defer  t)
     #+END_SRC

**** gitignore-mode
     #+BEGIN_SRC emacs-lisp
      (use-package gitattributes-mode
        :ensure t
        :defer  t)
     #+END_SRC

**** gitlink
     #+BEGIN_SRC emacs-lisp
     (use-package git-link
        :ensure t
        :defer  t
        :init
        (leader/declare-prefix "gl" "links")

        (leader/set-keys
          "gll" 'spacemacs/git-link
          "glL" 'spacemacs/git-link-copy-url-only
          "glc" 'spacemacs/git-link-commit
          "glC" 'spacemacs/git-link-commit-copy-url-only)

        ;; default is to open the generated link
        (setq git-link-open-in-browser t))
     #+END_SRC

**** transient
     #+BEGIN_SRC emacs-lisp
       (use-package transient
          :ensure t
          :defer  t
          :config
          (general-define-key
            :keymaps 'transient-base-map
            ;;; escape means quit too
            "ESC" 'transient-quit-one))
     #+END_SRC

**** magit-svn
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package magit-svn
         :hook (magit-mode . turn-on-magit-svn)
         ;; TODO add some bindings
         )
     #+END_SRC

**** orgit
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package orgit
         :ensure t
         :defer  t
         :hook (org-mode . (require 'orgit)))
     #+END_SRC

**** magit-gitflow
     #+BEGIN_SRC emacs-lisp
       (use-package magit-gitflow
         :ensure t
         :defer  t
         :hook (magit-mode . turn-on-magit-gitflow)
         :delight
         (magit-gitflow-mode "GitFlow")

         :init
         (with-eval-after-load 'magit--handle-bookmark
           (general-define-key
             :keymaps 'magit-mode-map
             "%" 'magit-gitflow-popup)))
     #+END_SRC

*** plantuml
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package plantuml-mode
        :ensure t
        :defer  t)
    #+END_SRC

** Unimplemented
*** realgud
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package realgud
        :ensure t
        :defer  t
        :config
        (mohkale--comint-set-bindings 'realgud:gdb-track-mode-map)
        (general-define-key
          :keymaps 'realgud:gdb-track-mode-map
          "RET" 'realgud:send-input)

        (defun realgud--display-realgud-buffer-instead-of-switch (func &rest args)
          (let ((current-buffer (current-buffer))
                debugger-buffer)
            (apply func args) ;; invoke wrapped function

            (unless (eq current-buffer (current-buffer))
              (setq debugger-buffer (current-buffer))
              (switch-to-buffer nil) ;; last buffer
              (display-buffer debugger-buffer))))

        (advice-add #'realgud:gdb :around
                    #'realgud--display-realgud-buffer-instead-of-switch)

        (general-define-key
          :keymaps 'realgud-track-mode-map
          "<override-state>" nil))
    #+END_SRC


* Scripts

** server-installation-scripts
   #+NAME: server-install-path
   #+BEGIN_SRC emacs-lisp :results value :tangle no
     (expand-file-name "~/.emacs.d/var/lsp/servers")
   #+END_SRC

   #+NAME: set_shell_banner
   #+BEGIN_SRC emacs-lisp :var varname="BANNER" text="" width=80 char="@" :results value :tangle no
     (let* ((text-width (length text))
            (width (max width
                        (+ 4 text-width)))
            (header-string (make-string width
                                        (string-to-char char)))
            (pad-width (/ (- width 4 text-width)
                          2))
            (pad-string (make-string pad-width ? ))

            (banner (concat "\n"
                            char
                            " "
                            (unless (zerop (% text-width 2))
                              " ")
                            pad-string
                            text
                            pad-string
                            " "
                            char
                            "\n")))
       (format "%s='\n%s\n'"
               varname
               (concat header-string
                       banner
                       header-string)))
   #+END_SRC

*** kotlin-language-server
    :PROPERTIES:
    :header-args+: :tangle bin/install/kotlin-language-server.sh
    :END:

    #+BEGIN_SRC bash :shebang #!/usr/bin/bash
      <<set_shell_banner(varname="INSTALLATION_ALREADY_DONE_BANNER",text="kotlin language server already installed",char="#")>>
      <<set_shell_banner(varname="CLONING_LANGUAGE_SERVER_BANNER",text="cloning fwcd/kotlin-language-server",char="#")>>
      <<set_shell_banner(varname="CLONING_FAILED_BANNER",text="failed to clone repository, program terminated",char="*")>>
      <<set_shell_banner(varname="CLONING_ALREADY_DONE_BANNER",text="fwcd/kotlin-language-server already cloned",char="#")>>
      <<set_shell_banner(varname="RUNNING_GRADLE_BUILD_BANNER",text="running gradle build process",char="#")>>
      <<set_shell_banner(varname="GRADLE_BUILD_FAILED_BANNER",text="failed to build kotlin language server",char="*")>>
      <<set_shell_banner(varname="FINISHED_BANNER",text="finished installing the kotlin language server",char="*")>>

      DEST_PATH="<<server-install-path()>>/kotlin"
    #+END_SRC

    #+BEGIN_SRC bash
      if [ -f "${DEST_PATH}/bin/kotlin-language-server" ]; then
          echo "${INSTALLATION_ALREADY_DONE_BANNER}"
      else
          mkdir -p "${DEST_PATH}"
          pushd "${DEST_PATH}"

          CLONE_PATH="./.server"
          if [ ! -d "${CLONE_PATH}/.git" ]; then
              echo "${CLONING_LANGUAGE_SERVER_BANNER}"

              if ! git clone "https://github.com/fwcd/kotlin-language-server" "${CLONE_PATH}"; then
                  echo "${CLONING_FAILED_BANNER}"
                  exit 1
              fi
          else
              echo "${CLONING_ALREADY_DONE_BANNER}"
          fi

          echo "${RUNNING_GRADLE_BUILD_BANNER}"

          pushd "${CLONE_PATH}"
          if ! ./gradlew :server:installDist; then
              echo "${GRADLE_BUILD_FAILED_BANNER}"
              exit 2
          fi
          popd

          mv ${CLONE_PATH}/server/build/install/server/* ./
          rm -rf "${CLONE_PATH}"
          echo "${FINISHED_BANNER}"
      fi
    #+END_SRC

*** kotlin-debug-adapter
    :PROPERTIES:
    :header-args+: :tangle bin/install/kotlin-debug-adapter.sh
    :END:

    #+BEGIN_SRC bash :shebang #!/usr/bin/bash
      <<set_shell_banner(varname="INSTALLATION_ALREADY_DONE_BANNER",text="kotlin debug adapter already installed",char="#")>>
      <<set_shell_banner(varname="CLONING_DEBUG_ADAPTER_BANNER",text="cloning fwcd/kotlin-debug-adapter",char="#")>>
      <<set_shell_banner(varname="CLONING_FAILED_BANNER",text="failed to clone repository, program terminated",char="*")>>
      <<set_shell_banner(varname="CLONING_ALREADY_DONE_BANNER",text="fwcd/kotlin-debug-adapter already cloned",char="#")>>
      <<set_shell_banner(varname="RUNNING_GRADLE_BUILD_BANNER",text="running gradle build process",char="#")>>
      <<set_shell_banner(varname="GRADLE_BUILD_FAILED_BANNER",text="failed to build kotlin debug adapter",char="*")>>
      <<set_shell_banner(varname="INISHED_BANNER",text="finished installing the kotlin debug adapter",char="*")>>

      DEST_PATH="<<server-install-path()>>/kotlin/debugger"
    #+END_SRC

    #+BEGIN_SRC bash
      if [ -f "${DEST_PATH}/bin/kotlin-debug-adapter" ]; then
          echo "${INSTALLATION_ALREADY_DONE_BANNER}"
      else
          mkdir -p "${DEST_PATH}"
          pushd "${DEST_PATH}"

          CLONE_PATH="./.debugger"
          if [ ! -d "${CLONE_PATH}/.git" ]; then
              echo "${CLONING_DEBUG_ADAPTER_BANNER}"

              if ! git clone "https://github.com/fwcd/kotlin-debug-adapter" "${CLONE_PATH}"; then
                  echo "${CLONING_FAILED_BANNER}"
                  exit 1
              fi
          else
              echo "${CLONING_ALREADY_DONE_BANNER}"
          fi

          echo "${RUNNING_GRADLE_BUILD_BANNER}"

          pushd "${CLONE_PATH}"
          if ! ./gradlew :adapter:installDist; then
              echo "${GRADLE_BUILD_FAILED_BANNER}"
              exit 2
          fi
          popd

          mv ${CLONE_PATH}/adapter/build/install/adapter/* ./
          rm -rf "${CLONE_PATH}"
          echo "${FINISHED_BANNER}"
      fi
    #+END_SRC

*** haskell-ide-engine
    :PROPERTIES:
    :header-args+: :tangle bin/install/haskell-ide-engine.sh
    :END:

    if your install fails with exit code 251, you're computer ran out of memory during the install process. Simply close all running programs and try again. Warning: install can take upto an hour and over 3 GB of RAM.

    #+BEGIN_SRC bash :shebang #!/usr/bin/bash
      <<set_shell_banner(varname="INSTALLATION_ALREADY_DONE_BANNER",text="haskell IDE engine already installed",char="#")>>
      <<set_shell_banner(varname="CLONING_LANGUAGE_SERVER_BANNER",text="cloning haskell/haskell-ide-engine",char="#")>>
      <<set_shell_banner(varname="CLONING_FAILED_BANNER",text="failed to clone repository, program terminated",char="*")>>
      <<set_shell_banner(varname="CLONING_ALREADY_DONE_BANNER",text="haskell/haskell-ide-engine already cloned",char="#")>>
      <<set_shell_banner(varname="RUNNING_CABAL_INSTALL_BANNER",text="running cabal installer, you may wish to free some RAM",char="#")>>
      <<set_shell_banner(varname="CABAL_INSTALL_FAILED_BANNER",text="failed to build haskell IDE engine",char="*")>>
      <<set_shell_banner(varname="FAILED_TO_MOVE_AFTER_INSTALL_BANNER",text="could not find stack install directory for server move",char="*")>>
      <<set_shell_banner(varname="FINISHED_BANNER",text="finished installing the haskell IDE engine",char="*")>>

      DEST_PATH="<<server-install-path()>>/haskell"
    #+END_SRC

    #+BEGIN_SRC bash
      BUILD_TARGET="stack-hie-8.6.5"

      if [ -f "${DEST_PATH}/hie.exe" -o -f "${DEST_PATH}/hie" ]; then
          echo "${INSTALLATION_ALREADY_DONE_BANNER}"
      else
          mkdir -p "${DEST_PATH}"
          pushd "${DEST_PATH}"

          CLONE_PATH="./.hie"
          if [ ! -d "${CLONE_PATH}/.git" ]; then
              echo "${CLONING_LANGUAGE_SERVER_BANNER}"

              if ! git clone "https://github.com/haskell/haskell-ide-engine" "${CLONE_PATH}" --recurse-submodules; then
                  echo "${CLONING_FAILED_BANNER}"
                  exit 1
              fi
          else
              echo "${CLONING_ALREADY_DONE_BANNER}"
          fi

          echo "${RUNNING_CABAL_INSTALL_BANNER}"

          pushd "${CLONE_PATH}"
          if ! cabal v2-run ./install.hs --project-file install/shake.project -j1 --ghc-options="+RTS -M600M" "${BUILD_TARGET}"; then
              echo "${CABAL_INSTALL_FAILED_BANNER}"
              exit 2
          fi
          popd

          INSTALL_PATH="$(stack path --local-bin)"
          if [ $? -eq 0 ]; then
              find "${INSTALL_PATH}/" -maxdepth 1 -iname 'hie*' -print0 | xargs -0 -i% mv % ./
              rm -rf "${CLONE_PATH}"
              echo "${FINISHED_BANNER}"
          else
              echo "${FAILED_TO_MOVE_AFTER_INSTALL_BANNER}"
          fi
      fi
    #+END_SRC

* Themes
** an old hope
   #+NAME: an-old-hope-theme-description
   #+BEGIN_EXAMPLE
      emacs theme inspired by a galaxy far far away...
      this theme is largely just a shot for shot copy of `jesseleite/an-old-hope-syntax-atom'
      ported to emacs because I refuse to live with an IDE that doesn't look like it XD.
      This theme isn't compatible with emacs in the terminal yet, when I find an easy way
      to approximate true-color colors to non-true-color colors, then I'll add support for
      it.
   #+END_EXAMPLE

*** Colors
   #+NAME: an-old-hope-theme-color-associations
   | color-name        | new-name   | hue | sat | light | description                       |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | very-light-grey   |            | 228 |   7 |    81 | shades of the millenium falcon    |
   | light-grey        |            | 228 |   7 |    55 | shades of the millenium falcon    |
   | grey              |            | 228 |   7 |    44 | shades of the millenium falcon    |
   | dark-grey         |            | 228 |   7 |    29 | shades of the millenium falcon    |
   | very-dark-grey    |            | 228 |   7 |    12 | shades of the millenium falcon    |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | vader             | red        | 352 |  81 |    58 | Vader's lightsaber                |
   | vader-dim         | red-dim    | 352 |  60 |    58 |                                   |
   | vader-int         | red-int    | 360 |  90 |    58 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | luke              | orange     |  25 |  86 |    55 | Luke's pilot uniform              |
   | luke-dim          | orange-dim |  25 |  60 |    60 |                                   |
   | luke-int          | orange-int |  25 |  86 |    65 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | threepio          | yellow     |  50 |  74 |    61 | Human cyborg relations            |
   | threepio-dim      | yellow-dim |  50 |  74 |    31 |                                   |
   | threepio-int      | yellow-int |  50 | 100 |    61 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | yoda              | green      | 107 |  40 |    57 | Fear is the path to the dark side |
   | yoda-dim          | green-dim  | 100 |  30 |    57 |                                   |
   | yoda-int          | green-int  | 120 |  50 |    57 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | artoo             | blue       | 196 |  64 |    58 | Whistle. Beep. Bloop.             |
   | artoo-dim         | blue-dim   | 200 |  44 |    58 |                                   |
   | artoo-int         | blue-int   | 220 |  84 |    64 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | purple            |            | 313 |  32 |    60 |                                   |
   | purple-dim        |            | 313 |  32 |    70 |                                   |
   | purple-int        |            | 313 |  40 |    60 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | turquoise         |            | 165 |  70 |    65 |                                   |
   | turquoise-dim     |            | 165 |  60 |    85 |                                   |
   | turquoise-int     |            | 165 |  80 |    50 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | black             |            | 240 |   6 |    14 |                                   |
   | black-dim         |            | 240 |  10 |    20 |                                   |
   | black-int         |            | 240 |   6 |    00 |                                   |
   |-------------------+------------+-----+-----+-------+-----------------------------------|
   | white             |            |   0 | 100 |   100 |                                   |
   | line-highlight-bg |            | 228 |   7 |    21 |                                   |
   | extra-dark-grey   |            | 228 |   7 |    10 | variant for imbedded org blocks   |
   | debug             |            | 198 |  91 |    13 | dark blue                         |

   *rainbow-delimeter-shades*
   #+NAME: rainbow-delimeter-shades
      - #E6B422
      - #C70067
      - #00A960
      - #FC7482
      - #E6B422
      - #C70067
      - #00A960
      - #FC7482

   colors taken from [[https://github.com/gastrodia/rainbow-brackets][here.]] colors 5-8 just recycle 1-4, maybe come up with more.

   #+NAME: color-assoc-to-rgb-strings
   #+HEADER: :var associations=an-old-hope-theme-color-associations
   #+BEGIN_SRC emacs-lisp :results value table :tangle no :exports none
     (require 'color)
     (require 'subr-x)

     (let (result)
       (dolist (row (cdr associations))
         (message "%s" row)
         (let* ((color-name (nth 0 row))
                (dest-name  (progn
                              (let ((dest-name (nth 1 row)))
                                (if (string-empty-p dest-name)
                                    color-name
                                  dest-name))))
                (hue   (/ (nth 2 row) 360.0))
                (sat   (/ (nth 3 row) 100.0))
                (light (/ (nth 4 row) 100.0))

                (rgb (color-hsl-to-rgb hue sat light))
                (red   (nth 0 rgb))
                (green (nth 1 rgb))
                (blue  (nth 2 rgb)))
           (push (list (intern dest-name)
                       (color-rgb-to-hex red green blue 2))
                 result)))
       (reverse result))
   #+END_SRC

*** Header
   #+HEADER: :shebang ";; an-old-hope-theme.el -- a syntax theme from a galaxy far away... -*- lexical-binding: t -*-"
   #+BEGIN_SRC emacs-lisp :comments no :tangle etc/themes/an-old-hope-theme.el
     ;; Author: MoHKale
     ;; URL: https://github.com/MoHKale/an-old-hope-theme
     ;; Version: 0.1.0
     ;; Keywords: color, theme
     ;; Package-Requires: ((emacs "24"))

     ;; This file is not part of GNU Emacs

     ;; This file is free software; you can redistribute it and/or modify
     ;; it under the terms of the GNU General Public License as published by
     ;; the Free Software Foundation; either version 3, or (at your option)
     ;; any later version.

     ;; This program is distributed in the hope that it will be useful,
     ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ;; GNU General Public License for more details.

     ;; For a full copy of the GNU General Public License
     ;; see <http://www.gnu.org/licenses/>.

     ;; Commentary:
     ;; see https://github.com/MoHKale/an-old-hope-theme/tree/master/emacs
   #+END_SRC

*** Faces
   #+HEADER: :var desc=an-old-hope-theme-description colors=color-assoc-to-rgb-strings() cls=(eval t) rainbow-delims=rainbow-delimeter-shades
   #+BEGIN_SRC emacs-lisp :results silent :tangle etc/themes/an-old-hope-theme.el
     (require 'dash)

     (deftheme an-old-hope
       desc)

     (dolist (color colors)
       (set (car color) (nth 1 color)))

     (setq rainbow-delims (-flatten rainbow-delims))

     (custom-theme-set-faces
      'an-old-hope

      ;;; basic
      `(cursor ((,cls (:background ,red))))
      `(custom-button ((,cls (:background ,very-dark-grey :foreground ,very-light-grey :box (:line-width 2 :style released-button)))))

      ;; sets the general foreground and background colors
      `(default ((,cls (:background ,very-dark-grey :foreground ,very-light-grey))))
      `(default-italic ((,cls (:italic t :inherit default))))
      `(hl-line ((,cls (:background ,line-highlight-bg)))) ; NOTE current line
      `(fringe ((,cls (:background ,black)))) ; NOTE: defines bars to the left and right, after line number when applicable
      `(vi-tilde-fringe-face ((,cls ((:inherit default)))))
      `(vertical-border ((,cls (:foreground ,very-light-grey)))) ; NOTE seperator between windows
      `(internal-border ((,cls (:foreground ,white :background ,white))))

      ;; errors, successes and warnings and other highlights
      `(error   ((,cls (:background ,red    :distant-foreground ,red    :foreground ,very-dark-grey :inherit bold))))
      `(success ((,cls (:background ,green  :distant-foreground ,green  :foreground ,very-dark-grey :inherit bold))))
      `(warning ((,cls (:background ,yellow :distant-foreground ,yellow :foreground ,very-dark-grey :inherit bold))))
      `(highlight ((,cls (:foreground ,very-dark-grey :background ,turquoise :distant-foreground ,turquoise :inherit bold))))
      `(region ((,cls (:background ,dark-grey :weight bold)))) ; NOTE visual mode selection
      `(secondary-selection ((,cls (:inherit region)))) ; TODO no idea what this is for, document it
      `(lazy-highlight ((,cls (:background ,orange :foreground ,black-dim)))) ; color for matches for in process searches
      `(isearch ((t (:inherit lazy-highlight :weight bold)))) ; NOTE inherited by evil-ex-search
      `(shadow ((,cls (:foreground ,light-grey)))) ; shadowed text, undermines actual text
      `(header-line ((,cls (:background ,very-dark-grey :foreground ,blue)))) ; shown at the top of some buffers, including in HEXL mode and helm
      `(match ((,cls (:foreground ,green-dim)))) ; TODO no idea what this is for, document it
      `(underline ((,cls (:inherit default)))) ;; needs to be set because compile uses it by force :(

      ;; line numbers
      `(line-number ((,cls (:background ,black :foreground ,very-light-grey :weight normal :underline nil))))
      `(line-number-current-line ((,cls (:foreground ,blue :inherit line-number))))

      ;; font locks and syntax highlighting
      `(font-lock-builtin-face ((,cls (:foreground ,blue))))
      `(font-lock-comment-face ((,cls (:foreground ,grey))))
      `(font-lock-keyword-face ((,cls (:foreground ,green))))
      `(font-lock-constant-face ((,cls (:foreground ,red :inherit bold))))
      `(font-lock-function-name-face ((,cls (:foreground ,yellow-int))))
      `(font-lock-negation-char-face ((,cls (:foreground ,red))))
      `(font-lock-preprocessor-face ((,cls (:foreground ,green-dim))))
      `(font-lock-string-face ((,cls (:foreground ,blue))))
      `(font-lock-doc-face ((,cls (:inherit font-lock-string-face)))) ; TODO optional bg
      `(font-lock-type-face ((,cls (:foreground ,red))))
      `(font-lock-warning-face ((,cls (:background ,yellow-int :distant-foreground ,yellow-int :foreground ,very-dark-grey :underline nil :inherit bold))))
      `(font-lock-variable-name-face ((,cls (:foreground ,yellow-int))))

      ;; rainbow delimeters are pretty
      `(rainbow-delimiters-depth-1-face ((,cls (:foreground ,(nth 0 rainbow-delims)))))
      `(rainbow-delimiters-depth-2-face ((,cls (:foreground ,(nth 1 rainbow-delims)))))
      `(rainbow-delimiters-depth-3-face ((,cls (:foreground ,(nth 2 rainbow-delims)))))
      `(rainbow-delimiters-depth-4-face ((,cls (:foreground ,(nth 3 rainbow-delims)))))
      `(rainbow-delimiters-depth-5-face ((,cls (:foreground ,(nth 4 rainbow-delims)))))
      `(rainbow-delimiters-depth-6-face ((,cls (:foreground ,(nth 5 rainbow-delims)))))
      `(rainbow-delimiters-depth-7-face ((,cls (:foreground ,(nth 6 rainbow-delims)))))
      `(rainbow-delimiters-depth-8-face ((,cls (:foreground ,(nth 7 rainbow-delims)))))

      ;; hyperlinks and path links
      `(link ((,cls (:foreground ,blue))))   ; hyperlink
      `(link-visited ((,cls (:foreground ,turquoise))))

      ;;; modeline/spaceline
      ;; NOTE mode-line faces below only affect some portions of the mode line
      ;;      these include the buffer name, the mode list & buffer percentage.
      `(mode-line ((,cls (:box (:line-width 1 :color ,very-light-grey :style none)
                               :background ,very-light-grey ; also winum color
                               :foreground ,very-dark-grey))))

      `(spaceline-evil-normal  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background "DarkGoldenrod2"))))
      `(spaceline-evil-insert  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,green-int))))
      `(spaceline-evil-emacs   ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,blue))))
      `(spaceline-evil-replace ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,turquoise-int))))
      `(spaceline-evil-visual  ((,cls (:inherit mode-line :foreground ,very-light-grey :background ,dark-grey))))
      `(spaceline-evil-motion  ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,purple-int))))
      `(spaceline-minibuffer   ((,cls (:inherit mode-line :foreground ,very-dark-grey  :background ,blue))))

      ;; TODO configure mode-line-inactive as well
      ;; NOTE powerline-active-0 and powerline-inactive-0 also exist, but I have no idea what they do
      `(powerline-active1 ((,cls (:background ,black :foreground ,very-light-grey :inherit mode-line)))) ; major mode indicator
      `(powerline-active2 ((,cls (:background ,black :foreground ,very-light-grey :inherit mode-line)))) ; file-format + cursor-pos

      ;;; evil
      ;; permenent color of highlighted search results. Can be hidden using :nohlsearch
      `(evil-search-highlight-persist-highlight-face ((,cls (:background ,line-highlight-bg :foreground ,orange :inherit bold))))
      `(vimish-fold-overlay ((,cls (:background ,dark-grey :foreground ,green))))

      ;;; minibuffer & helm
      `(minibuffer-prompt ((,cls (:foreground ,yellow :weight bold)))) ; NOTE optional read only text preceding minibuffer input

      ;;; flycheck
      `(flycheck-info ((,cls (:underline (:style wave :color ,green)))))
      `(flycheck-warning ((,cls (:underline (:style wave :color ,yellow)))))
      `(flycheck-duplicate ((,cls (:underline (:style wave :color ,orange)))))
      `(flycheck-incorrect ((,cls (:underline (:style wave :color ,red)))))
      `(flycheck-fringe-info ((,cls (:foreground ,green-int :inherit fringe))))
      `(flycheck-fringe-warning ((,cls (:foreground ,yellow-int :inherit fringe))))
      `(flycheck-fringe-error ((,cls (:foreground ,red-int :inherit fringe))))

      ;;; frog jump buffer and avy
      `(avy-background-face ((,cls (:foreground ,grey))))
      `(avy-lead-face ((,cls (:background ,red-int :foreground "white"))))
      `(avy-lead-face-0 ((,cls (:background ,blue-int :foreground "white"))))
      `(avy-lead-face-1 ((,cls (:background ,very-light-grey :foreground ,very-dark-grey))))
      `(avy-lead-face-2 ((,cls (:background ,purple-int :foreground "white"))))
      `(frog-menu-border ((,cls (:background ,white :foreground ,white))))
      `(frog-menu-posframe-background-face ((,cls (:background ,very-dark-grey))))

      ;;; company - intellisense
      ;; NOTE foreground-color  very-dark-grey
      ;;      background-color  very-light-grey
      ;;      active-foreground very-light-grey
      ;;      active-background blue
      ;;      sp-color          turquoise-int
      `(company-tooltip-mouse ((,cls (:foreground ,turquoise-int))))
      `(company-template-field ((,cls (:foreground ,turquoise-int))))

      ;; scrollbar
      `(company-scrollbar-bg ((,cls (:background ,very-light-grey :foreground ,very-light-grey))))
      `(company-scrollbar-fg ((,cls (:background ,dark-grey       :foreground ,dark-grey))))

      ;; NOTE preview is for the leading text for a the sole match on a line
      `(company-preview ((,cls (:foreground ,blue-int :weight bold :inherit hl-line))))
      `(company-preview-common ((,cls (:inherit company-preview))))
      `(company-preview-search ((,cls (:foreground ,orange-int :weight normal :inherit company-preview))))

      ;; NOTE tooltip is the drop down menu which shows up when multiple results exist
      `(company-tooltip ((,cls (:background ,very-light-grey :foreground ,very-dark-grey :inherit bold))))
      `(company-tooltip-common ((,cls (:foreground ,blue-int :inherit company-tooltip))))
      `(company-tooltip-selection ((,cls (:foreground ,very-light-grey :background ,blue-int))))
      `(company-tooltip-common-selection ((,cls (:foreground ,very-dark-grey :background ,blue-int :inherit company-tooltip-common))))
      `(company-tooltip-search ((,cls (:foreground ,orange :inherit company-tooltip))))
      `(company-tooltip-search-common ((,cls (:inherit company-tooltip-search))))
      `(company-tooltip-search-selection ((,cls (:background ,blue-int :inherit company-tooltip-search))))

      ;; NOTE annotations are extra information in stdout
      `(company-tooltip-annotation ((,cls (:weight bold :foreground ,grey))))
      `(company-tooltip-annotation-selection ((,cls (:foreground ,turquoise-int :background ,blue-int :inherit company-tooltip-annotation))))

      ;;;; custom mode variants
      ;;; whitespace-mode
      ;; `(whitespace-trailing ((,cls (:foreground "yellow" :background ,red))))
      `(whitespace-space ((,cls (:foreground ,dark-grey))))
      `(trailing-whitespace ((,cls (:background ,dark-grey))))

      ;;; auto-highlight-symbol mode
      ;; Note: distant foreground is meaningless here because the faces are always given pririty
      `(ahs-definition-face ((,cls (:background ,blue-dim :distant-foreground ,blue-dim :foreground ,dark-grey))))
      `(ahs-edit-mode-face ((,cls (:background ,red-dim :distant-foreground ,red-dim :foreground ,very-light-grey))))
      `(ahs-face ((,cls (:background ,very-light-grey :foreground ,black :inherit bold)))) ; NOTE matching selections
      `(ahs-plugin-whole-buffer-face ((,cls (:background ,blue :distant-foreground ,green :foreground ,black))))
      `(ahs-plugin-bod-face ((,cls (:background ,blue-int :distant-foreground ,blue-int :foreground ,black))))
      `(ahs-plugin-defalt-face ((,cls (:background ,orange-dim :distant-foreground ,orange-dim :foreground ,black))))
      `(ahs-warning-face ((,cls (:foreground ,red-dim))))

      ;;; compilation mode
      `(compilation-line-number ((,cls (:foreground ,yellow))))
      `(compilation-column-number ((,cls (:inherit font-lock-doc-face))))
      ;; NOTE also represents value count in mode line
      ;; `(compilation-error ((,cls (:background ,red-int :distant-foreground ,red-int :foreground ,very-dark-grey))))
      ;; `(compilation-info ((,cls (:background ,green-int :distant-foreground ,green-int :foreground ,very-dark-grey))))
      ;; `(compilation-warning ((,cls (:background ,orange-int :distant-foreground ,orange-int :foreground ,very-dark-grey))))
      `(compilation-error ((,cls (:foreground ,red-int :inherit bold))))
      `(compilation-info ((,cls (:foreground ,green-int :inherit bold))))
      `(compilation-warning ((,cls (:foreground ,orange-int :inherit bold))))
      ;; NOTE theses only represent the exit status indicator
      `(compilation-mode-line-exit ((,cls (:foreground ,very-dark-grey))))
      `(compilation-mode-line-fail ((,cls (:foreground ,very-dark-grey))))
      `(compilation-mode-line-run ((,cls (:foreground ,very-dark-grey))))

      ;;; markdown-mode
      `(markdown-code-face ((,cls (:inherit default))))

      ;;; anzu
      `(anzu-mode-line ((,cls (:foreground ,very-dark-grey :inherit bold))))
      `(anzu-mode-line-no-match ((,cls (:foreground ,red-int :inherit bold))))

      ;;; hydra-posframe
      ;; for some reason... if hydra-posframe-face inherits default, internal border won't work
      `(hydra-posframe-face ((,cls (:background ,very-dark-grey :foreground ,very-light-grey))))
      `(hydra-posframe-border-face ((,cls (:inherit internal-border))))

      ;;; org-mode
      `(org-link ((,cls (:foreground ,turquoise :inherit bold))))
      `(org-footnote ((,cls (:foreground ,blue))))
      ;; Overridden by hl-todo-keyword-faces
      `(org-todo ((,cls (:foreground ,purple-int :inherit bold))))
      `(org-done ((,cls (:foreground ,green-int :inherit bold))))
      ;; `(org-warning ((,cls (:foreground ))))
      `(org-upcoming-deadline ((,cls (:foreground ,red-dim))))
      `(org-warning ((,cls (:foreground ,orange :inherit bold))))
      `(org-scheduled-today ((,cls (:foreground ,green-int))))
      `(org-block-begin-line ((,cls :background "royalblue4" :distant-foreground "royalblue4" :foreground "steelblue1")))
      ;; `(org-block-begin-line ((,cls :background "royalblue4" :distant-foreground "royalblue4" :foreground ,turquoise-int)))
      `(org-meta-line ((,cls (:inherit (font-lock-comment-face)))))
      ;; `(org-meta-line ((,cls (:background "springgreen4" :distant-foreground "springgreen4" :foreground "springgreen1"))))

      `(org-block ((,cls (:background ,extra-dark-grey))))
      `(org-document-title ((,cls (:foreground "white" :height 1.3 :inherit bold))))

      `(dashboard-text-banner ((,cls (:foreground ,orange-int))))

      ;; eshell-prompt-extras
      `(epe-remote-face ((,cls (:foreground ,turquoise))))
      `(epe-venv-face ((,cls (:foreground ,purple))))

      ;; magit
      `(magit-mode-line-process-error ((,cls (:foreground ,red :background ,very-light-grey :inherit bold))))

      ;; flyspell
      `(flyspell-duplicate ((,cls (:foreground ,orange-dim :underline t))))
      `(flyspell-incorrect ((,cls (:foreground ,red-dim :underline t))))

      ;;; ivy
      ;; `(ivy-current-match ((,cls :backgrouns ,blue-dim :foreground ,black))) ;; hl-line
      ;; `(ivy-confirm-face ((,cls :foreground ,green-dim :inherit bold)))
      ;; `(ivy-match-required-face ((,cls (:foreground ,red-int :inherit bold)))) ;; no candidate chosen
      )

     (custom-theme-set-variables 'an-old-hope
       `(hl-todo-keyword-faces '(("TODO"        . ,red)
                                 ("NEXT"        . ,red)
                                 ("RANT"        . ,red)
                                 ("SEE"         . ,red)
                                 ("THEM"        . ,purple)
                                 ("PROG"        . ,blue-int)
                                 ("OKAY"        . ,blue-int)
                                 ("DONT"        . ,green-int)
                                 ("FAIL"        . ,red)
                                 ("DONE"        . ,green-int)
                                 ("NOTE"        . ,yellow-int)
                                 ("KLUDGE"      . ,yellow-int)
                                 ("HACK"        . ,yellow-int)
                                 ("TEMP"        . ,yellow-int)
                                 ("FIXME"       . ,orange)
                                 ("WARN"        . ,orange)
                                 ("XXX+"        . ,orange)
                                 ("\\?\\?\\?+"  . ,orange))))
     (put 'custom-theme-set-variables 'lisp-indent-function 'defun)

     (provide-theme 'an-old-hope)

     ;; unbind all assigned colors
     (dolist (color colors)
       (makunbound (car color)))
   #+END_SRC

* Deprecated
  :PROPERTIES:
  :header-args+: :tangle no
  :END:

