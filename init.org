# -*- mode: org; coding: utf-8-unix; eval: (auto-fill-mode); fill-column: 85; -*-

#+TITLE: init.org
#+STARTUP: content

#+PROPERTY: header-args :tangle init.el :tangle-mode (identity #o544) :comments link :mkdirp yes :noweb yes :hlines no :shebang ";; -*- lexical-binding: t -*-"

* Config
  Default configuration parameters for my emacs distribution. This configuration is
  only used when there's an error loading the actual config at =bin/lisp/+config.el=.

  Configurations are sourced [[*config][here]].

  #+BEGIN_SRC emacs-lisp :tangle lisp/+config-default.el
    (defvar +packages
      '(magit                                                             ; It's git... but magical ÔÉê ,
        ;; ace-link                                                       ; Jump to links in the current buffer through an avy interface
        link-hint                                                         ; Jump to links in the current buffer through an avy interface
        ;; adaptive-wrap                                                  ; Visually wrap long lines. doesn't alter what you write.
        anzu                                                              ; Show the number of search results incrementally
        auto-highlight-symbol                                             ; Automatically highlight the symbol at point
        browser-edit                                                      ; Interface emacs with [[https://www.chromium.org/][chromium]]
        ;; command-log-mode                                               ; Echo commands as you enter them
        dashboard                                                         ; A feature full emacs dashboard
        ;; deft                                                           ; Note management system based on multiple org files
        ;; ebuku                                                          ; Interface to the, ebuku, bookmark manager
        engine-mode                                                       ; Run a search on a given search engine and view in brower
        eshell                                                            ; A nice lispy shell
        ;; expand-region                                                  ; Expand visual mode by semantic units
        flycheck                                                          ; A better buffer linter and error-checker package
        ;; frog-jump-buffer                                               ; Posframe to jump to a buffer
        ;; hide-comnt                                                     ; Minor mode to disable rendering of comments
        imenu                                                             ; Interactively jump to points of interest in this buffer
        olivetti                                                          ; A nice writing environment for emacs
        ;; pdf-tools                                                      ; Use emacs as quick and dirty pdf viewer
        ;; piper                                                          ; Interactive shell pipelines with emacs
        rainbow-mode                                                      ; Automatically color/highlight css color names
        ;; rake                                                           ; Run rake tasks
        ;; vi-tilde-fringe                                                ; Show tildes at the end of the buffer
        ;; vlc-rc                                                         ; Control [[https://www.videolan.org/vlc/index.en-GB.html][VLC]] from emacs
        ;; vterm                                                          ; A virtual terminal emulator... interfaced with emacs
        ;; wakatime                                                       ; Track your habits using the [[wakatime][https://wakatime.com/]]
        ;; ztree                                                          ; Directory tree viewer, think NERDTree

    ;;; Buffer Menus
        ;; buffer-menu                                                    ; The (default) builtin buffer menu
        ibuffer                                                           ; An improved buffer menu

    ;;; LSP Clients
        eglot                                                             ; A light weight and clean LSP client
        ;; lsp-mode                                                       ; A comprehensive and feature full client

    ;;; Interactive Diffs
        ;; ediff                                                          ; The builtin alternative, it has decades worth of bloat.
        vdiff                                                             ; A diff tool inspired by [[https://github.com/justbur/emacs-vdiff][vimdiff]]

    ;;; Package Enhancements
        ;; counsel-world-clock                                            ; Inspect the current time from ivy
        ;; diredfl                                                        ; Make dired /extra/ colorful
        ;; image-dired                                                    ; View images in dired like sessions
        ;; edit-indirect                                                  ; Edit regions of a buffer in another mode.
        ;; hydra-posframe                                                 ; Show hydras in a posframe
        ebib                                                              ; Nice emacs based interface for editing bibtex files
                                                                          ; NOTE: This package requires bibtex to be enabled
        ;; tramp-term                                                     ; Make term work seamlessly in tramp sessions
        ibuffer-vc                                                        ; Filter ibuffer buffers by version-control repos
        ibuffer-tramp                                                     ; Only show ibuffer buffers in remote tramp sessions
        ;; ibuffer-persp                                                  ; Filter ibuffer buffers by emacs perspectives
        ibuffer-projectile                                                ; Filter ibuffer buffers by active projects

    ;;; language-support
        ;; ggtags                                                         ; GNU Global source code tagging system
        ;; ycmd                                                           ; A language-server for most languages. written in python.
        ;; ruby-robe                                                      ; Code navigation, doc-lookup and completion for Ruby

    ;;; Languages
        bibtex
        c
        ;; cmake
        css
        csv
        elisp
        git-langs
        ;; haskell
        html
        ;; java
        golang
        javascript
        ;; typescript                                                     ; NOTE requires javascript to also be enabled
        json
        ;; jupyter
        ;; kotlin
        ;; glsl
        latex
        makefile
        markdown
        python
        ;; powershell
        ;; restclient
        ruby
        rust
        sh-script
        sql
        ssh-config
        vimlang
        yaml
        ;; yarn
        )
      "Packages I want setup on startup.")

    (defvar +sh-use-lsp nil
      "When true `sh-script-mode' and it's derivatives will use LSP when available")

    (defvar +man-command (if (windows-p) 'woman 'man)
      "Preferred command used for manuals")

    (defvar +c-prefer-clangd t
      "When true lsp and c will use clangd over ccls")

    (defvar +icons-available t
      "When true `all-the-icons' will be available even in terminal emacs.")

    (provide '+config-default)
  #+END_SRC

* Setup
** early-init
   :PROPERTIES:
   :header-args+: :tangle early-init.el
   :END:

   [[https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=24acb31c04b4048b85311d794e600ecd7ce60d3b][early-init]] is automatically sourced by emacs since 27 forward, before any other
   enhancements or packages have been sourced. Let's make sure it's loaded on older
   emacs versions as well.

   #+BEGIN_SRC emacs-lisp :tangle init.el
     (when (version< emacs-version "27")
       (load (concat user-emacs-directory "early-init.el")))
   #+END_SRC

   Let's give the garbage collector free reign to take up as much memory as it needs
   so that we can speed up startup times. Source [[https://github.com/hlissner/doom-emacs/issues/310][doom]].

   #+BEGIN_SRC emacs-lisp
     (defvar default-gc-cons-threshold 16777216 ; 16mb
       "my default desired value of `gc-cons-threshold'
     during normal emacs operations.")

     ;; make garbage collector less invasive
     (setq gc-cons-threshold  most-positive-fixnum
           gc-cons-percentage 0.6)
   #+END_SRC

   Let's disable some of the unecessary GUI enhancements, you can re-enable them at
   runtime+, but I don't like them anyways+. Disabling them early also prevents GUI
   enhancements being partially visible at startup and then immeadiately disabled.

   #+BEGIN_SRC emacs-lisp
      ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
      (push '(menu-bar-lines . 0) default-frame-alist)
      (push '(tool-bar-lines . 0) default-frame-alist)
      (push '(vertical-scroll-bars) default-frame-alist)
   #+END_SRC

   We should also make sure these enhancements persists even in older emacs versions.
   We also have to disable ~scroll-bar-mode~ the direct way, not just in ~early-init~,
   or else spaceline gets truncated on the right hand side.

   #+BEGIN_SRC emacs-lisp :tangle init.el
     (when (version< emacs-version "27")
       (menu-bar-mode -1)     ; dropdown menu list below frame title
       (tool-bar-mode -1)     ; short mini menu shown below the menu bar
       )

     (scroll-bar-mode -1)   ; scrol bar shown on frames right side
   #+END_SRC

   Also erase ~file-name-handler-alist~ for startup.

   #+BEGIN_SRC emacs-lisp
     (setq default-file-name-handler-alist file-name-handler-alist
           file-name-handler-alist nil)
   #+END_SRC

   And then make sure these changes are undone after emacs has started.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook
               (lambda (&rest _)
                 (setq gc-cons-threshold default-gc-cons-threshold
                       gc-cons-percentage 0.1
                       file-name-handler-alist default-file-name-handler-alist)

                 ;; delete no longer necessary startup variable
                 (makunbound 'default-file-name-handler-alist)))
   #+END_SRC

** paths
   Create some macros/functions to ease the definitions of paths within my dotemacs
   home directory.

   #+BEGIN_SRC emacs-lisp
     (if (version<= emacs-version "26.3")
         (require 'cl)
       (require 'cl-lib))

     (defun join-path (root path &rest rest)
       "like python' os.path.join, join a series of paths together."
       (setq path (if (file-name-absolute-p path)
                      path
                    (concat root
                            (unless (string-suffix-p "/" root)
                              "/")
                            path)))
       (if rest (apply 'join-path path rest) path))

     (cl-defmacro dotemacs-initialise-path!
         (path-type path &optional &key
          (alias (intern (concat (symbol-name path-type) "!"))))
       "initialise a constant for PATH and a function to join onto PATH.
     The function will be of the form dotemacs-join-PATH-TYPE-path and will have
     an alias of the form PATH-TYPE!"
       (let* ((path-type-name (symbol-name path-type))
              (path-sym (intern (concat "dotemacs-"      path-type-name "-path")))
              (func-sym (intern (concat "dotemacs-join-" path-type-name "-path"))))
         `(progn
            (defconst ,path-sym
              (eval-when-compile (concat user-emacs-directory ,path)))

            (defun ,func-sym (path &rest args)
              ,(concat "join args onto directory: " path)
              (apply 'join-path ,path-sym path args))

            (when (quote ,alias)
              (defalias (quote ,alias) (symbol-function (quote ,func-sym)))))))
   #+END_SRC

   Initialise shortcut functions for the following paths.

   #+NAME: paths
   | Name | Path |
   |------+------|
   | etc  | etc  |
   | bin  | bin  |
   | var  | var  |
   | org  | org  |
   | lisp | lisp |

   #+BEGIN_SRC emacs-lisp :var paths=paths
     (cl-loop
      for (name path) in paths
      collect (eval
               `(dotemacs-initialise-path! ,(intern name) ,path)))
   #+END_SRC

   Now let's set the default paths for a bunch of emacs builtins, see [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering.el]].

   #+BEGIN_SRC emacs-lisp
     (with-no-warnings
       (setq
        ;;; Package Directories
        package-user-dir                                   (lisp! "elpa")
        external-packages-directory                        (lisp! "pkgs")

        abbrev-file-name                                   (etc! "abbrev.el")
        auto-insert-directory                              (etc! "auto-insert")
        auto-save-list-file-prefix                         (var! "auto-save" "sessions/")
        bookmark-default-file                              (etc! "bookmarks.el")
        custom-file                                        (etc! "custom.el")
        custom-theme-directory                             (etc! "themes")
        desktop-path                                       `(,(var! "desktop/"))
        diary-file                                         (var! "diary")
        eshell-directory-name                              (var! "eshell")
        eshell-aliases-file                                (var! "eshell" "aliases")
        eshell-login-script                                (etc! "eshell" "loginrc")
        eshell-rc-script                                   (etc! "eshell" "eshrc")
        eww-bookmarks-directory                            (var! "eww/")
        gamegrid-user-score-file-directory                 (var! "gamegrid/")
        ido-save-directory-list-file                       (var! "ido-save-directory-list.el")
        image-dired-db-file                                (var! "image-dired" "db.el") ; tag associations
        image-dired-dir                                    (var! "image-dired/")
        image-dired-gallery-dir                            (var! "image-dired" "gallery/")
        image-dired-temp-image-file                        (var! "image-dired" "temp-image")
        image-dired-temp-rotate-image-file                 (var! "image-dired" "temp-rotate-image")
        kkc-init-file-name                                 (var! "kkc-init.el")
        message-auto-save-directory                        (var! "messages/")
        meghanada-server-install-dir                       (var! "meghanada")
        +dashboard-banners-directory                       (etc! "banners/")
        newsticker-cache-filename                          (var! "newsticker/cache.el")
        newsticker-dir                                     (var! "newsticker/data/")
        nsm-settings-file                                  (var! "nsm-settings.el")
        omnisharp-cache-directory                          (var! "omnisharp/cache")
        org-directory                                      (org! "")
        org-clock-persist-file                             (var! "org/clock-persist.el")
        org-id-locations-file                              (var! "org/id-locations.el")
        org-publish-timestamp-directory                    (var! "org/timestamps/")
        org-registry-file                                  (var! "org/registry.el")
        org-default-notes-file                             (org! "notes.org")
        org-projectile-projects-directory                  (org! "notes/projects/")
        org-projectile-projects-file                       (org! "notes/projects/global.org")
        org-preview-latex-image-directory                  (var! "org/latex")
        package-quickstart-file                            (var! "package-qs.el")
        recentf-save-file                                  (var! "recentf.el")
        savehist-file                                      (var! "savehist.el")
        server-auth-dir                                    (var! "server/")
        ;; server-socket-dir                                  server-auth-dir
        shared-game-score-directory                        (var! "gamescore/")
        tramp-auto-save-directory                          (var! "tramp/auto-save/")
        tramp-persistency-file-name                        (etc! "private/tramp/history.el")
        url-cache-directory                                (var! "url/cache/")
        url-configuration-directory                        (var! "url/configuration/")

        ;;; third party
        request-storage-directory                          (var! "requests")
        ))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defvar +org-pdf-directory nil
       "default directory for `org-pdftools-complete-link', see [[*org-pdftools][org-pdftools]].")
   #+END_SRC

   Update load path so emacs can quickly lookup require targets.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path dotemacs-lisp-path)
     (add-to-list 'load-path (lisp! "core"))
     (add-to-list 'load-path external-packages-directory)
   #+END_SRC

** utils

   Define some macros and helpers to assist with later configurations.

   Check emacs versions:
   #+BEGIN_SRC emacs-lisp
     (defmacro emacs= (version)
       `(version= emacs-version ,version))

     (defmacro emacs< (version)
       `(version< emacs-version ,version))

     (defmacro emacs<= (version)
       `(version<= emacs-version ,version))

     (defmacro emacs>= (version)
       `(not (emacs< ,version)))

     (defmacro emacs> (version)
       `(not (emacs<= ,version)))
   #+END_SRC

   Check operating-system/host-environment.
   #+BEGIN_SRC emacs-lisp
     (defun windows-p ()
       (member system-type '(cygwin ms-dos windows-nt)))

     (defun macos-p ()
       (eq system-type 'darwin))

     (defun unix-p ()
       (member system-type '(gnu gnu/linux gnu/kfreebsd)))
   #+END_SRC

  [[https://github.com/hlissner/doom-emacs/blob/develop/core/core-lib.el#L458][doom just keeps providing]], a transient-hook is a hook that's run only once and then
  promptly erases itself. can be bound to either a function or a hook variable.

  #+BEGIN_SRC emacs-lisp
    (defvar +transient-hook-counter 0
      "used to generate a unique function-name for a transient hook.")

    (defmacro add-transient-hook! (hook-or-function &rest forms)
      "Attaches a self-removing function to HOOK-OR-FUNCTION.
    FORMS are evaluated once, when that function/hook is first invoked, then never
    again.
    HOOK-OR-FUNCTION can be a quoted hook or a sharp-quoted function (which will be
    advised)."
      (declare (indent 1))
      (let ((append (if (eq (car forms) :after) (pop forms)))
            ;; Avoid `make-symbol' and `gensym' here because an interned symbol is
            ;; easier to debug in backtraces (and is visible to `describe-function')
            (fn (intern (format "emacs--transient-hook-%d-h"
                                (cl-incf +transient-hook-counter)))))
        `(let ((sym ,hook-or-function))
           (defun ,fn (&rest _)
             ,(format "Transient hook for %S" hook-or-function)
             ,@forms
             (let ((sym ,hook-or-function))
               (cond ((functionp sym) (advice-remove sym #',fn))
                     ((symbolp sym)   (remove-hook sym #',fn))))
             (unintern ',fn nil))
           (cond ((functionp sym)
                  (advice-add ,hook-or-function ,(if append :after :before) #',fn))
                 ((symbolp sym)
                  (put ',fn 'permanent-local-hook t)
                  (add-hook sym #',fn ,append))))))
  #+END_SRC

** packages
   Let's setup the packages needed to bootstrap my dotfiles, we're gonna need:

   #+NAME: setup-packages-list
   - use-package
   - general
   - delight
   - diminish
   - dash
   - bind-map

   TODO choose delight or diminish, not both.

   But ~package.el~ is annoying, let's prevent it from starting itself.

   #+BEGIN_SRC emacs-lisp
     (setq package-enable-at-startup  nil
           package--init-file-ensured nil
           package-quickstart         nil)
   #+END_SRC

   Some packages are out of date and thus their PGP signatures don't work.
   I could go over them manually, but for the sake of my sanity, let's just
   disable signature checks. WARN this isn't safe, proceed at your own risk.

   #+BEGIN_SRC emacs-lisp
     (setq package-check-signature nil)
   #+END_SRC

   Specify the package archives to be used by ~package.el~.

   TODO maybe include src_emacs-lisp{'("org" . "http://orgmode.org/elpa/")}.

   #+NAME: package-archives
   | name  | url                           |
   |-------+-------------------------------|
   | melpa | https://melpa.org/packages/   |
   | gnu   | http://elpa.gnu.org/packages/ |

   #+BEGIN_SRC emacs-lisp :var archives=package-archives :results value
     (setq package-archives (cl-loop for (name source) in archives
                                     collect (cons name source)))
   #+END_SRC

   Initialise packages. This is a slow and painful process, but I haven't found a way
   to disable it without breaking everything. There's no way to check my required packages
   are installed without initializing.

   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   #+END_SRC

   That said, we can avoid ~package-refresh-contents~ until it's needed.

   #+BEGIN_SRC emacs-lisp
     (add-transient-hook! #'package-install
      (package-refresh-contents))
   #+END_SRC

   Finally, install base packages +took you long enough :tongue:+.

   #+BEGIN_SRC emacs-lisp :var to-install=setup-packages-list
     (dolist (package to-install)
       ;; iterate for all required packages
       (setq package (intern (car package)))

       (unless (package-installed-p package)
         (package-install package))

       (require package))
   #+END_SRC

   Also install [[https://github.com/raxod502/straight.el][straight]], the modern package manager for emacs. I would use straight
   exclusively, but it's *noticably* slow when you've got a lot of packages.

   #+BEGIN_SRC emacs-lisp
     (with-no-warnings
       (defvaralias 'straight-base-dir 'dotemacs-lisp-path))

     (let ((bootstrap-file (lisp! "straight/repos/straight.el/bootstrap.el"))
           (straight-install-dir straight-base-dir)
           (bootstrap-version 5))
       (if (file-exists-p bootstrap-file)
           (message "Installing the straight package manager")
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+END_SRC

   Make straight more like ~use-package~'s default behaviour.

   #+BEGIN_SRC emacs-lisp
     (setq straight-use-package-by-default nil
           use-package-always-ensure       nil
           straight-allow-recipe-inheritance t)
   #+END_SRC

*** extensions
    Where I define extensions to use-package.

    The =:only= extension is like the builtin =:if= extension except it skips installation
    when the condition passed to it fails as well.

    #+BEGIN_SRC emacs-lisp
      ;; WARN: keep this at the start of `use-package-keywords' lest chaos
      ;; befall you.
      (push :only use-package-keywords)

      (defun use-package-normalize/:only (_ keyword args)
        (use-package-only-one (symbol-name keyword) args
          (lambda (_ arg) arg)))

      (defun use-package-handler/:only (name-symbol _ condition rest state)
        (let ((body (use-package-process-keywords name-symbol rest state)))
          `((when ,condition ,@body))))
    #+END_SRC

*** external
    Some packages don't have git repos or an easy to install interface, for these
    I've taken to just retrieving the files at startup and using a simple hash check
    to ensure they haven't been tampered with.

    TODO look into [[https://github.com/quelpa/quelpa][quelpa]], it purports to let you do just this.

    #+NAME: external-packages
    | name                | hash                                                             | url                                                                                       |
    |---------------------+------------------------------------------------------------------+-------------------------------------------------------------------------------------------|
    |                     | <15>                                                             |                                                                                           |
    | hide-comnt          | 9668645eab1fd8d223967ab90d3d34fe6e98aa3af47516f45e18f094137d7c6c | https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/hide-comnt.el          |
    | imenu-tree          | c4b3ae0d8b5c3e5a50c9c4b3f96fd48e309c2fae9a8902a1d649063c7b3b611c | https://www.emacswiki.org/emacs/download/imenu-tree.el                                    |
    | help-fns+           | 57c5c864fef8052df6d0d22d778c4379d28ac69dc377a34ea75d5cbed117c120 | https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/help-fns%2B.el         |
    | lorem-ipsum         | 54cb139d6c88632aaef6364a2a6c6cadbb9a5082eb5032e69b5139dcc7074d88 | https://www.emacswiki.org/emacs/download/lorem-ipsum.el                                   |
    | profile-dotemacs    | 26d98fd26c75281c6a7934479ed9df54ca8c6259df4b3ef435097800aaf6dca5 | http://www.randomsample.de/profile-dotemacs.el                                            |
    | open-junk-file      | c0b835b329758dced4ccae6c2f3fd5af16af929437110ddde00ea55dc7d47be3 | https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/open-junk-file.el      |
    | sqlite-dump         | 8277c32f3e9dad7f760b946609c918dd51f32990137f839a000fb6ff5a049939 | https://user42.tuxfamily.org/sqlite-dump/index.html                                       |
    | company-cmake       | 4d682308eb4f6a4be92a4b7dcb2d181b5c26b4337799de0a308969d8babef0a2 | https://raw.githubusercontent.com/purcell/company-cmake/master/company-cmake.el           |
    | transpose-frame     | a40264a07b25d2c1d8d1be341d42952329d1bbfab8c23100904627fef4f4c7b8 | https://www.emacswiki.org/emacs/download/transpose-frame.el                               |
    | hs-lint             | 61bf6d3cfd43f2729d85ed407a7de5fd6b025540229bc0b57c37785d0b6d7450 | https://raw.githubusercontent.com/ndmitchell/hlint/master/data/hs-lint.el                 |
    | hlint-refactor-mode | 55d5a9e99f0384b15eacfdf2b17ae313c6ddbb0343980ed324707fcaaf2b718a | https://raw.githubusercontent.com/mpickering/hlint-refactor-mode/master/hlint-refactor.el |
    | miniedit            | c632c33c099362b084d965c51ec4b933be1278c7064096ce3b97cc830436055b | https://raw.githubusercontent.com/emacsmirror/miniedit/master/miniedit.el                 |
    | ibuffer-persp       | 6395294e2dd368866d79a81d37c27961e0f871937ccd82cff317e5ad67c52652 | https://raw.githubusercontent.com/rakshasa/ibuffer-persp/master/ibuffer-persp.el          |
    | org-link-edit       | ac84061d951ef9ef82794ba7f4416afb6da4283a182490a11ae455077321814c | https://raw.githubusercontent.com/kyleam/org-link-edit/master/org-link-edit.el            |
    | org-man             | d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed | https://raw.githubusercontent.com/aspiers/orgmode/master/contrib/lisp/org-man.el          |
    | vline               | d2be35d52bbfddf10367e8bc2326630ae5f85e6720ec4714d715cde7904846fb | https://raw.githubusercontent.com/emacsmirror/vline/master/vline.el                       |
    | org-eldoc           | c79cba0929a6886449d39a32ef629653759d0041fe8d97f9727d8004f89b0592 | https://github.com/msnoigrs/org-mode/raw/master/contrib/lisp/org-eldoc.el                 |

    #+BEGIN_SRC emacs-lisp :var package-list=external-packages
      (defun external-packages/download-external-package (url dest-path)
        (let* ((dest-buffer (get-buffer-create "*external-packages*"))
               (download-args `("curl"              ; program
                                nil                 ; input file
                                ,dest-buffer        ; output dest
                                nil                 ; redisplay?
                                ; args
                                "--create-dirs"
                                "-L"
                                "-o" ,dest-path
                                ,url))
               exit-code)
          (with-current-buffer dest-buffer
            (insert (format "curl: %s\n"
                            (nthcdr 4 download-args)))
            (setq exit-code (apply 'call-process download-args))
            (insert "\n"))

          exit-code))

      (defun external-packages/validate-package-hash (file dest-path hash)
        (let (result)
          (if (string-equal "" hash)
              (progn
                (display-warning 'external-packages (format "package %s has no hash check given: %s"
                                                            file
                                                            url))
                (setq result t))
            (with-temp-buffer
              (insert-file-contents dest-path)
              (let ((hash-result (secure-hash 'sha256 (buffer-string))))
                (if (string-equal hash hash-result)
                    (setq result t)
                  (display-warning 'external-packages (format "package %s failed with hash: %s != %s"
                                                              file
                                                              hash
                                                              hash-result))
                  (delete-file dest-path)))))
          result))

      (let ((install-path external-packages-directory)
            failed-installs)
        (push install-path load-path)
        ;; include packages in load path

        (dolist (row package-list)
          (let* ((file (nth 0 row))
                 (hash (nth 1 row))
                 (url  (nth 2 row))
                 (dest-path (expand-file-name (join-path install-path (concat file ".el"))))
                 download-args exit-code)
            (unless (or (string-equal "" file)
                        (string-equal "" url))
              (unless (file-exists-p dest-path) ;; only download when doesn't already exist
                (unless (and (zerop (external-packages/download-external-package url dest-path))
                             (external-packages/validate-package-hash file dest-path hash))
                  (push file failed-installs))))))

        (if (eq failed-installs nil)
            (let ((buffer (get-buffer "*external-packages*")))
              (and buffer
                   (kill-buffer buffer))) ;; kill process buffer when nothing failed
          (display-warning :warning (format "external-package : failed to download packages: %s" failed-installs))
          ))
    #+END_SRC

** editor
   Make emacs a saner, friendlier, development environment.

   Warn me when my init file is out of date.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook
               (lambda ()
                 "warn me when my init.el file is out of date"
                 (when (file-newer-than-file-p (join-path user-emacs-directory "init.org")
                                               (join-path user-emacs-directory "init.el"))
                   (display-warning 'init
                                    (concat "your configuration file is out of date: "
                                            (join-path user-emacs-directory "init.org"))))))
   #+END_SRC

*** aliases
    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
      (defalias 'regexp-string-match #'string-match)

      (defalias 'path-basename                   #'file-name-nondirectory)
      (defalias 'path-dirname                    #'file-name-directory)
      (defalias 'path-extension                  #'file-name-extension)
      (defalias 'path-without-extension          #'file-name-sans-extension)
      (defalias 'path-basename-without-extension #'file-name-base)

      (defalias 'gnu-debugger     #'gdb)
      (defalias 'gud-gnu-debugger #'gud-gdb)
      (defalias 'perl-debugger    #'perldb)
      (defalias 'java-debugger    #'jdb)
      (defalias 'write-autosave 'do-auto-save)
    #+END_SRC

*** variables
     #+BEGIN_SRC emacs-lisp
       (setq delete-old-versions t                                                  ; delete excess backup versions silently
             version-control t                                                      ; use version control
             vc-make-backup-files t                                                 ; make backups in vc as well
             vc-follow-symlinks t                                                   ; no confirmation when opening symlinks
             ring-bell-function 'ignore                                             ; NO ANNOYING RINGS!!!
             sentence-end-double-space nil                                          ; sentence SHOULD end with only a fullstop
             delete-by-moving-to-trash t                                            ; don't rm, trash my garbage please :)
             search-whitespace-regexp nil                                           ; SPC means SPC, not any amount of spaces
             enable-local-variables t                                               ; allow safe variables, even alongside unsafe ones
             hl-line-sticky-flag nil                                                ; only highlight line in active window
             auto-save-interval 50                                                  ; auto-save as frequently as possible
             backup-by-copying t                                                    ; don't clobber symlinks
             which-key-enable-extended-define-key t                                 ; let's you pass a cons to define-key
             kill-whole-line t                                                      ; kill-line includes eol
             help-window-select t                                                   ; always select the help window when it pops up
             enable-recursive-minibuffers t                                         ; allow entering minibuffer, when already in minibuffer
             find-file-suppress-same-file-warnings t                                ; don't warn when finding a file that's already open.
             recentf-max-saved-items 2048                                           ; keep this many files in the recentf history.
             completion-ignore-case t                                               ; make completion case insensitive, holding down shift is annoying.
             recenter-positions '(top middle bottom))
     #+END_SRC

     Set the default fill column for ~auto-fill-mode~.

     #+BEGIN_SRC emacs-lisp
       (setq-default
        ;; default-fill-column 150                                                ; toggle wrapping text at given character
        fill-column 85                                                         ; the default line length allowed by auto-fill-mode
        )
     #+END_SRC

    Backup behaviour of emacs. NOTE ~kept-new-versions~ and ~kept-old-versions~ are
    both used to determine the allowed number of backups. emacs will keep at most
    ~kept-new-versions~ + ~kept-old-versions~ backups.

    #+BEGIN_SRC emacs-lisp
      (setq
       kept-new-versions 15                                                   ; keep this many latest versions of file
       kept-old-versions 5                                                    ; keep this many early versions of file
       )
    #+END_SRC

    The default major mode; use for eg. in newly made files with an unknown extension.

    #+BEGIN_SRC emacs-lisp
      (setq-default major-mode 'text-mode)
    #+END_SRC

    Default encodings for files, this changes depending on platform so lets force it
    to go the unix route.

    #+BEGIN_SRC emacs-lisp
      (setq-default
       default-buffer-file-coding-system 'utf-8-unix
       buffer-file-coding-system 'utf-8-unix)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil                                           ; use spaces, not tabs
                    show-trailing-whitespace nil
                    truncate-lines t                                               ; don't split long lines onto next lines
                    scroll-conservatively 101                                      ; smooth... enough scrolling going line by line
                    scroll-preserve-screen-position t
                    cursor-in-non-selected-windows nil                             ; don't show the cursor in inactive windows
                    echo-keystrokes 0.02                                           ; print inputted prefix keys after a pause.
                    )
    #+END_SRC

    Set the string shown on the title bar of emacs frames.

    #+BEGIN_SRC emacs-lisp
      (setq frame-title-format
            ;; sets the title string displayed on the frame above. Format of the command is
            ;; a printf like string. Wrap any code you want evaluated conditionally into a list
            ;; and if the first value of that list is a string, it will be evaluated. You can
            ;; include variables anywhere in the string, including sublists, but no functions.
            ;;
            ;; See the format guide here: https://www.emacswiki.org/emacs/FrameTitle
            `(;;,(user-login-name)
              "emacs@"
              ,(system-name)
              " [%*] %m"
              (:eval (when (derived-mode-p 'pdf-view-mode)
                       (format "(%d/%d)"
                               (pdf-view-current-page)
                               (pdf-cache-number-of-pages))))
              (buffer-file-name " : %f")))
    #+END_SRC

    Auto saves and backup files, both important parts of emacs

    #+BEGIN_SRC emacs-lisp
      (setq
       ;; where do autosave files get stored
       auto-save-file-name-transforms `((".*" ,(var! "auto-save" "sessions/") t))

       ;; where do backup files get stored
       backup-directory-alist `(("." . ,(var! "backups/")))

       ;; don't show files matching these regexps in recentf alist.
       recentf-exclude (list (rx (or "/tmp/"
                                     "/ssh:"
                                     "/sudo:"
                                     "COMMIT_EDITMSG"
                                     (and (or "/TAGS"
                                              "/GTAGS"
                                              "/GRAGS"
                                              "/GPATH"
                                              ".mkv"
                                              ".avi"
                                              (and ".mp" (any "3" "4"))
                                              (and ".doc" (? "x"))
                                              ".sub"
                                              ".srt"
                                              ".ass"
                                              ".elc"
                                              (and "tmp." (+ (not (any "/" "\\")))))
                                          eol)))))
   #+END_SRC

    load any variables in my ~custom.el~ file

    #+BEGIN_SRC emacs-lisp
      (and (file-exists-p custom-file) (load custom-file))
    #+END_SRC

*** user-interface
    Disable GUI enhancements, some of these are taken care of in [[*early-init][early-init]].

    Let's stop the cursor blinking annoyingly.

    #+BEGIN_SRC emacs-lisp
      (blink-cursor-mode -1)
    #+END_SRC

    Let's also prevent the pointless startup message.

    #+BEGIN_SRC emacs-lisp
      (advice-add 'display-startup-echo-area-message :override #'ignore)
    #+END_SRC

    Let's make sure the appropriate window is selected at startup

    #+BEGIN_SRC emacs-lisp
      (add-hook 'emacs-startup-hook
                (lambda (&rest _)
                  ;; switch focus to any error or compilation windows
                  (let* ((window-list  (window-list))
                         (window-count (length window-list))
                         (focus-list   '("*Warnings*"
                                         "*Compile-Log*"))
                         (kill-list    '()))
                    (when (> window-count 1)
                      (dolist (window (window-list))
                        (let ((buffer-name
                               (buffer-name (window-buffer window))))
                          (cond
                           ((member buffer-name focus-list)
                            (select-window window))
                           ((member buffer-name kill-list)
                            (delete-window window)))))))))
    #+END_SRC

    Make emacs less verbose in some places.

    #+BEGIN_SRC emacs-lisp
      (setq command-error-function
            (defun command-error-function! (data context caller)
              "hide some error message"
              (when (not (memq (car data) '(;; buffer-read-only
                                            beginning-of-buffer
                                            end-of-buffer)))
                (command-error-default-function data context caller))))
    #+END_SRC

*** term
    Classical terminals [[https://emacs.stackexchange.com/questions/32294/how-to-make-emacs-recognise-c-shift-combinations-in-terminal-mode?rq=1][don't support]] extended, GUI like keybindings. It's a shame,
    but modern terminals are starting to work around it, for eg. *XTerm*.

    [[https://wiki.archlinux.org/index.php/Tmux][TMUX]] (the terminal multiplexer) supports XTerm bindings, but emacs doesn't accept
    them. Let's change that, curtesy of the [[https://wiki.archlinux.org/index.php/Emacs#Shift_.2B_Arrow_keys_not_working_in_emacs_within_tmux][arch wiki]].

    #+BEGIN_SRC emacs-lisp
      (advice-add 'terminal-init-screen :before
                  (defun tmux (&rest _)
                    "Apply xterm keymap, allowing use of keys passed through tmux."
                    (when (getenv "TMUX")
                      (let ((map (copy-keymap xterm-function-map)))
                        (set-keymap-parent map (keymap-parent input-decode-map))
                        (set-keymap-parent input-decode-map map)))))
    #+END_SRC

    Emacs also comes with an ~xterm-mouse-mode~, which lets you use the mouse to
    select things in the terminal, like you would in GUI emacs. By default you have
    to enable it manually, let's enable it when an xterm like terminal is initialized.

    #+BEGIN_SRC emacs-lisp
      (defun enable-xterm-mouse-mode+ ()
        (xterm-mouse-mode +1))

      (advice-add 'terminal-init-xterm :after #'enable-xterm-mouse-mode+)
      (advice-add 'terminal-init-tmux  :after #'enable-xterm-mouse-mode+)
    #+END_SRC

    Because of XTerms extended keycodes, you can reclaim some of the keycodes which've
    been taken by emacs. I've defined a function which adds some more keycodes to the
    XTerm keymap and reclaims some bindings that conventional terminals have repurposed.

    Here's an overview of where we stand.

    | reclaimed | key       | num | name | terminal-key | notes                       |
    |-----------+-----------+-----+------+--------------+-----------------------------|
    | [ ]       | backspace | 127 | DEL  | Ctrl+?       | Maybe translated to Ctrl+h  |
    | [X]       | tab       |   9 | TAB  | Ctrl+I       |                             |
    | [ ]       | linefeed  |  10 | LFD  | Ctrl+j       | Few keyboards have this key |
    | [X]       | return    |  13 | RET  | Ctrl+m       |                             |
    | [X]       | escape    |  27 | ESC  | Ctrl+[       |                             |

    NOTE: in GUI, the behaviour shouldn't have changed. The following keys haven't
    been reclaimed, but the GUI variants override the term versions anyways, so you
    shouldn't really notice.

    #+BEGIN_SRC emacs-lisp
      (defun term-setup-frame-bindings+ (&optional frame)
        (with-selected-frame (or frame (selected-frame))
          ;; for some reason, C-/ is remapped to C-_, but (kbd "C-/") isn't C-_,
          ;; it's this bizarre vector here.
          (define-key input-decode-map "" [67108911])

          ;; reclaim key combinations from terminal. See initial source [[https://emacs.stackexchange.com/questions/220/how-to-bind-c-i-as-different-from-tab][here]].
          ;; WARN for this to work, you can't use (kbd key) because that automatically
          ;; gets translated to the original keys. You'll have to use [key] directly.
          ;; You'll also need to declare some input combination to be (effectively) key
          ;; for your terminal, see the xterm eg below.
          (define-key input-decode-map [?\C-i] [C-i]) ;; was TAB
          (if (display-graphic-p)
              ;; GUI specific remappings
              (progn
                (define-key input-decode-map "	"  [C-i])
                (define-key input-decode-map [?\C-m] [C-m]))
            ;; terminal remappings
            (define-key input-decode-map "	"    nil))

          ;; evaluate the following to translate reclaimed bindings back for
          ;; terminals which don't specify any special key combinations for the
          ;; reclaimed keys :cry:.
          ;; (define-key function-key-map [C-i]  "	")
          ;; (define-key function-key-map [C-m]  "")
          (define-key function-key-map [C-\[] "")                             ; I don't mind this being taken

          ;; some extra bindings I've got in st, see term/xterm.el
          (when (featurep 'xterm)
            (define-key xterm-function-map "\e[32;2u"  [33554464])
            (define-key xterm-function-map "\e[127;2u" [S-backspace])
            (define-key xterm-function-map "\e[127;5u" [C-backspace])
            (define-key xterm-function-map "\e[127;6u" [C-S-backspace])
            (define-key xterm-function-map "\e[13;2u"  [S-return])
            (define-key xterm-function-map "\e[13;8u"  [C-M-S-return])
            (define-key xterm-function-map "\eOB"      [down])
            (define-key xterm-function-map "\eOA"      [up])
            (define-key xterm-function-map "\eOD"      [left])
            (define-key xterm-function-map "\eOC"      [right])
            (define-key xterm-function-map "\e[1;2B"   [S-down])
            (define-key xterm-function-map "\e[1;2A"   [S-up])
            (define-key xterm-function-map "\e[1;2D"   [S-left])
            (define-key xterm-function-map "\e[1;2C"   [S-right])
            (define-key xterm-function-map "\e[1;5Z"   [C-S-tab])
            (define-key xterm-function-map "\e[32;3u"  [134217760])
            (define-key xterm-function-map "\e[58;4u"  [134217786])                         ; M-:
            (define-key xterm-function-map "\e[58;6u"  [67108922])                          ; C-:
            (define-key xterm-function-map "\e[124;6u" [67108988])                          ; C-|
            (define-key xterm-function-map "\e[124;8u" [201326716])                         ; C-M-|
            (define-key xterm-function-map "\e[62;6u"  [67108926])                          ; C->
            (define-key xterm-function-map "\e[60;6u"  [67108924])                          ; C->
            (define-key xterm-function-map "\e[105;7u" [134217737])                         ; C-M-i
            (define-key xterm-function-map "\e[27;3u"  [134217755])                         ; M-ESC
            (define-key xterm-function-map "\e[27;5u"  [67108891])                          ; C-ESC

            ;; define xterm codes for ctrl+shift alphabet keys
            (cl-loop for (i . char) in (-zip (number-sequence 65 90)
                                             (append (number-sequence 97 105)
                                                     '(107 106)                               ; for some reason, J & K are switched
                                                     (number-sequence 108 122)))
                     do (define-key xterm-function-map
                          (concat "\e[" (number-to-string i) ";6u")
                          (kbd (concat "C-S-" (string char))))))

          ;; NOTE: reclaimed key combinations, see source [[https://emacs.stackexchange.com/questions/220/how-to-bind-c-i-as-different-from-tab/20290#20290][here]].
          (define-key input-decode-map "\e[105;5u" [C-i])
          (define-key input-decode-map "\e[109;5u" [C-m])
          (define-key input-decode-map "\e[91;5u"  [C-\[])))

      (add-hook 'after-make-frame-functions #'term-setup-frame-bindings+)
    #+END_SRC

    If however you're running emacs from outside of the daemon (eg. ~emacs -nw -c~),
    ~after-make-frame-functions~ won't be invoked on your current frame, you'll have
    to invoke it manually; or preferably invoke it right now.

    #+BEGIN_SRC emacs-lisp
      (unless (daemonp)
        (add-hook 'emacs-startup-hook
                  (lambda (&rest _) (term-setup-frame-bindings+))))
    #+END_SRC

    Try to enable clipboard support, these settings should do something... but to
    they don't seem to work for me :cry:.

    #+BEGIN_SRC emacs-lisp :tangle no
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
            x-select-enable-clipboard t
            x-select-enable-primary   t
            x-stretch-cursor          t)
    #+END_SRC

    As a last resort, let's defer to an excellent external package which takes care
    of this for you automatically... assuming you have the right tools on your device.

    #+BEGIN_SRC emacs-lisp
      (use-package xclip
        :ensure t
        :init
        (xclip-mode +1))
    #+END_SRC

*** enabled
    Re-enable some emacs features that emacs disables by default because they're
    thought to be confusing.

    #+BEGIN_SRC emacs-lisp
    (put 'narrow-to-region 'disabled nil)
    #+END_SRC

*** leader
    Some variables related to prefixes in which leader keys should be placed.

    #+BEGIN_SRC emacs-lisp
      (defvar leader-minor-mode-leader-prefix "q"
        "leader key for minor mode bindings.
      this leader prefix is expected to be muddled and unreliable...
      due to tonnes of different minor modes collabratively binding to it.

      That said... I need a place to put minor-mode keys and this was
      unoccupied.")

      (defvar leader-server-leader-prefix "y"
        "put leader keys related to active servers under this prefix.")

      (defvar leader-diff-leader-prefix "d"
        "leader prefix under which diff bindings are assigned.")
    #+END_SRC

    Setup [[https://github.com/mohkale/spaceleader][spaceleader]], my own leader-key package designed to work like [[https://www.spacemacs.org/][spacemacs]].

    #+BEGIN_SRC emacs-lisp
      (use-package spaceleader
        :demand t
        :straight (spaceleader :type git :host github :repo "mohkale/spaceleader")
        :config
        (require 'spaceleader-base)

        (general-define-key
         "C-@" (general-simulate-key "C-SPC")) ;; C-SPC in terminal

        (general-define-key
         :keymaps 'override
         :states leader-norm-states
         "C-," (eval
                `(general-simulate-key
                   ,(concat leader-key " " leader-major-mode-prefix))))

        (general-define-key
         :keymaps 'override
         :states leader-nnorm-states
         "C-," (eval
                `(general-simulate-key
                   ,(concat leader-nnorm-key " " leader-major-mode-prefix))))

        (general-define-key
         :states leader-norm-states
         "C-SPC" (eval
                  `(general-simulate-key ,leader-key))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (leader/set-keys
        "TAB" "last-buffer"
        "TAB" 'switch-to-last-buffer)

      (leader/set-keys
        "fj" '("jump-to-directory" . dired-jump)
        "jd" '("jump-to-directory" . dired-jump)
        "jD" '("jump-to-directory-other-window" . dired-jump-other-window))

      (leader/set-keys
        "aE" 'package-list-packages
        "f DEL" 'save-buffers-kill-emacs)

      (leader/set-keys
        "be" 'safe-erase-buffer
        "bK" 'kill-this-buffer
        "bk" 'kill-this-buffer-and-window-maybe
        "bM" 'switch-to-messages-buffer
        "by" 'yank-whole-buffer-as-kill)

      (leader/set-keys
        "cb" 'display-compilation-buffer
        "cy" 'yank-and-comment
        "cc" 'compile)

      (leader/set-keys
        "i"  "insert"
        "ij" 'custom-insert-line-below
        "ik" 'custom-insert-line-above)

      (leader/set-keys "j" "jump")

      (leader/set-keys
        "Md" "dired"
        "MF" 'flyspell-prog-mode
        ;; TODO bind in dired
        "Mdd" 'toggle-editable-dired
        "Mde" 'invoke-editable-dired
        "Md <escape>" 'wdired-abort-changes
        "Mdq" 'wdired-abort-changes
        )

      (leader/set-keys
        "xf" 'list-faces
        "xt" 'remove-all-trailing-whitespace)

      (leader/set-keys
        "t TAB" 'set-indent-offset
        "th" 'toggle-buffer-header
        "tL" 'toggle-lexical-binding
        "tr" 'toggle-relative-linum)

      (defvar emacs-window-map (make-sparse-keymap)
        "my keymap to interact with emacs windows.")

      (leader/set-keys
        "w" "windows"
        "w" emacs-window-map)
    #+END_SRC

*** bindings
    where I put global bindings.

    WARN never bind ESC, it BREAKS *EVERYTHING!*.

    Firstly, specify some defaults for the bindings I reclaimed from the terminal,
    this should just be the same keys they would have if they were not reclaimed.

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       [C-i] 'indent-for-tab-command
       [C-m] 'newline-and-indent)

      (general-define-key
       :states 'motion
       ;; evil doesn't seem to have a default for tab.
       ;; [C-i] 'indent-for-tab-command
       [C-m] 'evil-ret)
    #+END_SRC

    Let's also make some terminal exclusive bindings have the same affect in GUI emacs.

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       "C-S-v" 'yank)
    #+END_SRC

    Now let's unbind some undesired emacs global keys

    #+BEGIN_SRC emacs-lisp
      (general-unbind
        "M-h"                                ; was backward-kill-sentence
        "C-M-\\"                             ; was indent-region
        "M-b"                                ; was backward-word
        "M-f"                                ; was forward-word
        "C-k"
        )
    #+END_SRC

    Now for global keys.

    Shell command bindings.

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       ;; Control     for comamnd,
       ;; Meta        for command on region
       ;; Control-Alt for command on buffer
       "C-|"   'shell-command
       "M-|"   'shell-command-on-region
       "C-M-|" 'shell-command-on-buffer
       "C-&"   'async-shell-command
       "M-&"   'async-shell-command-on-region
       "C-M-&" 'async-shell-command-on-buffer)
    #+END_SRC

    Shell compatibility with vim

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       "C-z" 'suspend-frame)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       ;; char variants, can be found on C-h & C-l
       "C-b" 'backward-word
       "C-f" 'forward-word

       ;; rebound to default-indent-new-line in emacs>=27 and that's
       ;; bugged out in org mode.
       "C-M-j" 'indent-new-comment-line

       "M-l"             'recenter-top-bottom ;; was kill-sentence
       "M-L"             'downcase-word
       "M-H"             'upcase-word
       "C-M-a"           'mark-whole-buffer
       "C-/"             'toggle-comment-at-point
       "C-S-/"           'toggle-comment-at-point-alt
       "C-M--"           'indent-region
       "C-M-h"           'left-word
       "C-M-l"           'right-word
       "M-j"             'custom-insert-line-below
       "M-k"             'custom-insert-line-above
       "M-r"             'revert-buffer
       ;; "C-q"             'quit-window
       "C-v"             'quoted-insert
       "C-j"             'newline-and-indent
       "C-<tab>"         'next-buffer
       "C-S-<tab>"       'previous-buffer
       "C-<iso-lefttab>" 'previous-buffer
       "RET"             'newline-and-indent
       "<C-M-return>"    'comment-indent-new-line
       "<C-backspace>"   'evil-delete-backward-word
       "M-DEL"           'delete-forward-char
       "<C-S-backspace>" 'kill-word)
    #+END_SRC

    My window map, like ~C-w~ in vim.

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       :states '(motion emacs)
       "C-w" emacs-window-map)

      (general-define-key
       :keymaps 'emacs-window-map
       "m"   'window-zen
       "RET" 'window-zen
       [C-m] 'window-zen
       "M"   'window-zen-restore
       "M-m" 'window-zen-restore)

      ;; tmux leader compatability
      (general-define-key
       :states 'insert
       "C-q" (general-simulate-key "C-w" :state 'normal))

      (general-define-key
       :states '(normal motion emacs)
       "C-q" (general-simulate-key "C-w"))
    #+END_SRC

    A command that inserts a character without moving point.
    TODO do I really need this?

    #+BEGIN_SRC emacs-lisp :tangle no
      (defmacro defun-save-excursion-insert-char (char-name char)
        (setq char (eval char))

        (let* ((char-name (symbol-name char-name))
               (func-name (intern (concat "save-excursion-insert-" char-name))))
          `(defun ,func-name (prefix)
             (interactive "P")
             (save-excursion
               (insert-char ,char (prefix-numeric-value prefix))))))

      (general-define-key
       :states leader-nnorm-states
       "S-M-SPC" (defun-save-excursion-insert-char space ? ))
    #+END_SRC

*** syntax
    Adjust the syntax entries for the given modes so that functions like evil word
    skip over them.

    TODO switch to a macro.

    #+NAME: underscore-supported-modes
    - c++
    - c
    - markdown
    - lisp
    - shell
    - enh-ruby

    #+BEGIN_SRC emacs-lisp :var modes=underscore-supported-modes
      (defun adjust-syntax-entry! ()
        "includes underscores in the syntax entry"
        (modify-syntax-entry ?_ "w"))

      (dolist (mode modes)
        (let ((hook-name (concat (car mode) "-mode-hook")))
          (add-hook (intern hook-name) #'adjust-syntax-entry!)))
    #+END_SRC

*** hooks
    Run a hook on buffer change

    #+BEGIN_SRC emacs-lisp
      (defvar switch-to-buffer-hook nil
        "hook run when you switch to a buffer.")

      (advice-add 'switch-to-buffer
                  :after (defun switch-to-buffer--execute-hook (&rest args)
                           (apply 'run-hook-with-args 'switch-to-buffer-hook args)))
    #+END_SRC

    Run a hook when emacs changes themes.

    #+BEGIN_SRC emacs-lisp
      (defvar after-load-theme-hook nil
        "hook which is executed after loading a theme")

      (advice-add 'load-theme
                  :after (defun load-theme-execute-hooks (&rest _)
                           (run-hooks 'after-load-theme-hook)))
    #+END_SRC

*** display-buffer
    Customise display-buffer-alist to prioritise switching focus to displayed
    buffers, instead of showing them and then making me have to switch to them
    and then exit.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'emacs-startup-hook
                (lambda () (require '+display-buffer-focus)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+display-buffer-focus.el
      ;; frankly, display buffers alist is badly documented.
      ;; there's a quick and simple article exploring how it
      ;; works [[https://www.simplify.ba/articles/2016/01/25/display-buffer-alist/][here]]
      ;;
      ;; in the meantime, the following is a breif~er~ summary
      ;;   1. the car of each entry should be a regex matching a buffer
      ;;      name or a function taking a buffer and an action argument.
      ;;   2. the second item (car (cdr list)) should be a list of or a
      ;;      single display handler function which takes a buffer and
      ;;      an alist as an argument. Each entry in the list is invoked
      ;;      until one which returns non nil is encountered.
      ;;   3. the remaining list items should be an alists providing options.

      ;; changing at startup messes up the display of the dashboard :(
      (defvar default-display-buffer-action
        display-buffer-fallback-action
        "the value for fallback actions without my configuration")

      (defun restore-default-display-buffer-actions (func &rest args)
        "restore the default display buffer actions used by emacs."
        (let ((display-buffer-fallback-action
               default-display-buffer-action))
          (apply func args)))

      (setq display-buffer-fallback-action
            ;; by default, focus on displayed windows
            '((display-buffer--maybe-same-window-and-focus
               display-buffer-reuse-window-and-focus
               display-buffer--maybe-pop-up-frame-or-window-and-focus
               display-buffer-in-previous-window-and-focus
               display-buffer-use-some-window-and-focus
               display-buffer-pop-up-frame-and-focus)))

      (push `(,(rx
                (or "*Async Shell Command*"
                    "*compilation*"
                    "*rustic-compilation*"
                    "*cargo-test*"))
              (display-buffer-reuse-window
               display-buffer--maybe-pop-up-frame-or-window-and-focus
               display-buffer-in-side-window-and-focus)
              (side          . bottom)
              (window-height . 0.5))
            display-buffer-alist)

      (push `(,(rx
                (or "*image-dired-display-image*"
                    "*Anaconda*"
                    "magit-diff: "
                    "*Flycheck error messages*"
                    "*HTTP Response*"
                    "*Compile-Log*"
                    (and "*eglot-help for " (+ any) "*")))
              ,@default-display-buffer-action)
            display-buffer-alist)

      (provide '+display-buffer-focus)
    #+END_SRC

*** uniarg
    #+BEGIN_SRC emacs-lisp
      (defvar +universal-argument-increment-by 4
        "Make increment functions increment universal-argument by this much")

      (defmacro defun-universal-argument-operation (name docstring &rest body)
        `(defun ,name ()
           ,(eval docstring)
           (interactive)
           (prefix-command-preserve-state)
           (if (not prefix-arg)
               (universal-argument)
             ,@body)

           (when prefix-arg
             (universal-argument--mode))))
      (put 'defun-universal-argument-operation 'lisp-indent-function 'defun)

      (defun-universal-argument-operation smart-universal-argument
        "combine both universal-argument and universal-argument-more
      into a single invokeable command. for some reason, calling simply
      more before a regular prefix has been specified, will result in no
      overall prefix being set :("
        (universal-argument-more prefix-arg))

      ;; I'm not sure why universal-argument-more multiplies
      ;; the prefix arg by a factor of 4. I mean, 4 to 16 is
      ;; fine, but 16 to 64 is pretty unlikely to be what you
      ;; wanted. Adding by 4 would be more useful, especially
      ;; if you're using it to gauge indents.
      (defun-universal-argument-operation universal-argument-batch-increment
        (format "increment the current prefix-arg by %d."
                +universal-argument-increment-by)
        (let* ((prefix-value (prefix-numeric-value prefix-arg)))
          (setq prefix-arg
                (+ prefix-value +universal-argument-increment-by))))

      (defun-universal-argument-operation universal-argument-batch-decrement
        (format "decrement the current prefix-arg by %d."
                +universal-argument-increment-by)
        (let* ((prefix-value (prefix-numeric-value prefix-arg)))
          (setq prefix-arg (- prefix-value +universal-argument-increment-by))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (leader/set-keys
        "U" 'universal-argument
        "u" 'smart-universal-argument)

      (general-define-key
       :keymaps 'universal-argument-map
       "M-u" 'universal-argument-batch-increment
       "M-U" 'universal-argument-batch-decrement)
    #+END_SRC

*** multi-scratch
    An extension of the persistent scratch function which provides functions to create a new
    scratch buffer and interactively switch to one.

    WARN multiscratch doesn't save the first scratch buffer. That's a real scratch buffer,
    which's expected to get erased every time emacs is killed. All other scratch buffers
    are properly restored though.

    #+BEGIN_SRC emacs-lisp
      (defvar scratch-buffer-name "*scratch*"
        "Name of users scratch buffer")

      (cl-defun create-new-empty-buffer (&optional buffer-name)
        "Creates and returns a new empty scratch like buffer
      with prefix it prompts you for the name of the buffer.
      if called interactively, the new buffer is switched to."
        (interactive "P")
        (let* ((def-buf-name scratch-buffer-name)
               (buffer-name
                (cond
                 ((stringp buffer-name) buffer-name)
                 (buffer-name (read-buffer "buffer name: " def-buf-name))
                 (t def-buf-name)))
               (buffer-name (generate-new-buffer-name buffer-name))
               (buffer (get-buffer-create buffer-name)))
          (with-current-buffer buffer
            (funcall-interactively initial-major-mode))
          (when (called-interactively-p 'any)
            (switch-to-buffer buffer))
          buffer))

      (defun scratch-buffer-p (&optional buffer)
        (string-match
         (regexp-quote scratch-buffer-name)
         (buffer-name buffer) 0))
    #+END_SRC

    Setup persistent scratch support. allows scratch buffers to survive emacs sessions.

    #+BEGIN_SRC emacs-lisp
      (use-package persistent-scratch
        :ensure t
        :defer  t
        :init
        (defun multiscratch-scratch-buffer-p (&optional buffer)
          "persist all but the main scratch buffer."
          (and (not (string= (buffer-name buffer) scratch-buffer-name))
               (scratch-buffer-p buffer)))

        (setq persistent-scratch-save-file (var! "scratch.el")
              persistent-scratch-autosave-interval 800
              persistent-scratch-scratch-buffer-p-function #'multiscratch-scratch-buffer-p)

        ;; force restoration on initial movement to a scratch buffer.
        (when (file-exists-p persistent-scratch-save-file)
          (persistent-scratch-restore))

        (add-hook 'kill-emacs-hook #'persistent-scratch-save))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun scratch-buffers ()
        (require 'persistent-scratch)                                                               ; Make sure scratches have been restored
        (sort
         (seq-filter #'scratch-buffer-p (buffer-list))
         (lambda (x y) (string< (buffer-name x) (buffer-name y)))))

      (defun switch-to-scratch-buffer (&optional prefix)
        "Switch to the scratch buffer
      with prefix, prompts for which buffer named like the scratch
      buffer to switch to. If none exists, a new scratch buffer will
      be made. If only one exists, it will be switched to and if more
      than one exists then prompts for it."
        (interactive "P")
        (if (not prefix)
            ;; switch to the original scratch buffer, making it if it
            ;; doesn't exit.
            (let ((buffer (get-buffer scratch-buffer-name)))
              (if buffer
                  (switch-to-buffer buffer)
                (call-interactively 'create-new-empty-buffer)))

          ;; Load persistent-scratch and interactively select a scratch
          ;; to go to.
          (let* ((buffer-list (scratch-buffers))
                 (buffer-names (mapcar #'buffer-name buffer-list))
                 (buffer
                  (cond
                   ((zerop (length buffer-list))
                    (create-new-empty-buffer))
                   ((eq 1 (length buffer-list))
                    (car buffer-list))
                   (t
                    ;; completion framework dependent section here.
                    (if (package! ivy)
                        (progn
                          (require 'counsel)
                          (setq buffer (ivy-read "Switch to buffer: " buffer-names
                                                 :require-match t
                                                 :keymap ivy-switch-buffer-map
                                                 :matcher #'ivy--switch-buffer-matcher
                                                 :caller 'switch-to-scratch-buffer
                                                 :unwind #'counsel--switch-buffer-unwind
                                                 :update-fn 'counsel--switch-buffer-update-fn)))
                      (completing-read "Switch to buffer: " buffer-names))))))
            (when (called-interactively-p 'any)
              (switch-to-buffer buffer))
            buffer)))
    #+END_SRC

    Bind keys to quickly switch to scratch buffers or create a new empty scratch buffer.

    #+BEGIN_SRC emacs-lisp
      (leader/set-keys
        "bs"    'switch-to-scratch-buffer
        "b RET" 'create-new-empty-buffer)
    #+END_SRC

*** birthday
    #+BEGIN_SRC emacs-lisp
      (when (string-equal (format-time-string "%d.%m" (current-time))
                          "08.12")
        (add-hook 'emacs-startup-hook 'animate-birthday-present))
    #+END_SRC

* Core
  core functions needed to edit with emacs.

  basic syntax sugar functions, inspired by [[https://github.com/hlissner/doom-emacs/blob/develop/core/core-lib.el][doom]].

  #+BEGIN_SRC emacs-lisp
    (defmacro lambda! (&rest body)
      "Expands to (lambda () (interactive) ,@body).
    A factory for quickly producing interaction commands, particularly for keybinds
    or aliases."
      (declare (doc-string 1) (pure t) (side-effect-free t))
      `(lambda () (interactive) ,@body))

    (defmacro plist-pop! (list prop &optional default)
      "delete PROP from plist LIST, returning value of PROP.
    if PROP isn't in LIST, DEFAULT will be returned."
      `(prog1
           (or (plist-get ,list ,prop) ,default)
         (cl-remf ,list ,prop)))

    (defun keyword-sym-normalise! (sym)
      "convert a keyword symbol, SYM, to a non-keyword symbol.
    eg. (keyword-sym-normalise! :hello) ;; => 'hello"
      (let ((sym-string (symbol-name sym)))
        (if (string-prefix-p ":" sym-string)
            (intern (substring sym-string 1))
          sym)))

    ;; source [[https://www.emacswiki.org/emacs/DestructiveOperations#toc4][Destructive Operations]].
    (defun nconc-safe (ls1 ls2)
      "`nconc', but avoids creating circular lists."
      (let ((tail ls1))
        (while (and (cdr tail) (not (eq tail ls2)))
          (setq tail (cdr tail)))
        (unless (eq tail ls2)
          (if (null tail)
              (setq ls1 ls2)
            (setcdr tail ls2)))
        ls1))

    (defmacro with-no-write-file-messages (&rest body)
      "execute BODY while supressing \"Wrote: file\" messages"
      `(let ((save-silently t))
         ;; replace the VISIT argument of write-region with something
         ;; that'll supress the write message
         (cl-letf* (((symbol-function 'actual-write-region)
                     (symbol-function 'write-region))
                    ((symbol-function 'write-region)
                     (lambda (a b c &optional d &rest args)
                       (apply #'actual-write-region a b c d 'nomsg (cdr args)))))
           ,@body)))
    (put 'with-no-write-file-messages 'lisp-indent-function 'defun)

    (defun inhibit-messages-wrapper (func &rest args)
      (let ((inhibit-message t))
        (apply func args)))

    (defun chain-match-regexp (string &rest regexps)
      "checks for string-match against STRING using regexps
    returns true if any of the regexps match the string."
      (let (match-found regexp)
        (while (and (not match-found)
                    (setq regexp (car regexps)))
          (setq match-found (string-match-p regexp string)
                regexps (cdr regexps)))
        (not (not match-found))))

    (defmacro assoc-pop! (key alist)
      `(let ((result (assoc ,key ,alist)))
         (setq ,alist (delete result ,alist))
         result))

    ;; see [[https://ftp.gnu.org/old-gnu/Manuals/elisp-manual-20-2.5/html_node/elisp_408.html][here]].
    (defun buffer-killed-p (buffer)
      "Return t if BUFFER is killed."
      (not (buffer-name buffer)))
  #+END_SRC

** config
   Load my configuration, and apply any necessary pre-processing steps.

   #+BEGIN_SRC emacs-lisp
     ;; Variables defined in root config file
     (defvar +packages)
     (defvar +sh-use-lsp)
     (defvar +man-command)
     (defvar +c-prefer-clangd)
     (defvar +icons-available)

     ;; Load local configuration or the default config.
     (unless (require '+config nil t)
       (require '+config-default nil t))

     (defmacro package! (&rest pkgs)
       "Assert whther all the packages in PKGS are to be installed"
       (append '(and) (cl-loop for pkg in pkgs collect `(member (quote ,pkg) +packages))))

     (defvar +lsp-command
       (let ((lsp   (package! lsp-mode))
             (eglot (package! eglot)))
         (cond
          ((and lsp eglot)
           (warn "you've enabled both lsp and eglot, defaulting to eglot.")
           'eglot-ensure)
          (lsp   'lsp)
          (eglot 'eglot-ensure)))
       "command used to start a language server.")
   #+END_SRC

** plist-bind
   #+BEGIN_SRC emacs-lisp
     (use-package +plist-bind
       :commands (plist-bind!))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle lisp/+plist-bind.el
     (cl-defmacro plist-bind! ((list &rest props) &rest body)
       "declare local bindings in BODY using a property list LIST.
     This functions exists as an alternative to `cl-defmacro's very limited support
     for variable argument lists alongside keyword argument lists. A use case I've
     encountered so often, it merited creating this.

     This function accepts a LIST argument and then a bunch of property specifications.
     For every property in PROPS, that property is popped from LIST and then included
     in the local scope of BODY. A property can be specified as an ALIST, in which case
     the `car' of the list is the property name and the `cdr' is the default value for
     the property.

     WARN LIST should be an identifier for a list variable... not a LIST by itself.

     The remaining value of LIST is all the properties which were not provided in the
     spec.
     "
       `(let* ((,list (cl-copy-list ,list))
               ,@(cl-loop for prop in props
                          with default = nil
                            when (listp prop)
                              do (setq default (cdr prop) prop (car prop))
                            end
                            collect (list (keyword-sym-normalise! prop)
                                          `(plist-pop! ,list ,prop ,default))))
          ,@body))
     (put 'plist-bind! 'lisp-indent-function 'defun)
   #+END_SRC

** host
   Remember my host configuration across systems.

   #+BEGIN_SRC emacs-lisp
     (use-package +host
       :commands (host!))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle lisp/+host.el
     (defvar +hosts-alist
       (let ((hosts-file (etc! "hosts")))
         (if (file-exists-p hosts-file)
             (with-temp-buffer
               (insert-file-contents hosts-file)
               (read (current-buffer)))
           (warn "hosts config file not found: %s" hosts-file)))
       "list of devices I own.")

     (defun host! (id)
       "Check if current host matches ID
     if ID is a string it's matched against the currents hosts
     hostname. otherwise id is looked for in `+hosts-alist'
     and then compared against. "
       (unless (stringp id)
         (setq id (cdr (assoc id +hosts-alist))))

       (when id
         (string-equal id (system-name))))

     (provide '+host)
   #+END_SRC

** find-emacs
   Find files related to my own configuration/directory layouts.

   #+BEGIN_SRC emacs-lisp
     (defun find-dotemacs-file ()
       (interactive)
       (find-file (join-path user-emacs-directory "init.el")))

     (defun find-dotemacs-org-file ()
       (interactive)
       (find-file (join-path user-emacs-directory "init.org")))

     (defun find-file-from-dotemacs ()
       (interactive)
       (let ((default-directory user-emacs-directory))
         (call-interactively 'find-file)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (leader/set-keys
       "fec" 'find-dotemacs-org-file
       "fet" 'find-dotemacs-file
       "fef" 'find-file-from-dotemacs)
   #+END_SRC

** buffers
   #+BEGIN_SRC emacs-lisp
     (defun rename-buffer-file (buffer &optional new-name)
       "renames the file associated with the buffer BUFFER.
     if the buffer isn't visiting a file or the visited file
     doesn't exist on disk, this function is equivalent to
     simply changing the visited file name for BUFFER."
       (interactive (list (current-buffer)))

       (or new-name
           (setq new-name (read-file-name "new-name: ")))

       (let* ((buffer-file (buffer-file-name buffer))
              (modified-p (buffer-modified-p buffer))
              (directory (file-name-directory new-name))
              (src-exists (file-exists-p buffer-file))
              (dst-exists (file-exists-p new-name)))
         (with-current-buffer buffer
           ;; destination doesn't exist, so can write
           ;; or
           ;; user agrees to overwrite, so can write
           (when (or (not dst-exists)
                     (yes-or-no-p "file already exists, overwrite it:"))
             ;; only rename buffer file if it exists
             (when (and buffer-file src-exists)
               (unless (file-directory-p directory)
                 (mkdir directory t))
               (rename-file buffer-file new-name t)
               (message "moved file '%s' to '%s'" buffer-file new-name))

             (set-visited-file-name new-name)
             (set-buffer-modified-p modified-p)))))

     (defun delete-buffer-file ()
       (interactive)
       (let ((buffer (current-buffer))
             (filename (buffer-file-name))
             (name (buffer-name)))
         (if (not filename)
             (message "buffer %s is not visiting a file" name)
           (when (yes-or-no-p "Are you sure you want to delete this file? ")
             (when (file-exists-p filename)
               (delete-file filename t))

             (kill-buffer buffer)))))

     (defun smart-buffer-file-name ()
       (or (buffer-file-name)
           (cond
            ((derived-mode-p 'dired-mode)
             (string-trim-right (dired-current-directory) "/")))))

     (defmacro defun-show-and-copy-command (name &rest body)
       "Define a function which uses BODY to generate a string which is then shown and copied.
     The prefix behaviour of the passed function can be used insert the output of BODY or
     to save the current point and then do so.
     "
       `(defun ,(intern (concat "show-and-copy-" (symbol-name name))) (&optional arg)
          (interactive "P")
          (let ((msg ,@body))
            (when msg
              (or (stringp msg)
                  (setq msg (format "%s" msg)))                                      ; Force msg to be a string
              ;; perform insertion behaviour
              (when (consp arg)
                (if (eq (car prefix) 4)
                    (insert msg)
                  (save-excursion
                    (insert msg))))
              ;; show and then copy msg
              (message msg)
              (kill-new msg)))))

     (defun-show-and-copy-command buffer-file-basename
       (file-name-nondirectory (or (smart-buffer-file-name) "")))

     (defun-show-and-copy-command buffer-file-name
       (smart-buffer-file-name))

     (defun-show-and-copy-command directory
       (file-name-directory (or (smart-buffer-file-name) default-directory)))

     (cl-defun write-backup (&optional prefix (silent t))
       "manually force emacs to backup the current buffer.
     By default doesn't do anything when the current buffer hasn't been modified.
     Pass a single-prefix `C-u` to force backing-up even if the buffer has not been
     modified. Pass two prefixes `C-u C-u`to backup the buffer and then save; this
     in affect backs up the last save and then saves the current buffer."
       (interactive "P")
       (let* ((modified (buffer-modified-p))
              (save-after (and (listp prefix)
                               (eq (car prefix) 8)))
              (save-before (and (not save-after)
                                modified)))
         (if (and (not prefix)
                  (not modified))
             (or silent
                 (message "buffer not modified since last save"))
           (or save-before (save-buffer))

           ;; buffer-backed-up is permenently buffer-local so you have to account
           ;; for when it's already been backed up and when you first back it up.
           (if buffer-backed-up
               (let (buffer-backed-up)
                 (backup-buffer))
             (backup-buffer))

           (or save-after (save-buffer)))))

     (defun write-kill-buffer (&optional buffer-or-name confirm)
       "write buffer to file and then kill it"
       (interactive)
       (let ((buffer (get-buffer (or buffer-or-name (current-buffer)))))
         (when (buffer-modified-p)
           (write-file (or (buffer-file-name) (read-file-name "write file: "))
                       confirm))

         (when (or (not confirm)
                   (y-or-no-p (format "are you sure you want to kill this buffer (%s): " buffer)))
           (let ((window (get-buffer-window buffer)))
             (kill-buffer buffer)
             (when (and window (> (length (window-list)) 1))
               (delete-window window))))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (leader/set-keys
       "f~" 'write-backup
       "fa" 'write-autosave
       "fd" 'show-and-copy-directory
       "fD" 'delete-buffer-file
       "fR" 'rename-buffer-file
       "fy" 'show-and-copy-buffer-file-name
       "f%" 'show-and-copy-buffer-file-basename
       ;; "fo" 'open-file-or-directory-in-external-app ;; TODO implement
       )
   #+END_SRC

** whitespace
   Configure displaying of trailing whitespace. Now I personally am not a fan of source code
   with invisable trailing whitespace, it takes up meaningless space ([[https://www.youtube.com/watch?v=SsoOG6ZeyUI][insert irrelevent video
   here]]) and probably annoys the hell out of other people with editors smart enough to
   see it.

   So I enable displaying of trailing whitespace by default in every mode. That way you can
   see and remove it. If you'd like to disable whitespace display, then you'll have to append
   to either of the following variables.

   Here we define the configuration variables used for determining whether to enable
   visible whitespace or not.

   #+BEGIN_SRC emacs-lisp
     (defvar whitespace-exempt-modes '(help-mode
                                       Buffer-menu-mode
                                       ibuffer-mode
                                       eshell-mode
                                       term-mode
                                       minibuffer-inactive-mode
                                       eshell-mode)
       "modes under which no trailing whitespace is shown")

     (defvar whitespace-exempt-buffers
       (list (rx "*Ibuffer confirmation*")
             (rx "*Org Export Dispatcher*"))
       "regular expressions matching buffer names under which no trailing
     whitespace is shown.")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun set-trailing-whitespace--mode-based (&optional dont-set)
       "check the mode of the current buffer, to see whether trailing
     whitespace should be shown. with the optional parameter `dont-set'
     trailing whitespace will not be set.

     This function returns what the desired value of `show-trailing-whitespace'
     should be."
       (let ((show (not (and whitespace-exempt-modes
                             (apply 'derived-mode-p
                                    whitespace-exempt-modes)))))
         (prog1
             show
           (unless dont-set
             (setq show-trailing-whitespace show)))))

     (defun set-trailing-whitespace--name-based (&optional dont-set)
       "check the name of the current buffer, to see whether trailing
     whitespace should be shown. see `set-trailing-whitespace--mode-based'."
       (let ((show (not (and whitespace-exempt-buffers
                             (apply 'chain-match-regexp
                                    (buffer-name)
                                    whitespace-exempt-buffers)))))
         (prog1
             show
           (unless dont-set
             (setq show-trailing-whitespace show)))))

     (defun set-trailing-whitespace (&rest _)
       (setq show-trailing-whitespace
             ;; when both name and mode decide you can show
             ;; whitespace, then show it. otherwise when at
             ;; least one says no, then hide it.
             (and (set-trailing-whitespace--mode-based t)
                  (set-trailing-whitespace--name-based t))))
   #+END_SRC

   Connect the aforementioned functions to the appropriate emacs hooks.

   #+BEGIN_SRC emacs-lisp
     ;; add switch-to-buffer hook because some functions, such as ibuffers confirmation
     ;; popup use switch-to-buffer instead of display buffer and there's no easy way
     ;; to modify it.
     (add-hook 'switch-to-buffer-hook #'set-trailing-whitespace)
     (add-hook 'after-change-major-mode-hook
               (lambda (&rest _)
                 (set-trailing-whitespace--mode-based)))
   #+END_SRC

** indentation
   Configure the preferred indentation for buffers. Emacs doesn't really have a nice builtin
   way to do this across multiple modes. I got tired of always having to remember special
   variables for each mode so I've defined the following alist to store indent configurations
   and a command ~set-indent-offset~ which automatically (or manually sets the desired
   indent).

   #+BEGIN_SRC emacs-lisp
     (defvar +indent-config '((t . 4))
       "alist configuring preferred indentation for buffers.
     the `car' of an entry is used to match which buffer it's applied to
     and `cdr' is used to determine the value of it.

     the `car' can be a symbol, a string, a function or some expression
     which evaluates to t. if it's a symbol, the major mode of the
     buffer is compared against it. if it's a string the name of the
     buffer is matched against it.

     the cons can be a number, a function or some expression which
     evaluates to a number.

     NOTE: indentation is set exclusively when a buffer-mode change
           occurs, changing the buffer name doesn't alter the indent.
     ")

     (defun +indent-offset (&optional buffer)
       "Use `+indent-config' to find the preffered indent for BUFFER."
       (with-current-buffer (or buffer (current-buffer))
         (cl-loop with matcher = nil
                  with indent  = nil
                  for cfg in +indent-config
                  do (setq matcher (car cfg))
                  if (cond
                      ((eq matcher t) t)
                      ((symbolp matcher) (eq matcher major-mode))
                      ((stringp matcher) (string-match-p matcher (buffer-name)))
                      ((functionp matcher) (funcall matcher))
                      (t (eval matcher)))
                  do (setq indent (cdr cfg))
                  and return (if (functionp indent)
                                 (funcall indent)
                               indent))))

     ;; A package that lets you configure project parameters (indent size,
     ;; line endings etc.) in a [[https://editorconfig.org/][single configuration]] file.
     ;;
     ;; I really only need the parsing fascilities so that I can extract the
     ;; indent-offset but editorconfig also has a mapping of common indent
     ;; variables defined in an alist that's bound to come in very useful
     ;; „ÉΩ(*¬¥–∑ÔΩÄ*)Ôæâ.
     (use-package editorconfig
       :ensure t
       :config
       (setq editorconfig-lisp-use-default-indent t)
       (push '(plantuml-mode plantuml-indent-level) editorconfig-indentation-alist))

     (defvar-local +indent nil
       "Override the local indent for the current file.")

     (defun set-indent-offset (&optional indent)
       "set the indentation level of the current buffer.
     this method uses `+indent-config' to determine what
     the indentation of the current buffer should be and then sets
     it. Also setting any mode dependent, specific indent bindings,
     alongside it.

     You can pass a specific value for the indent as an argument and
     the current buffers indentation will be set to that."
       ;; TODO: only use this when editorconfig-mode is disabled.
       (interactive "Nindent: ")
       (let* ((buffer (current-buffer)))
         (setq indent (or indent
                          +indent
                          ;; Extract value from editorconfig file
                          (condition-case _
                              (let ((num (gethash 'indent_size
                                           (funcall editorconfig-get-properties-function))))
                                (if (stringp num)
                                    (string-to-number num)
                                  num))
                            (error nil))
                          ;; Use the values from `+indent-config'
                          (+indent-offset)))

         (if (not indent)
             (message "set-indent-offset: unable to determine indent for current buffer.")
           (editorconfig-set-indentation
             (if indent-tabs-mode "tab" "space")
             (number-to-string indent)
             (number-to-string indent)))))

     (add-hook 'after-change-major-mode-hook #'set-indent-offset)
   #+END_SRC

** lisp-indent
   Lisp indent-function taken from [[https://github.com/hlissner/doom-emacs/blob/621cb60e7565a155a9c752089ce5d5cce20dbef7/modules/lang/emacs-lisp/autoload.el][doom]].

   #+BEGIN_SRC emacs-lisp :tangle no
     (defun +emacs-lisp-indent-function (indent-point state)
       "A replacement for `lisp-indent-function'.

     Indents plists more sensibly. Adapted from
     https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned"
       (let ((normal-indent (current-column))
             (orig-point (point))
             ;; TODO Refactor `target' usage (ew!)
             target)
         (goto-char (1+ (elt state 1)))
         (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
         (cond ((and (elt state 2)
                     (or (not (looking-at-p "\\sw\\|\\s_"))
                         (eq (char-after) ?:)))
                (unless (> (save-excursion (forward-line 1) (point))
                           calculate-lisp-indent-last-sexp)
                  (goto-char calculate-lisp-indent-last-sexp)
                  (beginning-of-line)
                  (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t))
                (backward-prefix-chars)
                (current-column))
               ((and (save-excursion
                       (goto-char indent-point)
                       (skip-syntax-forward " ")
                       (not (eq (char-after) ?:)))
                     (save-excursion
                       (goto-char orig-point)
                       (and (eq (char-after) ?:)
                            (eq (char-before) ?\()
                            (setq target (current-column)))))
                (save-excursion
                  (move-to-column target t)
                  target))
               ((let* ((function (buffer-substring (point) (progn (forward-sexp 1) (point))))
                       (method (or (function-get (intern-soft function) 'lisp-indent-function)
                                   (get (intern-soft function) 'lisp-indent-hook))))
                  (cond ((or (eq method 'defun)
                             (and (null method)
                                  (> (length function) 3)
                                  (string-match-p "\\`def" function)))
                         (lisp-indent-defform state indent-point))
                        ((integerp method)
                         (lisp-indent-specform method state indent-point normal-indent))
                        (method
                         (funcall method indent-point state))))))))

     (setq lisp-indent-function #'+emacs-lisp-indent-function)
   #+END_SRC

** minibuffer-clear
    Auto clear the echo area after a certain idle interval. Why? because emacs has a tendency
    to hang when doing a lot of tasks (eg. updating packages). When this package installation
    finished emacs keeps the last message in the minibuffer meaning the only way to tell if
    emacs is ready to carry on is to hit a key. I can't count the number of times I've just
    stood around for 2 minutes wondering when it'll be done, only to find it finished a while
    ago and I just didn't recieve any notification :angry:.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package +minibuffer-clear :defer 5)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle lisp/+minibuffer-clear.el
     (defun clear-echo-area ()
       (message nil))

     (defvar auto-clear-echo-area-interval 5
       "clear the echo area after this many seconds have elapsed.
     set to nil to not disable echo area auto clear.")

     (defvar auto-clear-echo-area--timer nil)

     (advice-add 'message :after
                 (defun auto-clear-echo-area (string &rest args)
                   (when (and string
                              auto-clear-echo-area-interval)
                     (when auto-clear-echo-area--timer
                       (cancel-timer auto-clear-echo-area--timer))

                     (setq auto-clear-echo-area--timer
                           (run-with-idle-timer
                            auto-clear-echo-area-interval
                            nil
                            #'clear-echo-area)))))

     ;; eldoc should't be removed after idle delay... it's designed to be looked at.
     (advice-add 'eldoc-message :around
                 (defun eldoc-message--disable-auto-clear-echo-area (func &rest args)
                   (when auto-clear-echo-area--timer
                     ;; cancel any existing timers beforehand.
                     (cancel-timer auto-clear-echo-area--timer)
                     (setq auto-clear-echo-area--timer nil))

                   (let (auto-clear-echo-area-interval) ;; disable interval
                     (apply func args))))

     (provide '+minibuffer-clear)
   #+END_SRC

** yank-indent-adjust
   adjust indentation of yanked text in some modes... because doing so manually is a
   pain :tongue:. Initially sourced from, the venerable, [[https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el#L99-L124][magnars]].

   #+BEGIN_SRC emacs-lisp
     (defvar yank-indent-modes '(prog-mode
                                 sgml-mode
                                 js2-mode)
       "Modes in which to automatically indent regions that are yanked (or yank-popped).")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; (require 'dash)

     (defvar yank-advised-indent-threshold 1000
       "Threshold (# chars) over which indentation does not automatically occur.")

     (defun yank-advised-indent-function (beg end)
       "Do indentation, as long as the region isn't too large."
       (if (<= (- end beg) yank-advised-indent-threshold)
           (indent-region beg end nil)))

     (defmacro with-auto-indent-satisfied (prefix-var &rest body)
       `(when (and (not ,prefix-var)
                   (--any? (derived-mode-p it) yank-indent-modes))
          ,@body))
     (put 'with-auto-indent-satisfied 'lisp-indent-function 'defun)

     (defun yank--auto-indent (&optional arg)
       "if mode is in `yank-indent-modes' indent yanked text
     doesn't do anything if a prefix arg is given."
       (with-auto-indent-satisfied arg
         (let ((transient-mark-mode nil))
           (yank-advised-indent-function
            (region-beginning) (region-end)))))

     (advice-add 'yank     :after #'yank--auto-indent)
     (advice-add 'yank-pop :after #'yank--auto-indent)

     (defun yank-unindented ()
       (interactive)
       (yank 1))

     (with-eval-after-load 'evil
       (defun evil-visual-paste--auto-indent (_ &optional register _)
         ;; not sure what yank handler is for, leave it in, to avoid errors
         "same as `yank--auto-indent', but for evil visual yank replace."
         (with-auto-indent-satisfied register
           (let ((transient-mark-mode nil))
             (yank-advised-indent-function
              (region-beginning) (region-end)))))

       (advice-add 'evil-visual-paste :after #'evil-visual-paste--auto-indent)
       (advice-add 'evil-paste-after  :after #'evil-visual-paste--auto-indent)
       (advice-add 'evil-paste-before :after #'evil-visual-paste--auto-indent))
   #+END_SRC

** display-buffer
   #+BEGIN_SRC emacs-lisp
     (use-package +display-buffer-cmds
       :defer t
       :commands (display-buffer--maybe-same-window-and-focus
                  display-buffer--maybe-pop-up-frame-or-window-and-focus
                  display-buffer-reuse-window-and-focus
                  display-buffer-in-previous-window-and-focus
                  display-buffer-in-side-window-and-focus
                  display-buffer-use-some-window-and-focus
                  display-buffer-pop-up-frame-and-focus
                  display-buffer-below-selected-and-focus
                  display-buffer-left
                  display-buffer-right
                  display-buffer-left-and-focus
                  display-buffer-right-and-focus))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle lisp/+display-buffer-cmds.el
     (defmacro display-buffer--create-focus-method (func)
       `(defun ,(intern (concat (symbol-name func) "-and-focus")) (buffer alist)
          (let ((window (,func buffer alist)))
            (when window
              (select-window window)))))

     (display-buffer--create-focus-method display-buffer--maybe-same-window)
     (display-buffer--create-focus-method display-buffer-reuse-window)
     (display-buffer--create-focus-method display-buffer--maybe-pop-up-frame-or-window)
     (display-buffer--create-focus-method display-buffer-in-previous-window)
     (display-buffer--create-focus-method display-buffer-in-side-window)
     (display-buffer--create-focus-method display-buffer-use-some-window)
     (display-buffer--create-focus-method display-buffer-pop-up-frame)
     (display-buffer--create-focus-method display-buffer-below-selected)

     ;; See also: https://stackoverflow.com/questions/21542914/make-buffer-list-always-appear-in-horizontal-split/21544307#21544307
     (defun display-buffer-left (buffer alist)
       "display a buffer to the left of the current buffer.
     (1) If `buffer` is already displayed, then display it again in the same window.
     (2) If `buffer` is not already displayed, and if there is a window to the left,
         then display that `buffer` in said window.
     (3) If `buffer` is not already displayed, and if there is a window to the right, then
         use the selected window.
     (4) If all else fails, then create a new window to the left and display `buffer` there.
     (5) Select the target window which displays `buffer`."
       (let ((window
              (cond
               ((get-buffer-window buffer (selected-frame)))
               ;; ((window-in-direction 'above))
               ((window-in-direction 'left))
               ((window-in-direction 'right)
                (selected-window))
               (t
                (split-window (selected-window) nil 'left)))))
         (window--display-buffer buffer window 'window alist)))

     (defun display-buffer-right (buffer alist)
       "display a buffer to the right of the current buffer.
     (1) If `buffer` is already displayed, then display it again in the same window.
     (2) If `buffer` is not already displayed, and if there is a window to the right,
         then display that `buffer` in said window.
     (3) If `buffer` is not already displayed, and if there is a window to the left, then
         use the selected window.
     (4) If all else fails, then create a new window to the right and display `buffer` there.
     (5) Select the target window which displays `buffer`."
       (let ((window
              (cond
               ((get-buffer-window buffer (selected-frame)))
               ;; ((window-in-direction 'above))
               ((window-in-direction 'right))
               ((window-in-direction 'left)
                (selected-window))
               (t
                (split-window (selected-window) nil 'right)))))
         (window--display-buffer buffer window 'window alist)))

     (display-buffer--create-focus-method display-buffer-left)
     (display-buffer--create-focus-method display-buffer-right)

     (provide '+display-buffer-cmds)
   #+END_SRC

** fonts-emojis
   #+BEGIN_SRC emacs-lisp
     ;; adapted from [[https://github.com/zonuexe/emoji-fontset.el/blob/master/emoji-fontset.el][emoji-fontset]]
     (let ((emoji-font-family
            (cl-case window-system
              ('w32 "Segoe UI Emoji")
              ('ns  "Apple Color Emoji")
              (t    "Symbola"))))
       (cl-loop
        for (x . y) in '((#x1f000 . #x1f02f) ;; Mahjong Tiles
                         (#x1f0a0 . #x1f0ff) ;; Playing Cards
                         (#x1f110 . #x1f19a) ;; Enclosed Alphanumeric Supplement
                         ;; Regional Indicator Symbol, Enclosed Ideographic Supplement,
                         ;; Emoticons, Transport and Map Symbols, Alchemical Symbols
                         (#x1f1e6 . #x1f8ff))
        do (setq x (decode-char 'ucs x)
                 y (decode-char 'ucs y))
        do (set-fontset-font "fontset-default" (cons x y) emoji-font-family)))
   #+END_SRC

** library
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (lisp! "lib"))
   #+END_SRC

*** misc
    #+BEGIN_SRC emacs-lisp
      (use-package +lib-misc
        :defer t
        :commands (toggle-lexical-binding
                   keymaps-at-point
                   toggle-relative-linum
                   toggle-buffer-header))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/lib/+lib-misc.el
      (defun toggle-lexical-binding (&optional arg)
        (interactive "P")
        (setq lexical-binding
              (if (not arg)
                  (not lexical-binding)
                (or (listp arg)
                    (not (zerop arg)))))

        (message "lexical binding: %s" (if lexical-binding
                                           (propertize "enabled" 'face 'compilation-info)
                                         (propertize "disabled" 'face 'compilation-error))))

      (defvar-local header-line-actual-format nil
        "value of `header-line-format' before being modified by `toggle-buffer-header'.")

      (defun toggle-buffer-header (&optional arg no-error)
        (interactive "P")
        (let ((showing (if arg
                           (not (zerop (prefix-numeric-value arg)))
                         header-line-actual-format)))
          (if showing
              (if (not header-line-actual-format)
                  (unless no-error
                    (user-error "tried to restore header-line: nil"))
                (setq header-line-format  header-line-actual-format
                      header-line-actual-format nil))
            (setq header-line-actual-format header-line-format
                  header-line-format nil))))

      (defun toggle-relative-linum (&optional arg)
        "toggle relative line numbers in the current buffer
      when ARG is given and is 0, then relative line numbers are disabled,
      otherwise if ARG is greater than 0 then they're enabled and if ARG is
      nil then relative line-numbers are toggled."
        (interactive "P")
        (setq display-line-numbers
              (cond
               ((and arg (zerop (prefix-numeric-value arg)))
                t)
               (arg 'relative)
               (t
                (if (eq display-line-numbers 'relative) t 'relative)))))

      (defun keymaps-at-point ()
        "List entire keymaps present at point."
        (interactive)
        (let ((map-list
               (list
                (mapcar (lambda (overlay)
                          (overlay-get overlay 'keymap))
                        (overlays-at (point)))
                (mapcar (lambda (overlay)
                          (overlay-get overlay 'local-map))
                        (overlays-at (point)))
                (get-text-property (point) 'keymap)
                (get-text-property (point) 'local-map))))
          (apply #'message
                 (concat
                  "Overlay keymap: %s\n"
                  "Overlay local-map: %s\n"
                  "Text-property keymap: %s\n"
                  "Text-property local-map: %s")
                 map-list)))

      (provide '+lib-misc)
    #+END_SRC

*** text
    :PROPERTIES:
    :header-args+: :tangle lisp/lib/+lib-text.el
    :END:

    #+BEGIN_SRC emacs-lisp :tangle init.el
      (use-package +lib-text
        :defer t
        :commands (dos2unix
                   unix2dos
                   remove-all-trailing-whitespace
                   toggle-comment-at-point
                   tab-to-tab-stop-with-prefix
                   indent-back-to-normal
                   back-to-tab-stop
                   toggle-comment-at-point-alt
                   custom-insert-line
                   custom-insert-line-below
                   custom-insert-line-above
                   evil-join-backwards))
    #+END_SRC

    Manipulate chunks of text, such as leading indentation or sequential padding.

    #+BEGIN_SRC emacs-lisp
      (defun dos2unix ()
        "Not exactly but it's easier to remember"
        (interactive)
        (set-buffer-file-coding-system 'unix 't))

      (defun unix2dos ()
        (interactive)
        (set-buffer-file-coding-system 'dos 't))

      ;; (defun remove-indentation-spaces ()
      ;;   "remove TAB-WIDTH spaces from the beginning of this line"
      ;;   (interactive)
      ;;   (if (save-excursion (re-search-backward "[^ \t]" (line-beginning-position) t))
      ;;       (delete-backward-char 1)
      ;;     (indent-rigidly (line-beginning-position) (line-end-position) (- tab-width))))

      (defun remove-all-trailing-whitespace (start end)
        "removes all trailing whitespace from every line in buffer"
        (interactive (if (region-active-p)
                         (list (region-beginning) (region-end))
                       (list (point-min) (point-max))))

        (barf-if-buffer-read-only) ; can't remove from current buffer

        (save-excursion
          (goto-char end) ; start from end so delete can work forward

          (while (and (> (point) start)
                      (re-search-backward " +$" nil t))
            (delete-region (point) (line-end-position)))))

      (defun indent-back-to-normal (&optional column)
        "indents the current line using indent region.
      this'll either reset indentation to it's normal position, or
      bring you to the beginning of an empty line. Specify a column
      value to force that column to be used by indent region."
        (interactive "P")

        (let ((inhibit-message t))
          (indent-region (line-beginning-position) (1+ (line-end-position)) column)))

      ;; https://emacs.stackexchange.com/questions/32816/backwards-tab-to-tab-stop
      (defun tab-to-tab-stop-with-prefix (&optional prev)
        "Like `tab-to-tab-stop', but toggle direction with prefix."
        (interactive "P")
        (let ((nexttab (indent-next-tab-stop (current-column) prev)))
          (delete-horizontal-space t)
          (indent-to nexttab)))

      (defun back-to-tab-stop ()
        (interactive)
        (let ((current-prefix-arg 1))
          (call-interactively #'tab-to-tab-stop-with-prefix)))
    #+END_SRC

    Comment regions of text or by default, the current line.

    #+BEGIN_SRC emacs-lisp
      (defun toggle-comment-at-point (start end)
        "toggle comment on line or region
      pass a prefix argument to bulk toggle across multiple lines.
      This function will always comment the line your point is on,

      prefix behaviour:
      | prefix range | behaviour                                        |
      |--------------+--------------------------------------------------|
      | 0            | current line only                                |
      | >1           | current line and upto prefix-1 lines after point |
      | <1           | current line and upto prefix lines before point  |

      the behaviour is mapped to exactly replicate the vim dd command."
        (interactive (let ((prefix current-prefix-arg))
                       (if (region-active-p)
                           ;; always use region when region available
                           (list (region-beginning) (region-end))
                         (if (or (not prefix)
                                 (listp prefix) ;; regular prefix
                                 (zerop prefix))
                             ;; no prefix, comment current line only
                             (list (line-beginning-position) (line-end-position))
                           ;; prefix given, use it to determine comment region
                           (let* ((prefix-positive (> prefix 0))
                                  (current-pos (if prefix-positive
                                                   (line-beginning-position)
                                                 (line-end-position))))
                             (save-excursion
                               (if prefix-positive
                                   (progn
                                     (evil-next-line (- prefix 1))
                                     (list current-pos (line-end-position)))
                                 (evil-next-line prefix)
                                 (list (line-beginning-position) current-pos))))))))
        (comment-or-uncomment-region start end))

      (defun toggle-comment-at-point-alt ()
        "variant of toggle-comment-at-point which conforms to relative line numbers

      prefix behaviour:
      | prefix range | behaviour                                         |
      |--------------+---------------------------------------------------|
      | 0            | current line only                                 |
      | >1           | current line and upto prefix-1 lines after point  |
      | <1           | current line and upto prefix+1 lines before point |
      "
        (interactive)
        (let ((current-prefix-arg (and current-prefix-arg
                                       (cond
                                        ((>= current-prefix-arg 1) (1+ current-prefix-arg))
                                        ;; ((<  current-prefix-arg 0) (1- current-prefix-arg))
                                        (t current-prefix-arg)))))
          (call-interactively 'toggle-comment-at-point)))

      (defun yank-and-comment (&optional prefix)
        (interactive "P")
        (when (> (length kill-ring)
                 0)
          (save-excursion
            (let ((beginning (point)))
              (call-interactively 'yank)
              (comment-region beginning (point))))
          (evil-forward-word))) ;; move to beginning of comment
    #+END_SRC

    Line insertion and joining functions.

    #+BEGIN_SRC emacs-lisp
      (defun custom-insert-line (&optional prefix)
        "inserts a line above or below point

      if a prefix argument of 0 or more (or none) is given, the
      line is inserted below the point. Otherwise its inserted
      above the point.

      The absolute value of the prefix determines how many lines
      are inserted.

      Eg: A prefix of:
        ,* nil - inserts a single line below the cursor
        ,* -1  - inserts a single line above the cursor
        ,* 0   - inserts a single line below the cursor
        ,* 1   - inserts a single line below the cursor
        ,* -10 - inserts 10 lines above the cursor
        ,* 10  - inserts 10 lines below the cursor"
        (interactive "P")

        (save-excursion
          (let ((move-arg (if (or (not prefix)
                                  (>= prefix 0))
                              nil ; if prefix xor prefix >= 0
                            0)))
            (move-end-of-line move-arg)
            (open-line (max 1 (abs prefix))))))

      (defun custom-insert-line-below (&optional prefix)
        (interactive "P")
        (custom-insert-line (abs (or prefix 1))))

      (defun custom-insert-line-above (&optional prefix)
        (interactive "P")
        (custom-insert-line (- (abs (or prefix 1)))))

      (defun evil-join-backwards (&optional prefix)
        "same as join line, except joins line immeadiately before point"
        (interactive "p")
        (let ((start nil)
              (end   nil))
          (if (evil-visual-state-p)
              (let ((range (evil-visual-range)))
                (setq start (nth 0 range))
                (setq end   (nth 1 range)))
            ;; not visual, calculate ranges
            (setq end (point))
              (save-excursion
                (forward-line (- (abs prefix)))
                (setq start (point))))
          ;; remove excursion block if you wan't to
          ;; reallign point to start of line on join
          (save-excursion
            (if (line-empty-p start)
                ;; when joining onto an empty line
                ;; maintain leading whitespace
                (evil-join-whitespace start end)
              ;; otherwise trim to single space
              (evil-join start end)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-text)
    #+END_SRC

*** text-query
    :PROPERTIES:
    :header-args+: :tangle lisp/lib/+lib-text-query.el
    :END:

    #+BEGIN_SRC emacs-lisp :tangle init.el
      (use-package +lib-text-query
        :defer t
        :commands (line-width
                   column-number
                   in-comment-p
                   in-font-lock-comment-p
                   line-beginning-column
                   yank-and-comment
                   point-to-coordinates
                   line-empty-p
                   list-faces))
    #+END_SRC

    functions for querying information about the text at point or retrieve other
    relevent information.

    #+BEGIN_SRC emacs-lisp
      (defun line-width (char-pos)
        "returns the number of columns on the line at char-pos"
        (interactive (if current-prefix-arg
                         (list current-prefix-arg)
                       (list (point))))
        (save-excursion
          (if (not (eql char-pos (point)))
            (goto-char char-pos))
          (let ((line-width (max (- (line-end-position) (line-beginning-position) 1) 0)))
            (if (called-interactively-p 'any)
                (message (format "Line Width: %03d" line-width)))

            line-width)))

      (defun column-number (point)
        "returns the column number at point"
        (interactive "")
        (save-excursion
          (goto-char point)
          (current-column)))

      (defun point-to-coordinates (&optional point)
        "convert a point to an XY coordinate alist"
        (or point (setq point (point)))
        `(,(line-number-at-pos point) . ,(column-number point)))

      (defun line-empty-p (&optional point)
        (save-excursion
          (and point (goto-char point))
          (beginning-of-line)
          (looking-at "[[:space:]]*$")))

      (defun list-faces (&optional point)
        (interactive "d")
        (or point (setq point (point)))
        (let ((faces (remq nil
                           `(,(get-char-property point 'read-face-name)
                             ,(get-char-property point 'face)
                             ,(plist-get (text-properties-at point) 'face)))))
          (and (called-interactively-p 'any) (message (format "%s" faces)))
          faces))

      (defun in-comment-p (&optional pos)
        (save-excursion
          (goto-char (or pos (point)))
          (nth 4 (syntax-ppss))))

      (defun in-font-lock-comment-p (&optional pos)
        "Test if character at POS is comment.
      If POS is nil, character at `(point)' is tested"
        (unless pos (setq pos (point)))
        (let* ((fontfaces (get-text-property pos 'face)))
          (when (not (listp fontfaces))
            (setf fontfaces (list fontfaces)))
          (delq nil
                (mapcar #'(lambda (f)
                            ;; learn this trick from flyspell
                            (or (eq f 'font-lock-comment-face)
                                (eq f 'font-lock-comment-delimiter-face)))
                        fontfaces))))

      (defun line-beginning-column (&optional point)
        (save-excursion
          (goto-char (or point (point)))
          (evil-first-non-blank)
          (current-column)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-text-query)
    #+END_SRC
*** buffer-control
    :PROPERTIES:
    :header-args+: :tangle lisp/lib/+lib-buffer-control.el
    :END:

     #+BEGIN_SRC emacs-lisp :tangle init.el
       (use-package +lib-buffer-control
         :defer 30
         :commands (kill-this-buffer-and-window-maybe
                    switch-to-last-buffer
                    kill-all-windows-and-return-to-home
                    halt-and-catch-fire
                    switch-to-messages-buffer
                    force-set-all-visible-windows-dedication
                    window-zen
                    window-zen-restore
                    display-last-buffer
                    vertical-display-last-buffer
                    shell-command-on-buffer
                    set-window-dedication
                    async-shell-command-on-buffer
                    safe-erase-buffer
                    yank-whole-buffer-as-kill
                    split-window-right-and-focus
                    split-window-below-and-focus)
         :init
         (general-define-key
           :keymaps 'emacs-window-map
           "T"   'force-set-all-visible-windows-dedication
           "o"   'display-last-buffer
           "C-o" 'display-last-buffer
           "SPC" 'set-window-dedication
           "M-d" 'set-window-dedication
           "O"   'vertical-display-last-buffer
           "M-o" 'vertical-display-last-buffer))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun switch-to-messages-buffer ()
        "switches to messages buffer"
        (interactive)
        (switch-to-buffer (messages-buffer)))

      (defun switch-to-last-buffer (&optional buffer)
        (interactive)
        (switch-to-buffer buffer))

      (defun kill-this-buffer-and-window-maybe ()
        "kills the currently open buffer and the window if another is open"
        (interactive)
        (let ((window-count (length (window-list))))
          (if (> window-count 1)
              (kill-buffer-and-window)
            (kill-this-buffer))))

      (defun kill-all-windows-and-return-to-home ()
        "kills every other window and returns to home buffer"
        (interactive)
        (dolist (window (cdr (window-list)))
          ;; window-list starts with current window
          (delete-window window))
        (goto-home-buffer))

      (defalias 'halt-and-catch-fire #'kill-all-windows-and-return-to-home)

      (defun force-set-all-visible-windows-dedication (&optional dedicate)
        "allows you to set the dedication of all visible windows
      dedicate if truthy, will result in all windows recieving a dedication.
      if falsy, all windows will have their dedication removed"
        (interactive "P")
        ;; TODO require persp-mode here
        (and dedicate (setq dedicate t))      ; rationalise value as bool
        (or  dedicate (setq dedicate nil))    ; rationalise value as nil

        (dolist (window (window-list))
          (when (not (eq dedicate (window-dedicated-p window)))
            (set-window-dedicated-p window dedicate))))

      (let ((window-zen-register ?_))
        (defun window-zen (&optional prefix)
          "Maximize buffer or undo maximize buffer
      pass prefix to also restore original point."
          ;; from [[https://gist.github.com/3402786][here]].
          (interactive "P")
          (if (and (= 1 (length (window-list)))
                   (assoc window-zen-register register-alist))
              (window-zen-restore prefix)
            (window-configuration-to-register window-zen-register)
            (delete-other-windows)))

        (defun window-zen-restore (&optional prefix)
          "force restoration of window, instead of replacement of previous zen.
      like `window-zen' pass prefix argument to save excursion"
          (interactive)
          (unless (assoc window-zen-register register-alist)
            (user-error "no previous zen found."))

          (if prefix
              (jump-to-register window-zen-register)
            (save-excursion
              (jump-to-register window-zen-register)))))

      (defun shell-command-on-buffer (&optional prefix)
        "Asks for a command and executes it in inferior shell with current buffer
      as input. if prefix is given, output of command is inserted in current buffer
      at point."
        (interactive "P")
        (let ((command (read-shell-command "Shell command on buffer: "))
              (input-buffer (current-buffer)) output-buffer process-output)
          (with-temp-buffer ;; needed for process output
            (setq output-buffer (current-buffer))

            (with-current-buffer input-buffer
              (shell-command-on-region (point-min) (point-max) command output-buffer nil output-buffer))

            (setq process-output (buffer-string)))

          (if prefix
              (insert process-output)
            (message process-output))))

      (defun async-shell-command-on-region (&optional start end prefix)
        "same as `async-shell-command', but also sends the current region
      as stdin to the process."
        (interactive "r\nP")
        (require 'subr-x) ;; needed for string-empty-p

        (unless (eq start end) ;; region is not active
          (let ((command (read-shell-command "Async shell command on buffer: ")))
            (unless (string-empty-p command)
              (async-shell-command command) ;; XXX WHY??? don't you return the process :P
              (let ((program-buffer (get-buffer "*Async Shell Command*")))

                (process-send-region (get-buffer-process program-buffer) start end)

                (with-current-buffer program-buffer
                  (comint-send-eof)

                  (unless (get-buffer-process program-buffer)
                    (funcall-interactively 'initial-major-mode)))

                (display-buffer program-buffer))))))

      (defun async-shell-command-on-buffer (&optional prefix)
        "same as `async-shell-command-on-region' but sends whole buffer as region"
        (interactive "P")
        (async-shell-command-on-region (point-min) (point-max) prefix))

      (defun safe-erase-buffer (&optional prefix)
        "prompts to really erase and then erases the current buffer"
        (interactive "P")
        (barf-if-buffer-read-only)
        (when (or prefix
                  (y-or-n-p (concat "Erase content of buffer "
                                    (buffer-name)
                                    " ?")))
            (erase-buffer)))

      (defun split-window-right-and-focus ()
        (interactive)
        (split-window-horizontally)
        (other-window 1))

      (defun split-window-below-and-focus ()
        (interactive)
        (split-window-vertically)
        (other-window 1))

      (defun yank-whole-buffer-as-kill (buffer)
        (interactive (list (current-buffer)))
        (with-current-buffer buffer
          (copy-region-as-kill (point-min) (point-max))))

      (defun display-last-buffer ()
        (interactive)
        (display-buffer
         (other-buffer)
         '((display-buffer-below-selected-and-focus
            display-buffer-in-previous-window-and-focus
            display-buffer-use-some-window-and-focus
            display-buffer-pop-up-frame-and-focus))))

      (defun vertical-display-last-buffer ()
        (interactive)
        (display-buffer
         (other-buffer)
         (cons '(display-buffer-right-and-focus
                 display-buffer-in-previous-window-and-focus
                 display-buffer-use-some-window-and-focus
                 display-buffer-pop-up-frame-and-focus)
               '((side . right)
                 (window-width . 0.5)))))

      ;; (cl-defmacro window-route (&rest paths)
      ;;   "macro to see which window exists at the end of a route
      ;; from the current window.

      ;; Accepts up, down, left & right as direction markers & every
      ;; route begins from the top left hand side of the current window."
      ;;   `(let ((paths ',paths))
      ;;      (if (not paths)
      ;;          (selected-window)
      ;;        (condition-case err
      ;;            (save-excursion
      ;;              ;; goto start to ensure route begins from
      ;;              ;; top left hand side of current window.
      ;;              (goto-char (max (point-min) (window-start)))
      ;;              (goto-char (line-beginning-position))
      ;;              (save-selected-window
      ;;                (let (head)
      ;;                  ;; TODO check whether to goto top left hand side here.
      ;;                  (while (setq head (pop paths))
      ;;                    (cond
      ;;                     ((eq head 'up)    (windmove-up))
      ;;                     ((eq head 'down)  (windmove-down))
      ;;                     ((eq head 'left)  (windmove-left))
      ;;                     ((eq head 'right) (windmove-right))))
      ;;                  (selected-window))) )
      ;;          (user-error (message "window-route: %s" err))))))

      ;; (defun window-expand-up ()
      ;;   "Expand current window into region of window above.

      ;;                          Begun from 3           Begun from 2
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1             |      | 1        | 3  |      | 2        | 1  |
      ;; |               |  |-> |          |    |  |-> |          |    |
      ;; |---------+-----|      |----------+    |      |          +----|
      ;; | 2       | 3   |      | 2        |    |      |          | 3  |
      ;; +---------------+      +---------------+      +---------------+

      ;; "
      ;;   )

      ;; (defun window-expand-down ()
      ;;   "Expand current window into region of window below.

      ;;                          Begun from 2           Begun from 1
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1       | 2   |      | 1        | 2  |      | 1        | 2  |
      ;; |         |     |  |-> |          |    |  |-> |          |    |
      ;; |---------+-----|      |----------+    |      |          +----|
      ;; | 3             |      | 3        |    |      |          | 3  |
      ;; +---------------+      +---------------+      +---------------+
      ;; "
      ;;   )

      ;; (defun window-expand-right ()
      ;;   "Expand current window into region of window to the right.

      ;;                          Begun from 1           Begun from 3
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1       | 2   |      | 1             |      | 1        | 2  |
      ;; |         |     |  |-> |               |  |-> |          |    |
      ;; |---------+     |      |----------+----|      |----------+----|
      ;; | 3       |     |      | 3        | 2  |      | 3             |
      ;; +---------------+      +---------------+      +---------------+
      ;; "
      ;;   )

      ;; (defun window-expand-left ()
      ;;   "Expand current window into region of window to the left.

      ;;                          Begun from 2           Begun from 3
      ;; +---------------+      +---------------+      +---------------+
      ;; | 1       | 2   |      | 2             |      | 1        | 2  |
      ;; |         |     |  |-> |               |  |-> |          |    |
      ;; |         +-----|      |----------+----|      |----------+----|
      ;; |         | 3   |      | 1        | 3  |      | 3             |
      ;; +---------------+      +---------------+      +---------------+
      ;; "
      ;;   )

      (defun set-window-dedication (&optional prefix window)
        "Set the dedication value for the current window.
      By default it toggles the dedication. Supply a prefix arg
      to explicitly enable or disable.

      When a window is dedicated, you can't change the buffer for it.
      "
        (interactive "P")
        (when (and prefix
                   (listp prefix))
          (setq prefix (car prefix)))
        (or window (setq window (selected-window)))

        (set-window-dedicated-p
         window
         (if prefix
             (> prefix 0)
           (not (window-dedicated-p window)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-buffer-control)
    #+END_SRC

*** unpackaged
    :PROPERTIES:
    :header-args+: :tangle lisp/lib/+lib-unpackaged.el
    :END:

    Many useful functions sourced from [[https://github.com/alphapapa/unpackaged.el/blob/master/unpackaged.el][unpackaged.el]].

    #+BEGIN_SRC emacs-lisp :tangle init.el
      (use-package +lib-unpackaged
        :defer t
        :commands (font-compare
                   lorem-ipsum-overlay)
        :init
        (leader/set-keys
          "xl" 'lorem-ipsum-overlay)

        :config
        ;; used in a bunch of places
        (defvar lorem-ipsum-text nil))
    #+END_SRC

    Font methods.

    #+BEGIN_SRC emacs-lisp
      (defun font-compare (text fonts)
        "Compare TEXT displayed in FONTS.
      If TEXT is nil, use `lorem-ipsum' text.  FONTS is a list of font
      family strings and/or font specs.

      Interactively, prompt for TEXT, using `lorem-ipsum' if left
      empty, and select FONTS with `x-select-font', pressing Cancel to
      stop selecting fonts."
        (interactive (list (pcase (read-string "Text: ")
                             ("" nil)
                             (else else))
                           ;; `x-select-font' calls quit() when Cancel is pressed, so we use
                           ;; `inhibit-quit', `with-local-quit', and `quit-flag' to avoid that.
                           (let ((inhibit-quit t))
                             (cl-loop for font = (with-local-quit
                                                   (x-select-font))
                                      while font
                                      collect font into fonts
                                      finally do (setf quit-flag nil)
                                      finally return fonts))))
        (setq text (or text (s-word-wrap 80 (s-join " " (progn
                                                          (require 'lorem-ipsum)
                                                          (seq-random-elt lorem-ipsum-text))))))
        (with-current-buffer (get-buffer-create "*Font Compare*")
          (erase-buffer)
          (--each fonts
            (let ((family (cl-typecase it
                            (font (symbol-name (font-get it :family)))
                            (string it))))
              (insert family ": "
                      (propertize text
                                  'face (list :family family))
                      "\n\n")))
          (pop-to-buffer (current-buffer))))
    #+END_SRC

    Lorem ipsum overlay.

    #+BEGIN_SRC emacs-lisp
       (require 'lorem-ipsum)

       (defcustom lorem-ipsum-overlay-exclude nil
         "List of regexps to exclude from `lorem-ipsum-overlay'."
         :type '(repeat regexp))

       ;;;###autoload
       (defun lorem-ipsum-overlay ()
         "Overlay all text in current buffer with \"lorem ipsum\" text.
       When called again, remove overlays.  Useful for taking
       screenshots without revealing buffer contents.

       Each piece of non-whitespace text in the buffer is compared with
       regexps in `lorem-ipsum-overlay-exclude', and ones
       that match are not overlaid.  Note that the regexps are compared
       against the entire non-whitespace token, up-to and including the
       preceding whitespace, but only the alphabetic part of the token
       is overlaid.  For example, in an Org buffer, a line that starts
       with:

         ,#+TITLE: unpackaged.el

       could be matched against the exclude regexp (in `rx' syntax):

         (rx (or bol bos blank) \"#+\" (1+ alnum) \":\" (or eol eos blank))

       And the line would be overlaid like:

         ,#+TITLE: parturient.et"
         (interactive)
         (let ((ovs (overlays-in (point-min) (point-max))))
           (if (cl-loop for ov in ovs
                        thereis (overlay-get ov :lorem-ipsum-overlay))
               ;; Remove overlays.
               (dolist (ov ovs)
                 (when (overlay-get ov :lorem-ipsum-overlay)
                   (delete-overlay ov)))
             ;; Add overlays.
             (let ((lorem-ipsum-words (--> Lorem-ipsum-text
                                           (-flatten it) (apply #'concat it)
                                           (split-string it (rx (or space punct)) 'omit-nulls)))
                   (case-fold-search nil))
               (cl-labels ((overlay-match (group)
                                          (let* ((beg (match-beginning group))
                                                 (end (match-end group))
                                                 (replacement-word (lorem-word (match-string group)))
                                                 (ov (make-overlay beg end)))
                                            (when replacement-word
                                              (overlay-put ov :lorem-ipsum-overlay t)
                                              (overlay-put ov 'display replacement-word))))
                           (lorem-word (word)
                                       (if-let* ((matches (lorem-matches (length word))))
                                           (apply-case word (downcase (seq-random-elt matches)))
                                         ;; Word too long: compose one.
                                         (apply-case word (downcase (compose-word (length word))))))
                           (lorem-matches (length &optional (comparator #'=))
                                          (cl-loop for liw in lorem-ipsum-words
                                                   when (funcall comparator (length liw) length)
                                                   collect liw))
                           (apply-case (source target)
                                       (cl-loop for sc across-ref source
                                                for tc across-ref target
                                                when (not (string-match-p (rx lower) (char-to-string sc)))
                                                do (setf tc (string-to-char (upcase (char-to-string tc)))))
                                       target)
                           (compose-word (length)
                                         (cl-loop while (> length 0)
                                                  for word = (seq-random-elt (lorem-matches length #'<=))
                                                  concat word
                                                  do (cl-decf length (length word)))))
                 (save-excursion
                   (goto-char (point-min))
                   (while (re-search-forward (rx (group (1+ (or bol bos blank (not alpha)))
                                                        (0+ (not (any alpha blank)))
                                                        (group (1+ alpha))
                                                        (0+ (not (any alpha blank)))))
                                             nil t)
                     (unless (cl-member (match-string 0) lorem-ipsum-overlay-exclude
                                        :test (lambda (string regexp)
                                                (string-match-p regexp string)))
                       (overlay-match 2))
                     (goto-char (match-end 2)))))))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (provide '+lib-unpackaged)
    #+END_SRC

* Packages
  Packages which are mandatory. You have to install these for emacs to work as
  intended.

** spaceline
   an amazing mode line... needs to be initialised before all others to make sure
   every buffer inherits the same mode line.

   I'll be using a fork of powerline (spacelines dependency) which has a lot more new
   features compared to the one in melpa.

   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :straight (powerline :type git :host github :repo "jonathanchu/emacs-powerline"
                            :fork (:host github :repo "milkypostman/powerline")))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-load-theme-hook
               (lambda (&rest _)
                 (set-face-attribute
                  'mode-line nil
                  :box
                  `(:line-width 1 :color ,(face-attribute 'mode-line :background) :style none))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package spaceline
       :straight t
       :demand   t
       :config
       (setq spaceline-buffer-id-max-length 25
             spaceline-org-clock t
             winum-auto-setup-mode-line nil
             powerline-default-separator 'slant

             spaceline-window-number-p t
             spaceline-window-numbers-unicode nil

             ;; unicode numbers on the terminal aren't the right
             ;; width and I'm too lazy to find a better font.
             spaceline-workspace-number-p nil
             spaceline-workspace-numbers-unicode nil)

       (setq-default mode-line-format (spaceline-spacemacs-theme))

       (defface spaceline-minibuffer
         `((t (:inherit (spaceline-evil-emacs))))
         "highlight face for spaceline when minibuffer is active"
         :group 'spaceline)

       (defface spaceline-evil-operator
         `((t (:weight normal
               :inherit (error spaceline-evil-motion))))
         "evil operator state face"
         :group 'spaceline)

       (defface spaceline-evil-multiedit
         `((t (:weight normal
                       :inherit (highlight spaceline-evil-motion))))
         "face for evil multiedit face"
         :group 'spaceline)

       (push '(operator  . spaceline-evil-operator)  spaceline-evil-state-faces)
       (push '(multiedit . spaceline-evil-multiedit) spaceline-evil-state-faces)

       (defvar spaceline--highlight-evil-operator-face t
         "when true, spaceline will highlight operator state
     like it would any other state.")

       (setq spaceline-highlight-face-func
             (defun spaceline-highlight-face+ ()
               (if (active-minibuffer-window)
                   'spaceline-minibuffer
                 ;; (spaceline-highlight-face-evil-state)
                 ;; redefine spaceline-highlight-face-evil-state here because
                 ;; it doesn't highlight operator state :(
                 (if (bound-and-true-p evil-local-mode)
                     (let* ((state (if (and (eq 'operator evil-state)
                                           (not spaceline--highlight-evil-operator-face))
                                      evil-previous-state
                                    evil-state))
                            (face (assq state spaceline-evil-state-faces)))
                       (if face (cdr face) (spaceline-highlight-face-default)))
                   (spaceline-highlight-face-default)))))

       ;; by default, colors seem to glitch out on change
       (add-hook 'after-load-theme-hook #'powerline-reset))
   #+END_SRC

*** icons
    #+BEGIN_SRC emacs-lisp
      (defvar spaceline-preferred-icon-height 0.98
        "height of icons in the spaceline modeline")

      (defun spaceline--face-icon-height (face)
        (let ((height (face-attribute face :height)))
          (unless (eq height 'unspecified)
            (/ height 100.0))))

      (defun spaceline-icon-height (&optional height)
        (or height
            spaceline-preferred-icon-height
            (spaceline--face-icon-height 'mode-line)
            (spaceline--face-icon-height 'default)))

      (cl-defmacro spaceline-prepared-icon (func icon-arg &rest args)
        "retrieve an `all-the-icons' icon for display in the spaceline.
      FUNC is a function such as `all-the-icon-faicon' which accepts an argument
      ICON-ARG and a bunch of face properties and returns either a symbol or an
      icon string.

      The remaining arguments should form a PLIST with the following being used
      by this function and the remaining being passed directly to FUNC.

      Keywords
      --------
      face - Can be given to specify a face for the icon. This face will be applied
             over the regular background of the current spaceline section.

      face-when-active - When specified means the face argument from before will only
                         only be applied on the windows spaceline sees as active.

      family - Can be specified as a function to force usage of a certain font family
               for the icon. If ommited the family property is extracted from the icon
               directly. eg. `all-the-icons-icon-family-for-mode'.
      "
        (plist-bind! (args :face :family :height :propertize (:v-adjust . -0.1) (:face-when-active . t))
          (setq family (eval family))

          `(let* ((use-face (and ,face
                                 ,@(when face-when-active
                                     (list (quote (bound-and-true-p active))))))
                  (icon (funcall ,func ,icon-arg
                                 :face (when use-face ,face)
                                 :v-adjust ,v-adjust
                                 :height (spaceline-icon-height ,height)
                                 ,@args)))
             (unless (symbolp icon)
               (if use-face
                   (prog1 icon
                     ;; see https://github.com/domtronn/all-the-icons.el/issues/131
                     (add-face-text-property 0 (length icon) :inherit t icon))
                 (propertize (concat icon (unless (display-graphic-p)  " "))
                             ;; 'display '(raise 0.1)
                             'mouse-face 'mode-line-highlight
                             'face (list :family (or
                                                  ,@(when (and family (functionp family))
                                                      (funcall family))
                                                  (plist-get (get-text-property 0 'face icon)
                                                             :family))
                                         :inherit)))))))
      (put 'spaceline-prepared-icon 'lisp-indent-function 'defun)

      (cl-defmacro spaceline-icon (family icon &rest args)
        "alias for `spaceline-prepared-icon' which uses a font-family as a function.
      FONT-FAMILY should be a symbol (such as faicon) relating to some font family.
      ICON should be a string relating to an icon in that family.

      See `spaceline-prepared-icon' for a description of the remaining arguments.
      "
        (let* ((icon-func (intern (concat "all-the-icons-" (symbol-name family))))
               (family-func (intern (concat (symbol-name icon-func) "-family"))))
          `(spaceline-prepared-icon #',icon-func ,icon :family #',family-func ,@args)))
      (put 'spaceline-icon 'lisp-indent-function 'defun)
    #+END_SRC

*** segments
    #+BEGIN_SRC emacs-lisp
      (defun spaceline-active-macro-to-string+ ()
        (when defining-kbd-macro
          (let ((macro-symbol "@"))
            (if (and (bound-and-true-p evil-mode)
                     evil-this-macro)
                (concat macro-symbol
                        (string evil-this-macro))
              macro-symbol))))

      (defvar spaceline-evil-register-always-display-p+ nil
        "whether to always show something in the modeline,
      even when no register is currently active.")

      (defmacro evil-register-to-string (register-var)
        `(if ,register-var
             (concat "\"" (char-to-string ,register-var))
           (when spaceline-evil-register-always-display-p+
             (make-string 2 ?_))))

      (spaceline-define-segment evil-macro-and-register
        (let ((macro (spaceline-active-macro-to-string+))
              (register (evil-register-to-string evil-this-register)))
          (cond
           ((and macro register)
            (concat macro " " register))
           (macro    macro)
           (register register)))
        :enabled t)

      ;; see for eg segments: [[https://github.com/domtronn/all-the-icons.el/wiki/Spaceline]]
      (spaceline-define-segment minibuffer-active
        "show a stop symbol if minibuffer is active"
        (spaceline-icon faicon "dot-circle-o" :v-adjust 0.00)
        :when (and +icons-available
                   (active-minibuffer-window)))

      (defvar spaceline-major-mode-icon-modes '(org-mode
                                                lisp-interaction-mode
                                                emacs-lisp-mode
                                                magit-diff-mode
                                                powershell-mode
                                                kotlin-mode
                                                makefile-mode)
        "don't show the icon for modes in this list")

      (spaceline-define-segment buffer-mode-icon
        "an `all-the-icons' segment to show the mode of the current buffer"
        (spaceline-prepared-icon #'all-the-icons-icon-for-mode major-mode
          :v-adjust -0.15)
        :when (or (display-graphic-p)
                  (member major-mode spaceline-major-mode-icon-modes))
        :enabled +icons-available)

      (spaceline-define-segment version-control-type-icon
        (let (func icon)
          (cond ((string-match "Git[:-]" vc-mode)
                 (setq func #'all-the-icons-faicon
                       icon "github-alt"))
                ((string-match "SVN-" vc-mode)
                 (setq func #'all-the-icons-faicon
                       icon "svn")))
          (when (and func icon)
            (spaceline-prepared-icon func icon)))
        :when (and vc-mode +icons-available))

      (defun spaceline-vc-git-status+ ()
        "Get the formatted GIT Version Control Icon based on variable `vc-mode'."
        (let* ((branch (cadr (split-string vc-mode "Git[:-]")))
               (local-map (get-text-property 1 'local-map branch)))
          (propertize
           (concat
            (propertize branch 'display '(raise 0.1) 'face `(:inherit)))
           'mouse-face 'mode-line-highlight
           'local-map local-map)))

      (defun spaceline-vc-svn-status+ ()
        "Get the formatted SVN Version Control Icon based on variable `vc-mode'."
        (let ((revision (cadr (split-string vc-mode "-" ))))
          (propertize revision
                      'display '(raise 0.1)
                      'face `(:height ,spaceline-preferred-icon-height
                              :family ,(all-the-icons-octicon-family)
                              :inherit))))

      (spaceline-define-segment version-control-status
        "An `all-the-icons' segment to depict the current VC system with an icon"
        (cond ((string-match "Git[:-]" vc-mode)
               (spaceline-vc-git-status+))
              ((string-match "SVN-" vc-mode)
               (spaceline-vc-svn-status+)))
        :when (and active vc-mode +icons-available))
    #+END_SRC

*** format
    #+BEGIN_SRC emacs-lisp
      (spaceline-compile
        ;; Left
        '((minibuffer-active
           :fallback ((persp-name
                       workspace-number
                       window-number)
                      :fallback evil-state)
           :face highlight-face
           :priority 100)
          auto-compile
          (anzu
           :priority 98)
          ((buffer-modified
            buffer-size
            buffer-mode-icon
            buffer-id
            remote-host)
           :priority 98)
          (major-mode :priority 79)
          (process :when active)
          ((flycheck-error
            flycheck-warning
            flycheck-info)
           :when active
           :priority 89)
          (minor-modes
           :when active
           :priority 9)
          ;; (mu4e-alert-segment :when active)
          ;; (erc-track :when active)
          ((version-control-type-icon
            version-control-status
            )
           :fallback version-control
           :priority 78)
          ;; (org-pomodoro :when active)
          (org-clock :when active))

        ;; Right
        '(projectile-root
          which-function
          (python-pyvenv
           :fallback python-pyenv)
          (purpose :priority 94)
          (battery :when active)
          (selection-info :priority 95)
          input-method
          ((evil-macro-and-register
            buffer-encoding-abbrev
            point-position
            line-column)
           :separator " | "
           :priority 96)
          (global :when active)
          (buffer-position :priority 99)
          (hud :priority 99)))
    #+END_SRC

** ivy
   A clean, elegent, completion framework for emacs.

*** ivy
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
        :straight t
        :defer    nil
        :commands (ivy-toggle-mark)
        :config
        (ivy-mode +1)

        (with-eval-after-load 'magit
          (setq magit-completing-read-function 'ivy-completing-read))

        (setq ivy-height 15
              ivy-use-virtual-buffers t
              projectile-completion-system 'ivy
              ivy-magic-tilde nil)

        (when (emacs>= "27")
          ;; see issue: https://github.com/abo-abo/swiper/issues/2397
          (setq ivy-read-action-function #'ivy-hydra-read-action))

        (push 'ivy-occur-mode whitespace-exempt-modes)

        (setq ivy-preferred-re-builders
              '((ivy--regex-plus         . "ivy")
                (ivy--regex-ignore-order . "order")
                (ivy--regex-fuzzy        . "fuzzy")
                (regexp-quote            . "literal"))

              ;; store as unique variable because counsel
              ;; will just end up adding to it anyways.
              ivy-default-initial-inputs-alist+
              '((counsel-minor . "^+")
                ;; (counsel-package . "^+")
                ;; (org-refile . "^")
                (org-agenda-refile . "^")
                (org-capture-refile . "^")
                ;; (counsel-M-x . "^")
                ;; (counsel-describe-function . "^")
                ;; (counsel-describe-variable . "^")
                ;; (counsel-org-capture . "^")
                ;; (org-refile . "^")
                ;; (org-agenda-refile . "^")
                ;; (org-capture-refile . "^")
                ;; (Man-completion-table . "^")
                ;; (woman . "^")
                )

              ivy-initial-inputs-alist ivy-default-initial-inputs-alist+)

        (defvar ivy-actions-done-hook+ nil
          "hook run after ivy has completed a set of actions.
      this could be when `ivy-done' is invoked, or when `ivy-call'
      has been invoked.")

        (defun ivy-run-actions-done-hook+ (func &rest args)
          (unwind-protect
              (apply func args)
            (run-hooks 'ivy-actions-done-hook+)))

        (advice-add 'ivy-done :around #'ivy-run-actions-done-hook+)
        (advice-add 'ivy-call :around #'ivy-run-actions-done-hook+)

        (defun ivy-kill-line-backward ()
          (interactive)
          (delete-region (minibuffer-prompt-end) (point)))

        (defun ivy-forward-char-or-partial-or-done ()
          "move forward a character or complete selection
      completes selection when there's no characters left to
      move forward."
          (interactive)
          (call-interactively (if (eolp)
                                  'ivy-alt-done
                                'forward-char)))

        (defun ivy-toggle-mark ()
          (interactive)
          (if (ivy--marked-p)
              (when (ivy--marked-p)
                (ivy--unmark (ivy-state-current ivy-last)))
            (unless (ivy--marked-p)
              (ivy--mark (ivy-state-current ivy-last)))))

        (with-eval-after-load "persp-mode"
          ;; thanks [[https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-ivy-el][Bad-ptr]].
          (add-hook 'ivy-ignore-buffers
                    (lambda (b)
                      (when persp-mode
                        (let ((persp (get-current-persp)))
                          (if persp
                              (not (persp-contain-buffer-p b persp))
                            nil)))))

          (setq ivy-sort-functions-alist
                (append ivy-sort-functions-alist
                        '((persp-kill-buffer   . nil)
                          (persp-remove-buffer . nil)
                          (persp-add-buffer    . nil)
                          (persp-switch        . nil)
                          (persp-window-switch . nil)
                          (persp-frame-switch  . nil)))))

        (general-define-key "M-x" 'counsel-M-x)

        (general-define-key
          :keymaps 'counsel-find-file-map
          "C-h" 'counsel-up-directory)

        (leader/set-keys
          "bb" 'ivy-switch-buffer
          "SPC" 'counsel-M-x
          "RET" 'ivy-resume)

        (general-define-key
          :keymaps '(counsel-ag-map
                     counsel-imenu-map)
          "C-l" 'ivy-forward-char-or-partial-or-done
          "M-l" 'ivy-call-and-recenter)

        (general-define-key
          :keymaps 'ivy-minibuffer-map
          "C-j"   nil ;; was ivy-alt-done
          "M-j"   nil ;; was ivy-yank-word
          "M-v"   nil ;; was ivy-scroll-down-command
          "C-M-y" nil ;; was ivy-insert-current-full

          "C-r" 'evil-paste-from-register
          "C-s" 'ivy-reverse-i-search

          "C-v"      'quoted-insert ;; was ivy-scroll-up-command
          "<return>" 'ivy-alt-done ;; also supports tramp expansion
          "RET"      'ivy-alt-done

          ;;; misc
          "C-?" 'describe-mode
          "M-d" 'kill-ring-save ;; save all candidates to kill ring
          ;; erase input, but start filtering from current candidates
          "S-SPC" 'ivy-restrict-to-matches

          ;;; marking
          "C-SPC"         'ivy-mark
          "M-SPC"         'ivy-toggle-mark
          "C-M-SPC"       'ivy-toggle-marks
          "<S-backspace>" 'ivy-unmark-backward

          ;;; selection execution
          ;; exit with current input, not selection
          "<S-return>"   'ivy-immediate-done
          "C-c <return>" 'ivy-immediate-done
          ;; prompt for action, then done
          "<C-return>" 'ivy-dispatching-done
          ;; invoke default action'but exit the minibuffer
          "M-RET" 'ivy-call
          ;; prompt for action, then call
          "C-M-<return>" 'ivy-dispatching-call
          ;; move down, then call default action
          "C-M-j" 'ivy-next-line-and-call
          ;; move down, then call default action
          "C-M-k" 'ivy-previous-line-and-call
          "<escape>" 'minibuffer-keyboard-quit

          ;;; movement commands
          "C-a" 'move-beginning-of-line
          "C-e" 'move-end-of-line
          "C-h" 'backward-char
          "C-l" 'ivy-forward-char-or-partial-or-done
          "C-j" 'next-line
          "C-k" 'previous-line
          "M-j" 'ivy-next-history-element
          "M-k" 'ivy-previous-history-element
          "M-u" 'ivy-occur
          ;; arrow key variants
          "<left>"  'backward-char
          "<right>" 'forward-char
          "<up>"    'previous-line
          "<down>"  'next-line
          ;; suprisingly enough, these are bound correctly
          "C-d" 'scroll-up-command
          "C-u" 'scroll-down-command
          ;; taken from helm, shadows C-o hydra-ivy/body
          "M-o" 'beginning-of-buffer
          "C-o" 'end-of-buffer

          ;;; insertion/deletion
          ;; complete current selection into minibuffer
          ;; leave prompt active to build on it.
          [C-i] 'ivy-insert-current
          "TAB" 'ivy-insert-current

          "M-i" 'ivy-yank-word
          "C-DEL" 'evil-delete-backward-word
          ;; pull word in from point at buffer
          "M-y" 'ivy-yank-word
          "C-w" 'backward-kill-word
          ;; operate on entire input
          "M-w" 'ivy-kill-line-backward
          "M-W" 'kill-line ;; kill forward
          "M-DEL" 'kill-whole-line

          ;;; history - (C-r/C-s still work fine)
          "<S-up>"    'ivy-previous-history-element
          "<S-down>"  'ivy-next-history-element)

        (general-define-key
          :keymaps 'ivy-switch-buffer-map
          "C-k" 'previous-line
          "M-d" 'ivy-switch-buffer-kill)

        (general-define-key
          :keymaps 'ivy-reverse-i-search-map
          "C-k" 'previous-line
          "C-d" 'ivy-reverse-i-search-kill)

        ;; ivy-occur
        (leader/set-keys-for-major-mode '(ivy-occur-mode
                                          ivy-occur-grep-mode)
          ;; 'ivy-wgrep-change-to-wgrep-mode
          "SPC" 'ivy-occur-read-action
          "m"   'ivy-occur-toggle-calling)

        (general-define-key
          :keymaps 'ivy-occur-mode-map
          :states 'motion
          "RET" 'ivy-occur-press-and-switch
          "M-RET" 'ivy-occur-press
          "<C-return>" 'ivy-occur-dispatch
          "gj" 'ivy-occur-next-line
          "gk" 'ivy-occur-previous-line
          "}" 'ivy-occur-next-line
          "{" 'ivy-occur-previous-line
          ;; TODO make d an evil operator
          "d" 'ivy-occur-delete-candidate
          "x" 'ivy-occur-delete-candidate
          "o" 'compilation-display-error

          "gr" 'ivy-occur-revert-buffer
          "q" nil))
    #+END_SRC

*** ivy-avy
    #+BEGIN_SRC emacs-lisp
      (use-package ivy-avy
        :ensure t
        :defer  t
        :after  ivy
        :commands (ivy-avy)
        :init
        (general-define-key
         :keymaps 'ivy-minibuffer-map
         "C-'"   nil ;; was ivy-avy
         "C-q" 'ivy-avy
         "C-c q" 'ivy-avy))
    #+END_SRC

*** ivy-hydra
    #+BEGIN_SRC emacs-lisp
      (use-package ivy-hydra
        :ensure t
        :defer  t
        :after  ivy
        :commands hydra-ivy/body
        :init
        (general-define-key
          :keymaps 'ivy-minibuffer-map
          "C-." 'hydra-ivy/body)

        :config
        (when (autoloadp (symbol-function 'hydra-ivy-custom/body))
          (autoload-do-load (symbol-function 'hydra-ivy-custom/body))))
    #+END_SRC

*** counsel
    a bunch of really useful functions to go alongside ivy.

    #+BEGIN_SRC emacs-lisp
      (use-package counsel
        :ensure t
        :defer  t
        :after  ivy
        :diminish
        :init
        (fset 'describe-bindings-buffer (symbol-function 'describe-bindings))
        (fset 'describe-bindings (symbol-function 'counsel-descbinds))

        (setq counsel-find-file-ignore-regexp
              (rx (or (and ".#" (one-or-more any))
                      (and bol "flycheck_")
                      (and ".class" eol)
                      (and ".o" eol)
                      (and "node_modules")
                      (and ".git" (zero-or-one "/") eol)
                      (and ".elc" eol)
                      (and ".bundle/")
                      (and (any ?. ?-) "lock" (zero-or-one ".json") eol))))

        (leader/set-keys
          "r"  "register/rings"
          "fs" "recursive-find")

        (leader/set-keys-for-major-mode 'org-mode
          "g" 'counsel-org-goto
          "G" 'counsel-org-goto-all)

        (general-define-key
          :keymaps 'emacs-window-map
          "x" 'counsel-wmctrl
          "C-x" 'counsel-wmctrl)

        (with-eval-after-load 'org
          (leader/set-keys
            "oc" '("org-capture" . counsel-org-capture)
            "oh" '("org-headlines" . counsel-org-agenda-headlines)))

        (with-eval-after-load 'company
          (setq company-menu-bindings+
                (append company-menu-bindings+
                        '("C-:" counsel-company))))

        (leader/set-keys
          "ae" 'counsel-package
          "af" 'counsel-faces
          "ee" 'counsel-compilation-errors
          "ic" 'counsel-unicode-char
          "ie" 'counsel-org-entity
          "Mm" 'counsel-major

          "eg" 'counsel-flycheck
          "ry" 'counsel-yank-pop
          "rm" 'counsel-mark-ring
          "r'" 'counsel-evil-marks
          "rr" 'counsel-register
          "re" 'counsel-evil-registers
          "rf" 'counsel-file-registers
          "ar" 'counsel-load-library
          "al" 'counsel-find-library
          "jO" 'counsel-outline

          "ff" 'counsel-find-file
          "fb" 'counsel-bookmark
          "fr" 'counsel-recentf
          "fsf" 'counsel-file-jump
          "fsd" 'counsel-dired-jump
          "fsz" 'counsel-fzf

          "ci" 'counsel-compile

          "sb" 'counsel-grep
          ;; recursive searches
          "sv" 'counsel-git-grep
          "sp" 'counsel-pt
          "sa" 'counsel-ag
          "sr" 'counsel-rg

          ;; "bb" 'counsel-buffer-or-recentf ;; WARN only file buffers
          "bb" 'counsel-switch-buffer
          "hdf" 'counsel-describe-function
          "hdx" 'counsel-fonts
          "hdv" 'counsel-describe-variable
          "hdB" 'describe-bindings-buffer)

        (general-define-key
          "C-M-y" 'counsel-yank-pop)

        :config
        (advice-add 'counsel-locate-action-extern :override #'xopen-url+)

        (setq ivy-initial-inputs-alist ivy-default-initial-inputs-alist+
              counsel-find-file-occur-use-find t
              counsel-evil-registers-height ivy-height)

        (when (windows-p)
          (setq counsel-rg-base-command "rg --with-filename --no-heading --line-number --path-separator // --color never %s ."))

        (counsel-mode +1)

        (ivy-set-actions 'counsel-fonts
                         '(("o" describe-font "describe")))

        (ivy-configure 'counsel-evil-registers :height ivy-height)

        (general-unbind
          :keymaps 'counsel-find-file-map
          "C-DEL" "<C-backspace>")

        (general-define-key
          :keymaps 'counsel-describe-map
          "C-."   'hydra-ivy/body
          "C-S-." 'counsel-find-symbol))
    #+END_SRC

*** swiper
    a minimalist search framework for the current buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package swiper
        :ensure t
        :defer  t
        :after  ivy
        :init
        (leader/set-keys
          "ss" 'swiper
          "s*" 'swiper-all
          "sS" 'swiper-multi)

        (general-define-key
          :keymaps 'ivy-mode-map
          "M-s" 'swiper-isearch-thing-at-point
          [remap isearch-forward] 'swiper-isearch)

        :config
        (with-suppressed-warnings
          (defvaralias 'swiper-history 'regexp-search-ring))

        (defvar swiper-persistent-highlight nil
          "if swiper is using evil-search for searching, determine
      whether to persistently highlight the search results or not.

      Personally I don't like persistent highlighting with swiper
      because I generally use it for one off jumping to important
      lines, so disable it :P")

        (setq swiper-min-highlight most-positive-fixnum) ;; never highlight

        (advice-add #'swiper--remember-search-history :around
                    (defun swiper--clear-evil-highlight (func &rest args)
                      "see `swiper-persistent-highlight'."
                      (if (bound-and-true-p evil-mode)
                          (let ((evil-ex-search-persistent-highlight
                                 swiper-persistent-highlight))
                            (apply func args))
                        (apply func args))))

        (advice-add #'swiper--action :around
                    (defun swiper--action-configure (func &rest args)
                      ;; disable search highlighting in case of new pattern.
                      (when (bound-and-true-p evil-mode)
                        (evil-ex-nohighlight))

                      ;; I don't wanna be told that every time I complete a search
                      (cl-letf (((symbol-function 'actual-message)
                                 (symbol-function 'message))
                                ((symbol-function 'message)
                                 (lambda (message &rest message-args)
                                   (unless (string-equal message "Mark saved where search started")
                                     (apply actual-message message-args)))))
                        (apply func args))))

        (defun swiper-isearch-next-line ()
          (interactive)
          (let ((shift 1))
            (with-ivy-window
              (let ((ln (line-number-at-pos (ivy-state-current ivy-last))))
                (while (and (< (+ ivy--index shift) ivy--length)
                            (= ln (line-number-at-pos (nth (+ ivy--index shift) ivy--all-candidates))))
                  (cl-incf shift))))
            (ivy-next-line shift)))

        (defun swiper-isearch-prev-line ()
          (interactive)
          (let ((shift 1))
            (with-ivy-window
              (let ((ln (line-number-at-pos (ivy-state-current ivy-last))))
                (while (and (>= (- ivy--index shift) 0)
                            (= ln (line-number-at-pos (nth (- ivy--index shift) ivy--all-candidates))))
                  (cl-incf shift))))
            (ivy-previous-line shift)))

        (defvar swiper-norm-action--macro-history nil
          "history variable for macros invoked through `swiper-norm-action'.")

        (defvar swiper-norm-action--macro nil
          "the macro string used for the current invocation
      of `swiper-norm-action'.")
        (add-hook 'ivy-actions-done-hook+
                  (lambda (&rest _)
                    "reset the macro recorded by `swiper-norm-action'."
                    (setq swiper-norm-action--macro nil)))

        (defun swiper-norm-action--execute (markers macro)
          (unwind-protect
              (dolist (marker markers)
                (goto-char marker)
                (evil-ex-normal
                 (line-beginning-position)
                 (line-end-position)
                 macro))
            ;; ensure that all markers are deleted afterwards,
            ;; even in the event of failure
            (dolist (marker markers)
              (set-marker marker nil))))

        (defun swiper-norm-action (_)
          "use swiper like evils :global and :norm command.
      this function prompts for a normal mode macro string, and then
      runs the macro on every candidate in the current swiper session.

      This function tries to be smart about how it's invoked, if it's called
      with no marked candidates, it runs a macro on every candidate in the
      current swiper session. Otherwise it runs only on the candidates that're
      marked."
          ;; when `swiper-norm-action--macro' has already been assigned, this function
          ;; is being called through marked candidates, which've already been
          ;; operated on, so just ignore them.
          (unless swiper-norm-action--macro
            (let ((history-add-new-input t))
              (setq swiper-norm-action--macro
                    (read-string "macro: " nil
                                 'swiper-norm-action--macro-history)))

            (unless (string-empty-p swiper-norm-action--macro)
              (let* ((markers
                      (save-excursion
                        (goto-char (point-min)) ;; start from beginning of buffer, downwards

                        (cl-loop
                         for cand in (or ivy-marked-candidates ivy--old-cands) collect
                         (move-marker (make-marker)
                                      (line-beginning-position
                                       (get-text-property 0 'swiper-line-number cand)))))))
                (evil-with-single-undo
                  (swiper-norm-action--execute markers swiper-norm-action--macro))))))

        (ivy-add-actions 'swiper '(("n" swiper-norm-action "norm")))

        (general-define-key
          :keymaps 'swiper-map
          "M-l" 'swiper-recenter-top-bottom
          "C-l" 'ivy-forward-char-or-partial-or-done
          "C-q" 'swiper-avy
          "C-s" 'swiper-query-replace)

        (general-define-key
         :keymaps 'swiper-isearch-map
         "C-n" #'swiper-isearch-next-line
         "C-p" #'swiper-isearch-prev-line))
    #+END_SRC

*** ivy-xref
    #+BEGIN_SRC emacs-lisp
      (use-package ivy-xref
        :ensure t
        :defer  t
        :after  (ivy xref)
        :init
        (when (emacs>= "27")
          (setq xref-show-definitions-function #'ivy-xref-show-defs))
        (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)

        :config
        (remove-hook 'xref-after-jump-hook 'recenter)

        (defun ivy-xref-call-or-done ()
          (interactive)
          (let (orig-point orig-buffer
                           new-point new-buffer)
            (with-ivy-window
              (setq orig-point  (point)
                    orig-buffer (current-buffer)))

            (ivy-call)

            (with-ivy-window
              (setq new-point  (point)
                    new-buffer (current-buffer)))

            (when (and (eq new-point  orig-point)
                       (eq new-buffer orig-buffer))
              (ivy-done))))

        (defun ivy-xref-forward-char-or-call-or-done ()
          (interactive)
          (call-interactively (if (eolp)
                                  'ivy-xref-call-or-done
                                'forward-char)))

        (defvar ivy-xref-map
          (let ((map (make-sparse-keymap)))
            (set-keymap-parent map ivy-minibuffer-map)
            map)
          "map for use with ivy-xref.")

        (general-def ivy-xref-map
          "C-l" #'ivy-xref-forward-char-or-call-or-done
          "M-l" #'ivy-call-and-recenter)

        (advice-add 'ivy-xref-show-xrefs :around
                    (defun ivy-xref-use-xref-map (func &rest args)
                      (let ((ivy-minibuffer-map ivy-xref-map))
                        (apply func args)))))
    #+END_SRC

*** ivy-bibtex
    Also installs bibtex-completion.

    #+BEGIN_SRC emacs-lisp
      (use-package ivy-bibtex
        :ensure t
        :defer  t
        :only (package! bibtex)
        :init
        (leader/set-keys
          "ob" 'ivy-bibtex)

        (with-eval-after-load 'org
          (leader/set-keys-for-major-mode 'org-mode "[" 'ivy-bibtex))

        (with-eval-after-load 'bibtex
          (setq
           bibtex-completion-bibliography bibtex-files
           bibtex-completion-library-path (list
                                           (org! "docs/")
                                           (org! "docs/unidocs/"))
           bibtex-completion-notes-path (org! "notes"))

          (mkdir bibtex-completion-notes-path t))

        (when (package! ebib)
          (with-eval-after-load 'ebib
            (setq ebib-notes-directory (org! "notes"))))

        :config
        (setq bibtex-completion-pdf-extension '(".pdf" ".epub" ".pptx" ".doc" ".docx")
              bibtex-completion-pdf-open-function 'xopen-url+)

        (defun bibtex-completion-format-citation-org-mode-cite+ (keys)
          "Format cite references for keys in KEYS for `org-mode'."
          (s-join ", " (--map (format "cite:%s" it) keys)))

        (setq bibtex-completion-format-citation-functions
              '((org-mode      . bibtex-completion-format-citation-org-mode-cite+)
                (latex-mode    . bibtex-completion-format-citation-cite)
                (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
                (default       . bibtex-completion-format-citation-default)))

        (defun ivy-bibtex-insert-pdftools-link (cand)
          (let* ((default-directory (or +org-pdf-directory default-directory))
                  (key (cdr (assoc "=key=" (cdr cand))))
                  (pdf (car (bibtex-completion-find-pdf key bibtex-completion-find-additional-pdfs))))
            (unless pdf
              (user-error "bib entry with key %s doesn't have an associated pdf file" key))

            (setq pdf (abbreviate-file-name (expand-file-name pdf)))

            (insert (concat
                      "[[pdftools:"
                      pdf
                      "::"
                      (read-from-minibuffer "Page:" "1")
                      "]["
                      (read-string "Description: " nil nil pdf)
                      "]]"))))
        (setq ivy-bibtex-default-action #'ivy-bibtex-insert-pdftools-link)
        (ivy-add-actions 'ivy-bibtex '(("j" ivy-bibtex-insert-pdftools-link "Insert pdftool link"))))
    #+END_SRC

*** ivy-yasnippet
    Use ivy to select a snippet candidate.

    #+BEGIN_SRC emacs-lisp
      (use-package ivy-yasnippet
        :ensure t
        :defer  t
        :init
        (leader/set-keys
          "is" 'ivy-yasnippet)

        (general-define-key
          :states 'insert
          "C-M-i" 'ivy-yasnippet))
    #+END_SRC

*** counsel-evil-jumps
    #+BEGIN_SRC emacs-lisp
      (defvar counsel--evil-jumps-calling-point nil
        "The point from which we began `counsel-evil-jumps'")

      (defun counsel--evil-jumps-update-fn ()
        (let ((mark (get-text-property 0 'marker (ivy-state-current ivy-last))))
          (when mark
            (counsel--mark-ring-delete-highlight)
            (with-ivy-window
              (switch-to-buffer (marker-buffer mark))
              (goto-char mark)
              (counsel--mark-ring-add-highlight)))))

      (defun counsel--evil-jumps-unwind ()
        (switch-to-buffer (marker-buffer counsel--evil-jumps-calling-point))
        (goto-char counsel--evil-jumps-calling-point)
        (counsel--mark-ring-delete-highlight))

      (defun counsel-evil-jumps ()
        (interactive)
        (require 'counsel)
        (let ((counsel--evil-jumps-calling-point (point-marker)))
          (ivy-read "Jump: "
                    (nreverse
                     (delete-dups
                      (mapcar (lambda (mark)
                                (cl-destructuring-bind (pt path) mark
                                  (let ((buf (get-file-buffer path)))
                                    (unless buf
                                      (setq buf (find-file-noselect path t)))
                                    (with-current-buffer buf
                                      (goto-char pt)
                                      (font-lock-fontify-region (line-beginning-position) (line-end-position))
                                      (propertize
                                        (format "%s:%d %s"
                                                    (buffer-name)
                                                    (line-number-at-pos)
                                                    (string-trim-right (or (thing-at-point 'line) "")))
                                        'marker (point-marker))))))
                              (evil--jumps-savehist-sync))))
                    :sort nil
                    :require-match t
                    :update-fn #'counsel--evil-jumps-update-fn
                    :unwind #'counsel--evil-jumps-unwind
                    :action (lambda (cand)
                              (let ((mark (get-text-property 0 'marker cand)))
                                (switch-to-buffer (marker-buffer mark))
                                (goto-char (marker-position mark)))))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (leader/set-keys "rn" 'counsel-evil-jumps)
    #+END_SRC

*** counsel-pydoc
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-pydoc
        :only (package! python)
        :ensure t
        :defer  t
        :after (python counsel)
        :init
        (leader/set-keys-for-major-mode 'python-mode
          "hd" 'counsel-pydoc))
     #+END_SRC

*** counsel-ggtags
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-gtags
        :ensure t
        :defer  t
        :after counsel
        :init
        (leader/set-keys
          "T" "tags"
          "Tg" 'counsel-gtags-find-definition
          "TG" 'counsel-gtags-find-reference
          "Ts" 'counsel-gtags-find-symbol
          "Tf" 'counsel-gtags-find-file
          "Tn" 'counsel-gtags-go-forward
          "TN" 'counsel-gtags-go-backward
          "Tc" 'counsel-gtags-create-tags
          "Tu" 'counsel-gtags-update-tags
          "TT" 'counsel-gtags-dwim))
    #+END_SRC

*** counsel-tramp
    Select a remote system to connect to, using ivy.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package counsel-tramp
        :ensure t
        :defer  t
        :after counsel
        :init
        (leader/set-keys
          "f@" 'counsel-tramp))
    #+END_SRC

*** counsel-web
    like [[*engine-mode][engine-mode]] except runs queries asynchronously and displays results using an ivy
    session.

    #+BEGIN_SRC emacs-lisp
      (use-package counsel-web
        :straight (counsel-web :type git :host github :repo "mnewt/counsel-web")
        :defer  t
        :after counsel
        :commands (counsel-web-suggest ;; async
                   counsel-web-search
                   counsel-web-thing-at-point)
        :init
        (setq counsel-web-search-action #'browse-url)

        (leader/set-keys
          "se RET"   'counsel-web-search
          "se M-RET" 'counsel-web-suggest
          "se TAB"   'counsel-web-thing-at-point))
    #+END_SRC

*** counsel-projectile
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-projectile
        :ensure t
        :defer  t
        ;; :hook (projectile-mode . counsel-projectile-mode)
        :init
        (setq counsel-projectile-org-capture-templates-first-p nil)

        (general-define-key
          [remap counsel-org-capture] 'counsel-projectile-org-capture)

        (leader/set-keys
          ;; 'counsel-projectile-org-agenda
          "fp"    'counsel-projectile-switch-project
          "pP"    'counsel-projectile-switch-project
          "pf"    'counsel-projectile-find-file
          "pd"    'counsel-projectile-find-dir
          "pb"    'counsel-projectile-switch-to-buffer
          "p SPC" 'counsel-projectile

          "ps"  "search"
          "psg" 'counsel-projectile-grep
          "psv" 'counsel-projectile-git-grep
          "psa" 'counsel-projectile-ag
          "psr" 'counsel-projectile-rg))
    #+END_SRC

*** counsel-css
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-css
        :ensure t
        :defer  t
        :after (:all counsel (:any css-mode less-css-mode))
        :config
        (leader/set-keys-for-major-mode '(css-mode less-css-mode)
          "g" 'counsel-css))
    #+END_SRC

*** counsel-jq
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-jq
        :ensure t
        :defer  t
        :after json-mode
        :init
        (leader/set-keys-for-major-mode 'json-mode
          "j" 'counsel-jq))
    #+END_SRC

*** counsel-world-clock
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package counsel-word-clock
        :straight (counsel-word-clock :type git :host github :repo "kchenphy/counsel-world-clock")
        :defer t)
   #+END_SRC

*** helm-make
    Don't be fooled, helm make works with both helm and ivy.

    #+BEGIN_SRC emacs-lisp
      (use-package helm-make
        :ensure t
        :defer  t
        :init
        (setq helm-make-completion-method 'ivy)

        (leader/set-keys
          "c SPC" 'helm-make-projectile
          "cm"    'helm-make))
    #+END_SRC

*** ivy-lsp
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ivy
        :ensure t
        :defer  t
        :after (:any eglot lsp-mode)
        :init
        (leader/set-keys-for-mode '(lsp-mode eglot--managed-mode)
          "jy" 'lsp-ivy-workspace-symbol
          "jY" 'lsp-ivy-global-workspace-symbol))
    #+END_SRC

*** flyspell-correct
    use ivy to correct mispelled words (through flyspell).

    #+BEGIN_SRC emacs-lisp
      (use-package flyspell-correct-ivy
        :ensure t
        :defer  t
        :after  flyspell
        :init
        ;; NOTE wrapper works backwards through the buffer by default.
        ;;      pass a two prefix args to check forward.
        (setq flyspell-correct-interface #'flyspell-correct-ivy)

        (leader/with-prefix leader-minor-mode-leader-prefix
          (leader/set-keys-for-mode 'flyspell-mode
            leader-minor-mode-leader-prefix 'flyspell-correct-wrapper)))
    #+END_SRC

*** flx
    optimizes ivy search ordering for fuzzy searches.

    #+BEGIN_SRC emacs-lisp
      (use-package flx
        :ensure t
        :defer  t)
    #+END_SRC

*** smex
    show recently accessed commands at the top of M-x.

    #+BEGIN_SRC emacs-lisp
      (use-package smex
        :ensure t
        :defer  t
        :config
        (setq smex-save-file (var! "smex-save.el")))
    #+END_SRC

** evil
   The quintessential [[https://github.com/emacs-evil/evil][vi emulation]] package for emacs :speak_no_evil:.

   NOTE evil is installed here, but configured below, so that hooks are run properly.

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :defer  t
       :init
       ;; needs to be in init, or else doesn't work.
       (setq evil-undo-system 'undo-tree))
   #+END_SRC

*** matchit
    A better jump-to-matching element function for emacs evil.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-matchit
        :ensure t
        :defer  t
        :hook (evil-mode . global-evil-matchit-mode)
        :init
        (defun evilmi-customize-keybinding ()
          (general-define-key
           ;; WARN binding to motion breaks things.
           :states  '(normal visual)
           :keymaps 'evil-matchit-mode-map
           "%" 'evilmi-jump-items))

        :config
        (with-eval-after-load 'evil-matchit-org
          (push '(("begin_center") () ( "end_center") "MONOGAMY") evilmi-org-match-tags)))
    #+END_SRC

*** surround
    #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :ensure t
        :hook (evil-mode . global-evil-surround-mode)
        :config
        (setq-default evil-surround-pairs-alist
                      '((?\( . ("(" . ")"))
                        (?\[ . ("[" . "]"))
                        (?\{ . ("{" . "}"))

                        (?\) . ("( " . " )"))
                        (?\] . ("[ " . " ]"))
                        (?\} . ("{ " . " }"))

                        (?# . ("#{" . "}")) ; ruby string interpolation
                        (?b . ("(" . ")"))
                        (?B . ("{" . "}"))
                        (?> . ("<" . ">"))
                        (?t . evil-surround-read-tag)
                        (?< . evil-surround-read-tag)
                        (?f . evil-surround-function)))

        ;; only allow surrounding via selections or explicitly using gS
        (general-define-key
         :states 'visual
         "s" 'evil-surround-region)

        (general-define-key
         :states 'motion
         "gs" 'evil-surround-edit)

        :bind (:map evil-surround-mode-map ("S" . nil)))
    #+END_SRC

*** anzu
    #+BEGIN_SRC emacs-lisp
      (use-package evil-anzu
        :only (package! anzu)
        :after anzu
        :ensure t
        :demand t)
    #+END_SRC

*** numbers
    #+BEGIN_SRC emacs-lisp
      (use-package evil-numbers
        :defer  t
        :ensure t
        :init
        (general-define-key
         :states 'normal
         "C-S-a" 'evil-numbers/inc-at-pt
         "C-S-x" 'evil-numbers/dec-at-pt))
    #+END_SRC

*** snipe
    Let's you start a motion to some string matching some series of input characters.
    Think evil-search... but to a fixed number of characters, which can be raised at
    invocation.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-snipe
        :ensure t
        :defer  t
        :diminish
        evil-snipe-mode
        evil-snipe-local-mode
        :hook (evil-mode . evil-snipe-mode)
        :config
        (setq evil-snipe-scope 'buffer                                      ; how far can a snipe take place
              evil-snipe-repeat-scope 'buffer                               ; how far repeating previous snipe can take place.
              evil-snipe-enable-highlight nil                               ; don't highlight after jump
              evil-snipe-repeat-keys nil                                    ; sniping after a snipe, repeats the last snipe
              evil-snipe-enable-incremental-highlight t                     ; do highlight matching snipe locations
              evil-snipe-skip-leading-whitespace t                          ; whitespace at start of line is ignored
              evil-snipe-smart-case t                                       ; case sensetive until it's not, like ivy
              evil-snipe-tab-increment t                                    ; hit tab to raise amount of snipes left
              evil-snipe-override-evil-repeat-keys nil                      ; don't replace ; and , with evil keys
              evil-snipe-auto-disable-substitute nil                        ; keep my substitute key available
              )

        (defvar evil-snipe-find-scopes-to-line+ nil
          "when true, evil-snipe-{f,F,t,T} (I.E. for single finds) only extends to EOL.")

        (defmacro evil-snipe-with-normalised-settings (&rest body)
          `(let ((evil-snipe-enable-highlight nil)                           ; don't highlight jump matches after jump
                 (evil-snipe-enable-incremental-highlight nil)               ; don't highlight jump matches while searching
                 (evil-snipe-tab-increment nil)                              ; disable tab to raise snipe count
                 (evil-snipe-show-prompt nil)                                ; don't show prompt, why bother? you can't increment it.
                 (evil-snipe-smart-case nil)                                 ; fJ != fj
                 (evil-snipe-skip-leading-whitespace nil)
                 (evil-snipe-scope (if evil-snipe-find-scopes-to-line+
                                       'line
                                     evil-snipe-scope)))
             ,@body))

        (defun evil-snipe--normalise-single-snipes+ (func &rest args)
          "normalise snipes with count 1 to match `evil-find-char'.
      don't want highlighting, or a prompt or other feature enhancements.
      just simple, jump to char.

      NOTE this function updates settings during the input reading phase
           only; which is taken care of in the interactive section prior
           to method body invocation.
      "
          (if (eq evil-snipe--match-count 1)
              (evil-snipe-with-normalised-settings
                (apply func args))
            (apply func args)))

        (defun evil-snipe--normalise-single-snipes-wrapper+ (func &rest args)
          "specify normalisation for the body of the given function."
          (evil-snipe-with-normalised-settings (apply func args)))

        (advice-add 'evil-snipe--collect-keys :around 'evil-snipe--normalise-single-snipes+)
        (advice-add 'evil-snipe-f :around #'evil-snipe--normalise-single-snipes-wrapper+)
        (advice-add 'evil-snipe-F :around #'evil-snipe--normalise-single-snipes-wrapper+)
        (advice-add 'evil-snipe-t :around #'evil-snipe--normalise-single-snipes-wrapper+)
        (advice-add 'evil-snipe-T :around #'evil-snipe--normalise-single-snipes-wrapper+)

        ;; I don't need it, I've got my own keys bound to do the same thing :)
        (advice-add 'evil-snipe--transient-map :override 'ignore)

        (general-define-key
          :keymaps 'evil-snipe-mode-map
          :states  leader-norm-states
          ;; S is inclusive, X is exclusive.
          "gT" 'evil-snipe-X
          "gt" 'evil-snipe-x
          "gF" 'evil-snipe-S
          "gf" 'evil-snipe-s
          "f"  'evil-snipe-f
          "F"  'evil-snipe-F
          "t"  'evil-snipe-t
          "T"  'evil-snipe-T
          ";"  'evil-snipe-repeat
          "g;" 'evil-snipe-repeat-reverse)

        (general-unbind
          :keymaps 'evil-snipe-mode-map
          :states  '(motion normal)
          "S" "s" "X" "x"))
    #+END_SRC

*** exchange
    cut a region into a kill buffer, and then swap it with another region somewhere else.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package evil-exchange
        :ensure t
        :defer  t
        :init
        (general-define-key
          :states leader-norm-states
          "gx" 'evil-exchange
          "gX" 'evil-exchange-cancel))
    #+END_SRC

*** multiedit
    #+BEGIN_SRC emacs-lisp
      (use-package iedit
        :ensure t
        :defer  t)

      (use-package evil-multiedit
        :ensure t
        :demand t
        :after  evil
        :commands (evil-multiedit
                   evil-multiedit-all)
        :init
        (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)

        (general-define-key
         :states 'multiedit
         "g." 'hydra-evil-multiedit/body
         "g*" 'evil-multiedit-match-all
         "gh" 'evil-multiedit-prev
         "gl" 'evil-multiedit-next
         "gj" 'evil-multiedit-match-and-next
         "gk" 'evil-multiedit-match-and-prev)

        (general-define-key
         :states '(motion multiedit)
         "gi" 'evil-multiedit
         "g*" 'evil-multiedit-all
         "gI" 'evil-multiedit-restore)

        ;; was evil-insert-resume
        (general-unbind :states 'normal "gi")

        ;; (general-define-key
        ;;   :states 'visual
        ;;   "RET" 'evil-multiedit-toggle-or-restrict-region)

        :config
        (defun evil-multiedit--multiedit (beg end)
          (evil-visual-select beg
                              (max 0 (- end 1)))
          (evil-multiedit-match-and-next))

        (evil-define-operator evil-multiedit (beg end)
          :repeat nil
          (if (evil-get-command-property 'evil-multiedit :move-point)
              (save-excursion
                (evil-multiedit--multiedit beg end))
            (evil-multiedit--multiedit beg end)))

        (defun evil-multiedit--multiedit-all (beg end)
          (evil-visual-select beg
                              (max 0 (- end 1)))
          (evil-multiedit-match-all))

        (evil-define-operator evil-multiedit-all (beg end)
          :repeat nil
          (if (evil-get-command-property 'evil-multiedit-all :move-point)
              (save-excursion
                (evil-multiedit--multiedit-all beg end))
            (evil-multiedit--multiedit-all beg end)))

        (general-unbind
         :keymaps 'evil-multiedit-state-map
         ;; "C-g"
         "G" "gg"))
    #+END_SRC

*** traces
    indicators for various ex commands.

    #+BEGIN_SRC emacs-lisp
       (use-package evil-traces
         :ensure t
         :defer  t
         :hook (evil-mode . evil-traces-mode)
         :diminish
         :config
         (evil-traces-use-diff-faces))
    #+END_SRC

*** args
    #+BEGIN_SRC emacs-lisp
      (use-package evil-args
        :ensure t
        :defer  t
        :init
        (general-define-key
         :keymaps '(evil-inner-text-objects-map
                    evil-outer-text-objects-map)
         "a" 'evil-inner-arg)

        (general-define-key
          :states 'motion
          "[u" 'evil-jump-out-args
          "]u" 'evil-jump-out-args

          "[h" 'evil-backward-arg
          "]h" 'evil-backward-arg

          "[l" 'evil-forward-arg
          "]l" 'evil-forward-arg

          "[a" 'evil-backward-arg
          "]a" 'evil-forward-arg)

        (leader/set-keys
          "jh" 'evil-backward-arg
          "jl" 'evil-forward-arg
          "ju" 'evil-jump-out-args)

        (defun evil-args--adjust-for-elisp ()
          (setq evil-args-delimiters '(" ")))

        (add-hook 'emacs-lisp-mode-hook #'evil-args--adjust-for-elisp)
        (add-hook 'lisp-interaction-mode-hook #'evil-args--adjust-for-elisp))
    #+END_SRC

*** easymotion
    Avy inspired evil motions.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-easymotion
        :ensure t
        :defer  t
        :init
        (leader/with-prefix "jm"
          (leader/set-keys
            ""   "motion"
            "w"  'evilem-motion-forward-word-begin
            "W"  'evilem-motion-forward-WORD-begin
            "e"  'evilem-motion-forward-word-end
            "E"  'evilem-motion-forward-WORD-end
            "b"  'evilem-motion-backward-word-begin
            "B"  'evilem-motion-backward-WORD-begin
            ;; "ge" 'evilem-motion-backward-word-end
            ;; "gE" 'evilem-motion-backward-WORD-end
            "j"  'evilem-motion-next-line
            "k"  'evilem-motion-previous-line
            "J"  'evilem-motion-next-visual-line
            "K"  'evilem-motion-previous-visual-line
            "t"  'evilem-motion-find-char-to
            "T"  'evilem-motion-find-char-to-backward
            "f"  'evilem-motion-find-char
            "F"  'evilem-motion-find-char-backward
            "*"  'evilem-motion-search-word-forward
            "#"  'evilem-motion-search-word-backward
            "-"  'evilem-motion-previous-line-first-non-blank
            "+"  'evilem-motion-next-line-first-non-blank)))
    #+END_SRC

*** vimish-fold
    folding like vim

    #+BEGIN_SRC emacs-lisp
      (use-package vimish-fold
        :straight (vimish-fold :type git :host github :repo "mrkkrp/vimish-fold"
                               ;; :fork (:host github :repo "mohkale/vimish-fold")
                               )
        :hook ((text-mode . vimish-fold-mode)
               (prog-mode . vimish-fold-mode)
               (conf-mode . vimish-fold-mode))
        :config
        (setq vimish-fold-allow-nested t)
        (setq vimish-fold-dir (var! "vimish-fold/"))

        (add-hook 'vimish-fold-mode-hook
                  (defun vimish-fold-setup-evil+ ()
                    (if vimish-fold-mode
                        (add-to-list 'evil-fold-list
                                     `((vimish-fold-mode)
                                       :delete     vimish-fold-delete
                                       :open-all   vimish-fold-unfold-all
                                       :close-all  vimish-fold-refold-all
                                       :toggle     vimish-fold-toggle
                                       :open       vimish-fold-unfold
                                       :open-rec   nil
                                       :close      vimish-fold-refold))
                      (setq evil-fold-list (cl-remove-if
                                            (lambda (e) (eq (caar e) 'vimish-fold-mode))
                                            evil-fold-list)))))

        (evil-define-operator vimish-fold-create+ (beg end)
          "Create a fold from the current region.
      See also `evil-delete-fold'."
          (vimish-fold beg end))

        (evil-define-motion vimish-fold-next-fold+ (count)
          "Go to the start of the next fold."
          :type inclusive
          (unless (numberp count)
            (setq count 1))
          (dotimes (_ count nil)
            (vimish-fold-next-fold)))

        (evil-define-motion vimish-fold-prev-fold+ (count)
          "Go to the start of the previous fold."
          :type inclusive
          (unless (numberp count)
            (setq count 1))
          (dotimes (_ count nil)
            (vimish-fold-previous-fold)))

        (general-define-key
          ;; :keymaps 'vimish-fold-mode-map
          :states '(normal motion)
          "zx" 'vimish-fold-toggle
          "zX" 'vimish-fold-toggle-recursively
          "zj" 'vimish-fold-next-fold+
          "zk" 'vimish-fold-prev-fold+
          "zo" 'vimish-fold-unfold
          "zO" 'vimish-fold-unfold-recursively
          "zd" 'vimish-fold-delete
          "zD" 'vimish-fold-delete-all
          "zf" 'vimish-fold-create+)

        ;; (general-define-key
        ;;   :keymaps '(vimish-fold-unfolded-keymap
        ;;              vimish-fold-folded-keymap)
        ;;   "TAB"   'vimish-fold-toggle
        ;;   "<tab>" 'vimish-fold-toggle)
        )
    #+END_SRC

*** evil-mode
    come to the dark side, we have cookies... :)

    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :ensure t
        :demand t
        :init
        (setq-default evil-cross-lines t
                      evil-default-state 'motion
                      evil-want-C-i-jump nil
                      evil-want-C-u-scroll t
                      evil-want-visual-char-semi-exclusive t
                      evil-toggle-key "M-z"
                      evil-search-module 'evil-search)

        ;; see [[https://emacs.stackexchange.com/questions/42060/add-dired-buffers-to-evil-jump-list][here]].
        (setq evil--jumps-buffer-targets
              (rx "*"
                  (or "new"
                      "Help"
                      "scratch"
                      (and "Org src " (zero-or-more any) "[ " (zero-or-more any) " ]"))
                  "*"))

        (defun evil-set-initial-state+ (mode state)
          (with-eval-after-load 'evil
            (evil-set-initial-state mode state)
            (dolist (buffer (buffer-list))
              (with-current-buffer buffer
                (when (eq major-mode mode)
                  (evil-change-state state))))))

        :config
        (evil-mode 1)

        (evil-set-initial-state 'prog-mode 'normal)
        (evil-set-initial-state 'text-mode 'normal)
        (evil-set-initial-state 'conf-mode 'normal)

        (with-suppressed-warnings
          (defvaralias 'evil-ex-search-history 'regexp-search-ring))

        ;; from [[https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/evil/config.el#L137][doom]].
        (advice-add #'evil-global-marker-p :before-until
                    (defun evil--make-numbered-markers-global+ (char)
                      (and (>= char ?2) (<= char ?9))))

        ;; [[https://raw.githubusercontent.com/troyp/evil-adjust/master/evil-adjust.el][evil-adjust]]
        (defmacro with-evil-adjust-to-eol (&rest body)
          `(let ((-last-evil-state evil-state)
                 (evil-echo-state nil))
             (when (member evil-state '(normal visual))
               (evil-append 1)) ; switch to insert state
             (condition-case err
                 (progn ,@body)
               (error
                (evil-change-state -last-evil-state)
                (signal (car err) (cdr err))))
             (evil-change-state -last-evil-state)))
        (put 'with-evil-adjust-to-eol 'lisp-indent-function 'defun)

        ;; force state for buffer if it already exists
        (let ((buffer (get-buffer "*Messages*")))
          (when buffer
            (with-current-buffer buffer
              (evil-motion-state))))

        (general-define-key
         "M-g" 'evil-change-to-initial-state)

        (general-define-key
         :states '(motion insert)
         "C-a" 'beginning-of-line
         "C-e" 'end-of-line)

        (general-define-key
         :states '(insert emacs multiedit)
         "C-o" 'evil-copy-from-above
         "M-o" 'evil-copy-from-below
         "M-e" 'evil-execute-in-normal-state)

        (general-define-key
          "C->" 'evil-shift-right-line
          "C-<" 'evil-shift-left-line)

        (general-define-key
          :states 'normal
          "gU" nil
          "gq" nil
          "K"  'evil-join-backwards
          "gu" 'evil-upcase
          "gd" 'evil-downcase
          "g@" 'what-cursor-position
          "ga" 'evil-fill-and-move
          "g-" 'evil-indent
          "<C-return>" 'xref-find-definitions
          "M-RET" 'xref-find-definitions-other-window)

        (general-define-key
          :states '(normal motion)
          ;; Y = yy is easy   to press
          ;; Y = y$ is harder to press
          "Y" (general-simulate-key "y$"))

        (general-define-key
          :states '(normal insert)
          "C-k"   'evil-join-backwards
          "C-M-k" 'evil-join-backwards)

        (general-unbind
          :states 'insert
          "M-k" "C-d" "C-t")

        (general-define-key
          :states 'insert
          "<tab>"           'indent-relative
          "TAB"             'indent-relative
          "<S-tab>"         'indent-back-to-normal
          "<S-iso-lefttab>" 'indent-back-to-normal
          ;; "<S-backspace>" 'back-to-tab-stop
          "<S-backspace>" 'evil-delete-char
          "C-y"   'yank
          "M-y"   'yank-unindented
          ;; (kbd "C-M-k") 'evil-insert-digraph
          "C-l"   'forward-char
          "C-h"   'backward-char
          "C-n"   'evil-next-line
          "C-p"   'evil-previous-line
          "C-w"   'backward-kill-word)

        (general-define-key
          :states 'visual
          "C-y" 'evil-paste-after)

        (general-define-key
          :states 'motion
          "C-b" 'evil-scroll-line-up
          "C-f" 'evil-scroll-line-down
          "\"" 'evil-use-register
          "zn" 'evil-scroll-column-right
          "zN" 'evil-scroll-right
          "zp" 'evil-scroll-column-left
          "zP" 'evil-scroll-left

          "gN" nil
          "gn" 'evil-next-match
          "gp" 'evil-previous-match
          ;; "gn" 'evil-next-visual-line
          ;; "gp" 'evil-previous-visual-line
          ;; probably always gonna be overidden
          "gj" 'evil-next-visual-line
          "gk" 'evil-previous-visual-line
          "gq" 'quit-window
          "g=" 'count-words
          "g;" 'evil-repeat-find-char-reverse
          "m"  'evil-set-marker
          "-"  'negative-argument
          "q"  'quit-window
          ;; "C-;" 'evil-repeat-find-char
          ;; "M-;" 'evil-repeat-find-char-reverse
          )

        (general-define-key
         :states 'motion
         :override t
         "gr"    'revert-buffer
         "gR"    'read-only-mode
         "gz"    'recenter-top-bottom)

        (general-define-key
         :keymaps 'evil-ex-completion-map
         "C-a" 'move-beginning-of-line
         "C-e" 'move-end-of-line
         "C-M-q" 'quit-window)

        (general-define-key
         :keymaps 'emacs-window-map
         "+" 'evil-window-increase-height
         "-" 'evil-window-decrease-height
         "<" 'evil-window-decrease-width
         ">" 'evil-window-increase-width
         "=" 'balance-windows
         "-" 'evil-window-set-width
         "|" 'evil-window-set-height

         "C-1" 'evil-window-top-left
         "C-0" 'evil-window-bottom-right

         ;; ("u" . evil-window-rotate-upwards)
         ;; ("i" . evil-window-rotate-downwards)
         "C-q" 'evil-window-mru ;; last buffer, new window

         ;; TODO maximise buffer
         "C-M-h" 'evil-window-move-far-left
         "C-M-j" 'evil-window-move-far-down
         "C-M-k" 'evil-window-move-far-up
         "C-M-l" 'evil-window-move-far-right

         ;; NOTE bindings with control variants
         "n"   'evil-window-next
         "C-n" 'evil-window-next
         "p"   'evil-window-prev
         "C-p" 'evil-window-prev
         "s"   'evil-window-split
         "M-s" 'evil-window-split
         "v"   'evil-window-vsplit
         "M-v" 'evil-window-vsplit
         "S"   'split-window-below-and-focus
         "C-s" 'split-window-below-and-focus
         "V"   'split-window-right-and-focus
         "C-v" 'split-window-right-and-focus
         "d"   'evil-window-delete
         "C-d" 'evil-window-delete
         "h"   'evil-window-left
         ;; "C-h" 'evil-window-left
         "j"   'evil-window-down
         ;; "C-j" 'evil-window-down
         "k"   'evil-window-up
         ;; "C-k" 'evil-window-up
         "l"   'evil-window-right
         ;; "C-l" 'evil-window-right
         "c"   'evil-window-create
         "C-c" 'evil-window-create)

        (leader/set-keys
          "je" 'evil-goto-definition
          "id" 'evil-insert-digraph
          "sc" '("search-noh" . evil-ex-nohighlight)
          "xu" 'evil-upcase
          "xd" 'evil-downcase))
    #+END_SRC

*** commands
    Where I keep my own evil operators/commands/*witchcraft*.

    #+BEGIN_SRC emacs-lisp
      (evil-define-operator evil-capitalize (beg end)
        (capitalize-region beg end))

      (defun evil-shift-normal-state (&optional arg)
        "return to normal state while also removing
      any trailing whitespace from the current line"
        (interactive "P")
        (remove-all-trailing-whitespace (line-beginning-position)
                                        (line-end-position))
        (evil-normal-state arg))

      (evil-define-operator evil-narrow-yank (beg end type register yank-handler)
        "`evil-yank' except block yanks are yanked as their own lines.
      evil by default yanks them such that you can compose them onto other lines.
      this isn't always desirable (especially when you want to filter a region onto
      it's own lines, thus this method satifies that requirement.

      eg:
      `evil-yank' cfj then `evil-paste-after'.
        ab|c|   >   abc|c
        de|f|   >   deff
        gh|j|   >   ghjj

      `evil-narrow-yank' cfj then `evil-paste-after'.
        ab|c|   >   abc
        de|f|   >   |c
        gh|i|   >   f
                >   j
                >   def
                >   ghj
      "
        (interactive "<R><x><y>")
        (evil-visual-restore)
        (if (eq type 'block)
            (progn
              (evil-yank-rectangle beg end ?\" yank-handler)

              (with-temp-buffer
                (evil-paste-before nil ?\")
                (evil-yank (point-min) (point-max) 'line register yank-handler)))
          (evil-yank beg end type register yank-handler)))

      (evil-define-operator evil-toggle-comment (beg end)
        :type        line
        :repeat      t
        :move-point  nil
        :keep-visual nil
        "run `toggle-comment-at-point' using evil motion."
        (toggle-comment-at-point beg end))

      (defun evil-adjust-eval-print-last-sexp ()
        (interactive)
        (save-excursion
          (with-evil-adjust-to-eol
            (funcall-interactively 'eval-print-last-sexp)
            (message nil))))

      (defun evil-adjust-eval-replace-last-sexp ()
        (interactive)
        (with-evil-adjust-to-eol
          (funcall-interactively 'eval-replace-last-sexp)
          (message nil)))

      (evil-define-operator evil-reverse (beg end)
        :type line
        :repeat t
        "evil command to reverse lines over range."
        (reverse-region beg end))

      (evil-define-operator evil-ansi-render (beg end)
        :repeat t
        "render ansi-color escape sequences between BEG and END."
        ;; source [[https://stackoverflow.com/questions/23378271/how-do-i-display-ansi-color-codes-in-emacs-for-any-mode][here]].
        (require 'ansi-color)
        (let ((inhibit-read-only (or inhibit-read-only
                                     (y-or-n-p "buffer is read only, ignore: "))))
          (barf-if-buffer-read-only)
          (ansi-color-apply-on-region beg end)))

      ;; ;; Enable terminal copy to cliboard
      ;; (evil-define-operator evil-copy-to-clipboard (beg end)
      ;;   "Copies selection to x-clipboard."
      ;;   :repeat      t
      ;;   :move-point  nil
      ;;   :keep-visual nil
      ;;   (interactive)
      ;;   (if (display-graphic-p)
      ;;       (clipboard-kill-ring-save beg end)
      ;;     (shell-command-on-region beg end "xclip -i -selection clipboard")))

      ;; (defun paste-from-clipboard ()
      ;;   "Pastes from x-clipboard."
      ;;   (interactive)
      ;;   (if (display-graphic-p)
      ;;       (clipboard-yank)
      ;;     (insert (shell-command-to-string "xclipl -o -selection clipboard"))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (general-define-key
       :states 'normal
       "gC" 'evil-capitalize
       "gc" 'evil-toggle-comment)

      (general-define-key
       :states '(insert replace)
       "<S-escape>" 'evil-shift-normal-state)

      (general-define-key
       :states 'visual
       "gy" 'evil-narrow-yank)

      (general-define-key
       :states 'motion
       "g3" 'evil-ansi-render)

      (general-define-key
       :states '(normal visual insert)
       [remap eval-print-last-sexp]   'evil-adjust-eval-print-last-sexp
       [remap eval-replace-last-sexp] 'evil-adjust-eval-replace-last-sexp)

      (evil-ex-define-cmd "rev[erse]" 'evil-reverse)

      (leader/set-keys
        "xc" 'evil-capitalize)
    #+END_SRC

*** ex-bindings
    #+BEGIN_SRC emacs-lisp
      (evil-ex-define-cmd "W[RITE]" 'evil-write)

      (evil-ex-define-cmd "Wa[ll]"  'evil-write-all)
      (evil-ex-define-cmd "WA[LL]"  'evil-write-all)

      (evil-ex-define-cmd "wk[ill]" 'write-kill-buffer)
      (evil-ex-define-cmd "Wk[ill]" 'write-kill-buffer)
      (evil-ex-define-cmd "WK[ILL]" 'write-kill-buffer)

      (evil-ex-define-cmd "wb[ackup]" 'write-backup)
      (evil-ex-define-cmd "Wb[ackup]" 'write-backup)
      (evil-ex-define-cmd "WB[ACKUP]" 'write-backup)

      (evil-ex-define-cmd "a[s]ave" 'write-autosave)
      (evil-ex-define-cmd "A[s]ave" 'write-autosave)
      (evil-ex-define-cmd "A[S]AVE" 'write-autosave)

      (evil-ex-define-cmd "buffers" 'ibuffer)
    #+END_SRC

** org
*** org-agenda
    #+BEGIN_SRC emacs-lisp
      (use-package org-agenda
        :straight (org-agenda :type built-in)
        :defer t
        :config
        (evil-set-initial-state 'org-agenda-mode 'motion)

        (leader/set-keys-for-major-mode 'org-agenda-mode
          "." 'hydra-org-agenda/body
          "A" 'org-agenda-append-agenda
          "C" 'org-agenda-columns

          ;;; filter/search
          "/"  "filter/search"
          "/c" 'org-agenda-filter-by-category
          "/e" 'org-agenda-filter-by-effort
          "//" 'org-agenda-filter-by-regexp
          ;; "/t" 'org-agenda-filter-by-tag
          "/:" 'org-agenda-filter-by-tag
          "/h" 'org-agenda-filter-by-top-headline
          "/R" 'org-agenda-filter-remove-all

          "/?" 'org-agenda-bulk-mark-regexp
          "/a" 'org-agenda-bulk-mark-all
          "/u" 'org-agenda-bulk-unmark-all

          ;;; clock/calendar/diary
          "c"  "clock/calendar"
          "cp" 'org-agenda-date-prompt
          "cc" 'org-agenda-clock-in
          "co" 'org-agenda-clock-out
          "cC" 'org-agenda-clock-out ; alias
          "ct" 'org-timer-set-timer
          "c M-c" 'org-agenda-convert-date

          ;;; agenda minor modes
          "m"  "modes"
          "ma" 'org-agenda-archives-mode
          "md" 'org-agenda-day-view
          "mc" 'org-agenda-clockreport-mode
          "mt" 'org-agenda-entry-text-mode
          "mf" 'org-agenda-follow-mode
          "ml" 'org-agenda-log-mode
          "mw" 'org-agenda-week-view
          "my" 'org-agenda-year-view
          "mm" 'org-agenda-month-view

          ;;; priorities
          "p"  "priority"
          "pp" 'org-agenda-priority
          "pu" 'org-agenda-priority-up
          "pd" 'org-agenda-priority-down)

        (general-define-key
          :keymaps 'org-agenda-mode-map
          :states  'motion
          ;;; globally useful
          [remap quit-window] 'org-agenda-exit
          "." 'org-agenda-goto-today
          "v" 'org-agenda-view-mode-dispatch
          "RET" 'org-agenda-goto
          "TAB" 'org-agenda-switch-to
          "M-c" 'org-agenda-clock-goto ; jumped to clocking task
          "C-t" 'org-agenda-todo
          "M-t" 'org-agenda-show-tags

          ;;; marking
          "C-<SPC>" 'org-agenda-bulk-mark
          "M-<SPC>" 'org-agenda-bulk-unmark
          "C-M-SPC" 'org-agenda-bulk-action

          ;;; undo/redo
          "C-r" 'org-agenda-redo
          "u"   'org-agenda-undo
          "gr"        'org-agenda-redo-all

          ;;; toggle displays
          "gm" 'org-agenda-phases-of-moon
          "C-l" 'org-agenda-log-mode
          "M-l" 'org-agenda-toggle-time-grid
          "M-h" 'org-agenda-holidays
          "M-s" 'org-agenda-sunrise-sunset

          ;; edit org items
          "M-e" 'org-agenda-set-effort
          "C-a" 'org-agenda-archive-default-with-confirmation

          ;;; notes and insertion
          "a"  'org-agenda-add-note
          "c"  'org-agenda-capture
          "gd" 'org-agenda-goto-date
          "gc" 'org-agenda-goto-calendar

          ;;; movement between lines
          ;;; NOTE org-next/prev-line is used by follow-mode
          "k"      'org-agenda-previous-line
          "j"      'org-agenda-next-line
          "<up>"   'org-agenda-previous-line ; alias
          "<down>" 'org-agenda-next-line     ; alias
          "C-j"    'org-agenda-next-item
          "C-k"    'org-agenda-previous-item

          ;;; move through time in blocks
          "f" 'org-agenda-later
          "F" 'org-agenda-earlier

          "C-f" 'org-agenda-follow-mode
          "M-f" 'org-agenda-recenterstates))
    #+END_SRC

*** org-bullets
    Better heading indicators in org buffers.

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :defer  t
        :hook (org-mode . org-bullets-mode))
    #+END_SRC

*** org-link-edit
    TODO figure out what this does?

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package org-link-edit
        :defer t
        :commands (org-link-edit-forward-slurp
                   org-link-edit-forward-barf
                   org-link-edit-backward-slurp
                   org-link-edit-backward-barf))
    #+END_SRC

*** org-eldoc
    #+BEGIN_SRC emacs-lisp
      (use-package org-eldoc
        :demand t
        :after org
        :init
        (defun org-eldoc-get-link+ ()
          "When point is on a link, show the link destination in eldoc."
          (let ((ctx (org-element-lineage (org-element-context) '(link) t)))
            (org-element-property :path ctx)))

        (advice-add 'org-eldoc-documentation-function :before-until #'org-eldoc-get-link+))
    #+END_SRC

*** org-toc
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package toc-org
        :ensure t
        :defer  t
        ;; :hook (org-mode . toc-org-mode)
        )
    #+END_SRC

*** org-capture
    #+BEGIN_SRC emacs-lisp
      (use-package org-capture
        :defer t
        :commands doct
        :config
        (use-package doct
          :straight (doct :host github :repo "progfolio/doct" :branch "master")
          :init
          (setq doct-default-entry-type 'entry))

        (require '+org-capture)

        (leader/with-major-mode-prefix
          (leader/set-keys-for-mode 'org-capture-mode
            "," 'org-capture-finalize
            "q" 'org-capture-kill
            "r" 'org-capture-refile))

        (general-define-key
         :keymaps 'org-capture-mode-map
          [remap evil-save-and-close] 'org-capture-finalize
          [remap evil-quit] 'org-capture-kill)

        ;; for some reason, the header for org-capture specifically uses
        ;; the org-capture-mode-map, meaning my leader key shortcuts won't
        ;; show up in it :(. Fix that here.
        ;; (general-define-key
        ;;  :keymaps 'org-capture-mode-map
        ;;  :prefix leader-major-mode-key
        ;;  :states 'normal
        ;;  "," 'org-capture-finalize
        ;;  "q" 'org-capture-kill
        ;;  "r" 'org-capture-refile)
        )
    #+END_SRC

**** templates
     #+BEGIN_SRC emacs-lisp :tangle lisp/+org-capture.el
       ;; -*- lisp-indent-function: 'common-lisp-indent-function -*-
       (require 'doct)

       (defun org-capture-create-goto-heading-command (heading &optional heading-regexp)
         "create a function to jump to HEADING, creating HEADING if it doesn't exist.
       This function also smartly reacts to headings containing [/]. By default, if
       [/] has been updated to [0/1], then org is just unable to find it.
       "
         (unless heading-regexp
           (setq heading-regexp (regexp-quote heading))

           (when (string-match-p (rx "[/]") heading-regexp)
             (setq heading-regexp
                   (replace-regexp-in-string
                    (regexp-quote "[/]")
                    "[[[:digit:]]*/[[:digit:]]*\\\\]"
                    heading-regexp))))

         (lambda ()
           (let ((heading-point
                  (ignore-errors
                    (save-excursion
                      (goto-char (point-min))
                      (search-forward-regexp heading-regexp)
                      (line-beginning-position)))))
             (if heading-point
                 (goto-char heading-point)
               (goto-char (point-min))
               (save-excursion
                 (insert heading "\n"))))))

       (defun org-get-link+ ()
         "get the stringified result of `org-store-link'"
         (with-temp-buffer
           (org-insert-link-global)
           (buffer-substring (point-min) (point-max))))

       ;; see also: https://www.gnu.org/software/emacs/manual/html_node/org/Template-expansion.html#Template-expansion
       (setq
        org-capture-templates
        (doct `((:group "TODOs"
                        :type entry
                        :file ,org-default-notes-file
                        :prepend     t
                        :empty-lines 0
                        :function ,(org-capture-create-goto-heading-command "* TODOs [/]")
                        :before-finalize ,#'org-update-parent-todo-statistics
                        :template ("* %{todo-state} %?"
                                   "  %U")
                        :todo-state "TODO"
                        :children (("Todo" :keys "t")
                                   ("Todo with Clipboard"
                                    :keys "T"
                                    :template ("* %{todo-state} %?"
                                               "  %U"
                                               "  %c"))
                                   ("Itinerary"
                                    :keys "d"
                                    :prepend  nil
                                    :function ,(org-capture-create-goto-heading-command "* Itinerary")
                                    :template ("* %{todo-state} %?"))
                                   ("Internship"
                                    :keys "i"
                                    :function ,(org-capture-create-goto-heading-command "* Job Search [/]")
                                    :template ("* %{todo-state} [#%^{Priority|A|B|C}] %(org-get-link+) - %^{Company}"
                                               "  DEADLINE: %^{deadline}t"
                                               "%^{LOCATION}p%^{DURATION}p"
                                               "  %?"))))
                (:group "education"
                        :type entry
                        :file "university/university.org"
                        :empty-lines 1
                        :children (("Lecture"
                                    :keys "l"
                                    :clock-in t
                                    :template ("* [/] %^{title} %^g"
                                               "  %?"))))))

        ;; templates for projectile-projects.
        counsel-projectile-org-capture-templates
        (doct `(("[${name}] Task"
                 :keys "p"
                 :template ("* TODO %?"
                            "  %U")
                 :file ,(join-path org-projectile-projects-directory "${name}.org")))))

       (provide '+org-capture)
     #+END_SRC

*** commands
    #+BEGIN_SRC emacs-lisp
      (use-package +org-commands
        :commands (org-outline-smart-up-level
                   org-openable-p
                   org-find-file
                   org-clever-return)
        :init
        (leader/set-keys "oo" 'org-find-file)

        (general-define-key
         :keymaps 'org-mode-map
         :states 'insert
         "RET"      'org-clever-return
         "<return>" 'org-clever-return))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+org-commands.el
      (defun org-outline-smart-up-level ()
        "when at a heading, move to parent
      otherwise move to current heading."
        (interactive)
        (call-interactively (if (org-at-heading-p)
                                'outline-up-heading
                              'outline-previous-heading)))

      (defun org-openable-p ()
        (org-element-lineage
         (org-element-context)
         '(footnote-definition
           footnote-reference
           headline
           ;; inlinetask
           link
           timestamp)
         t))

      (defvar org-clever-return--insert-headings nil
        "when true, returning from the end of a heading
      inserts a heading.")

      (defun org-clever-return (&optional above)
        "depending on the local state, inserts a heading, a table row an item or newline.
      this function is functionally similair to the result of evil-org-eol-call-anon, but
      instead of checking the line after moving to the end of it (which doesn't work for
      folded lines, such as headings), it checks before moving and then inserts the right
      items depending on how things looked where you were."
        (interactive)
        (cl-letf (((symbol-function 'evil-open)
                   (lambda () (call-interactively
                          (if above
                              'evil-open-above
                            'evil-open-below))))
                  ((symbol-function 'fallback-action)
                   (lambda (&optional interactive)
                     (when (and (line-empty-p)
                                (not (zerop (column-number (point)))))
                       ;; don't leave a trailing indent on current line unecessarily
                       (remove-all-trailing-whitespace (line-beginning-position)
                                                       (line-end-position)))
                     (if (and interactive (not above))
                         (funcall-interactively
                          'newline-and-indent)
                       (evil-open)
                       ))))
          (if (and current-prefix-arg (listp current-prefix-arg))
              ;; when called with simple prefix, goto
              ;; fallaback action.
              (let ((current-prefix-arg nil))
                (fallback-action))
            (cond ((org-table-p)
                   (org-table-insert-row (not above))
                   (evil-insert nil))

                  ((and org-clever-return--insert-headings
                        (org-at-heading-p))
                   (evil-open)
                   (org-insert-heading))

                  ((org-at-item-p)
                   ;; position of cursor dictates where new point goes
                   (if above
                       (goto-char (line-beginning-position))
                     (goto-char (line-end-position)))
                   (org-insert-item)
                   (evil-append nil))

                  (t (fallback-action (called-interactively-p)))))))

      ;;; org-find-file
      (defvar org-find-file-last-file nil
        "the last file found through `org-find-file'.")

      (defun org-find-file--generate-candidate (file)
        (let ((relative (file-relative-name file dotemacs-org-path)))
          (if (string-prefix-p ".." relative)
              (cons file file)
            (cons relative file))))

      (defun org-find-file (&optional arg initial-input)
        "find an org file.
      By default this function simply finds the default notes file, as indicated
      by `org-default-notes-file'. When ARG is non-nil, you are instead prompted
      interactively with all org files known to emacs (through `dotemacs-org-path',
      `dotemacs-agenda-files' etc.) and then allowed to select which one to visit.
      "
        (interactive "P")
        (if (not arg)
            (progn
              (find-file org-default-notes-file)
              (setq org-find-file-last-file
                    (org-find-file--generate-candidate org-default-notes-file)))
          (ivy-read "Find file: "
                    (cl-loop
                     for file in (cl-remove-duplicates
                                  (append (file-expand-wildcards (org! "*.org"))
                                          (file-expand-wildcards (org! "**/*.org"))
                                          org-agenda-files)
                                  :test (lambda (x y) (or (null y) (equal x y)))
                                  :from-end t)
                     unless (string-match-p counsel-find-file-ignore-regexp file)
                     collect (org-find-file--generate-candidate file))
                    :initial-input initial-input
                    :require-match t
                    :preselect (or org-find-file-last-file
                                   (car (org-find-file--generate-candidate
                                         org-default-notes-file)))
                    :action #'org-find-file-action
                    :caller 'org-find-file)))

      ;; actions for org find file
      (defun org-find-file-action (file)
        (find-file file))

      (defun org-find-file-other-window (file)
        (find-file-other-window file))

      (defun org-find-file-other-frame (file)
        (find-file-other-frame file))

      ;; convert cons back to file path
      (defun org-find-file--filter-args (file)
        (setq file (car file))
        (setq org-find-file-last-file (car file)
              file (org! (cdr file)))
        (list file))

      (dolist (func '(org-find-file-action
                      org-find-file-other-window
                      org-find-file-other-frame))
        (advice-add func :filter-args #'org-find-file--filter-args))

      (ivy-set-actions
       'org-find-file
       '(("j" org-find-file-other-window "other window")
         ("f" org-find-file-other-frame  "other frame")))
    #+END_SRC

*** org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :defer t
        :hook (org-mode . display-line-numbers-mode)
        :init
        ;;; leader keys outside of org mode
        (leader/set-keys
          "o"  "org"
          "oc" 'org-capture
          "og" 'org-capture-goto-last-stored
          "oa" 'org-agenda
          "ol" 'org-store-link
          "oi" 'org-insert-link-global
          "oy" 'org-copy-subtree
          "oY" 'org-cut-subtree
          "on" 'org-next-link
          "op" 'org-previous-link)

        (add-hook 'org-mode-hook
                  (lambda (&rest _)
                    (modify-syntax-entry ?< "_" org-mode-syntax-table)
                    (modify-syntax-entry ?> "_" org-mode-syntax-table)))

        (advice-add 'evil-ret-gen :before-until
                    (defun evil-ret-open-org-links+ (&rest _)
                      "hitting return in evil-normal-state on an org-link
      opens the org-link."
                      (when (and
                             (evil-normal-state-p)
                             (or (featurep 'org)
                                 (bound-and-true-p org-link-minor-mode))
                             (ignore-errors
                               (org-openable-p)))
                        (org-open-at-point)
                        t)))

        :config
        (setq-default org-src-window-setup 'current-window
                      org-todo-keywords '((sequence "TODO" "DOING" "VERIFY" "|" "DONE" "DELAGATED" "SKIPPED"))
                      org-refile-targets '((nil :maxlevel . 9)
                                           (org-agenda-files :maxlevel . 9))
                      org-log-done 'time ; record when a TODO item is done.
                      org-outline-path-complete-in-steps nil ; refile in a single go
                      org-refile-use-outline-path t  ; show full paths for refiling
                      org-cycle-separator-lines 0 ; prevents weird coloring of collapsed trees
                      org-log-into-drawer "LOGBOOK" ; where org-add-note stores notes

                      ;; break org-cycle-seperator-lines from working automatically
                      ;; org-blank-before-new-entry '((heading . nil) (plain-list-item . auto))

                      ;; native tabs are slow and unreliable... :sad:
                      org-src-tab-acts-natively nil
                      org-fontify-done-headline nil

                      org-agenda-files (append
                                        (file-expand-wildcards (org! "*.org"))
                                        (file-expand-wildcards (org! "university/*.org")))

                      org-archive-location (concat (org! "archive.org") "::* %s"))

        (setq org-archive-file-header-format
              "# -*- mode: org; coding: utf-8-unix -*-
      ,#+TITLE: Archive
      ,#+STARTUP: content")

        ;; Initialised here to prevent org from defining a bunch of keys I won't
        ;; end up using :P
        (setq org-read-date-minibuffer-local-map (make-sparse-keymap))
        (set-keymap-parent org-read-date-minibuffer-local-map minibuffer-local-map)

        ;; switch to insert state when capturing org templates
        (add-hook 'org-capture-mode-hook (lambda () (evil-insert nil)) t)

        (advice-add 'org-edit-src-code :after
                    (lambda (&rest args)
                      "prevents org mode from restoring the window config before
      source code edit. when you run `org-edit-src-code' the window configuration
      from before the edit is saved, and when you exit the session it's restored.
      Any windows/buffers you open while in an edit get erased. This prevents that
      happening."
                      (setq org-src--saved-temp-window-config nil)))

        (let ((lob-file (etc! "babel-lib.org")))
          (when (file-exists-p lob-file)
            (org-babel-lob-ingest lob-file)))

        (advice-add 'org-edit-src-code :before (lambda (&rest args)
                                                 (unless (eq evil-state 'normal)
                                                   (evil-normal-state))))

        ;;  _
        ;; | | __ _ _ __   __ _ _   _  __ _  __ _  ___  ___
        ;; | |/ _` | '_ \ / _` | | | |/ _` |/ _` |/ _ \/ __|
        ;; | | (_| | | | | (_| | |_| | (_| | (_| |  __/\__ \
        ;; |_|\__,_|_| |_|\__, |\__,_|\__,_|\__, |\___||___/
        ;;                |___/             |___/

        (org-babel-do-load-languages 'org-babel-load-languages
         '((emacs-lisp . t)
           (awk        . t)
           (C          . t)
           (awk        . t)
           (haskell    . t)
           (latex      . t)
           (java       . t)
           (js         . t)
           (ditaa      . t)
           (plantuml   . t)
           (python     . t)
           (ruby       . t)
           (sed        . t)
           (shell      . t)
           (R          . t)))

        ;;             _ _       _     _           _ _
        ;;   _____   _(_) |     | |__ (_)_ __   __| (_)_ __   __ _ ___
        ;;  / _ \ \ / / | |_____| '_ \| | '_ \ / _` | | '_ \ / _` / __|
        ;; |  __/\ V /| | |_____| |_) | | | | | (_| | | | | | (_| \__ \
        ;;  \___| \_/ |_|_|     |_.__/|_|_| |_|\__,_|_|_| |_|\__, |___/
        ;;                                                   |___/

        (defmacro evil-org-eol-call-anon (&rest body)
          "define an anonymous function running body at the end of the line"
          `(lambda! (end-of-visual-line) ,@body (evil-append nil)))

        (general-define-key
          :keymaps 'org-mode-map
          :states 'insert
          "DEL" 'org-delete-backward-char
          "<S-backspace>" 'org-delete-char)

        (general-define-key
          :keymaps 'org-mode-map
          :states 'normal
          "o" (lambda!
                (let ((org-clever-return--insert-headings t))
                  (org-clever-return nil)))
          "O" (lambda!
                (let ((org-clever-return--insert-headings t))
                  (org-clever-return t)))
          ;; "M-u" 'org-metaleft
          ;; "M-i" 'org-metadown
          ;; "M-o" 'org-metaup
          ;; "M-p" 'org-metaright
          ;; "M-U" 'org-shiftmetaleft
          ;; "M-I" 'org-shiftmetadown
          ;; "M-O" 'org-shiftmetaup
          ;; "M-P" 'org-shiftmetaright
          )

        (general-define-key
          :keymaps 'org-mode-map
          :states '(normal insert)
          ;; NOTE meta keys insert headings with changed priority, shift keys insert todo headings
          ;; FIXME prefix arg doesn't work
          "C-<return>"   (evil-org-eol-call-anon
                          (org-insert-heading nil))

          "C-M-<return>" (evil-org-eol-call-anon
                          (org-insert-heading nil)
                          (if current-prefix-arg
                              (org-metaleft)
                            (org-metaright)))

          "C-S-<return>"   (evil-org-eol-call-anon
                            (org-insert-todo-heading nil))

          "C-S-M-<return>" (evil-org-eol-call-anon
                            (org-insert-todo-heading nil)
                            (if current-prefix-arg
                                (org-metaleft)
                              (org-metaright)))

          "C-." 'org-toggle-heading)

        (general-unbind
          :keymaps 'org-mode-map
          ;; "C-M-<return>" 'org-meta-return
          "<C-tab>" "M-S-<return>" "C-e" "M-e" "M-h" "C-j")

        (evil-set-command-property 'org-outline-smart-up-level :jump t)
        (evil-set-command-property 'org-forward-heading-same-level :jump t)
        (evil-set-command-property 'org-backward-heading-same-level :jump t)
        (evil-set-command-property 'org-next-visible-heading :jump t)

        (general-define-key
          ;; most bindings stolen from: https://github.com/edwtjo/evil-org-mode
          :keymaps 'org-mode-map
          :states '(normal visual)
          "gh" 'org-outline-smart-up-level
          "gj" 'org-forward-heading-same-level
          "gk" 'org-backward-heading-same-level
          "gl" 'outline-next-visible-heading
          "g." 'hydra-org-navigate/body
          "$" 'org-end-of-line
          "^" 'org-beginning-of-line)

        (general-define-key
          :keymaps 'org-mode-map
          :states  'visual
          "gb" 'org-babel-mark-block
          "gB" 'org-mark-element)

        (general-define-key
          :keymaps 'org-mode-map
          :states '(normal visual)
          :predicate '(or (org-table-p t)
                          (org-at-heading-p)
                          (org-at-item-p))
          [remap drag-stuff-down] 'org-metadown
          [remap drag-stuff-up]   'org-metaup)

        ;; navigate throught tables or lists with tab in insert state.
        (general-define-key
          :keymaps 'org-mode-map
          :states 'insert
          :predicate '(or (org-table-p t)
                          (org-at-heading-p)
                          (org-at-item-p))
          "<tab>"   'org-cycle
          "TAB"     'org-cycle
          "<S-tab>" 'org-shifttab)

        (general-define-key
          :keymaps 'org-mode-map
          :states '(normal visual emacs)
          "<tab>"   'org-cycle
          "TAB"     'org-cycle
          "<S-tab>" 'org-shifttab)

        (general-define-key
          :keymaps 'org-mode-map
          :states '(normal insert visual)
          :predicate '(org-at-heading-p)
          [remap evil-shift-right] 'org-demote-subtree
          [remap evil-shift-left]  'org-promote-subtree
          [remap evil-shift-right-line] 'org-demote-subtree
          [remap evil-shift-left-line]  'org-promote-subtree)

        (defmacro org-read-date-command (name &rest body)
          "define a function for use in the calendar buffer for `calendar-read-date'."
          `(defun ,(intern (concat "org-read-date-" (symbol-name name) "+")) ()
             ,(when (stringp (car body))
                (concat (pop body) "\nThis function was generated by `org-read-date-command'."))
             (interactive)
             (org-eval-in-calendar (quote (progn ,@body)))))
        (put 'org-read-date-command 'lisp-indent-function 'defun)

        (general-define-key
          :keymaps 'org-read-date-minibuffer-local-map
          ;; haven't implemented backward year, or forward year... cause when will
          ;; I ever need those.
          "C-M-j" 'exit-minibuffer
          "C-j" (org-read-date-command forward-week   (calendar-forward-week 1))
          "C-k" (org-read-date-command backward-week  (calendar-backward-week 1))
          "C-h" (org-read-date-command backward-day   (calendar-backward-day 1))
          "C-l" (org-read-date-command forward-day    (calendar-forward-day 1))
          "C-n" (org-read-date-command forward-month  (calendar-forward-month 1))
          "C-p" (org-read-date-command backward-month (calendar-backward-month 1))
          "<"   (org-read-date-command scroll-left    (calendar-scroll-left 1))
          ">"   (org-read-date-command scroll-right   (calendar-scroll-right 1))
          "!"   (org-read-date-command view-diary     (diary-view-entries))
          "."   (org-read-date-command goto-today
                  "when at end of prompt, goto today in calendar."
                  (if (looking-back "^[^:]+: "
                                    (let ((inhibit-field-text-motion t))
                                      (line-beginning-position)))
                      (org-eval-in-calendar '(calendar-goto-today))
                    (insert "."))))

        ;;  _                _                _
        ;; | | ___  __ _  __| | ___ _ __     | | _____ _   _ ___
        ;; | |/ _ \/ _` |/ _` |/ _ \ '__|____| |/ / _ \ | | / __|
        ;; | |  __/ (_| | (_| |  __/ | |_____|   <  __/ |_| \__ \
        ;; |_|\___|\__,_|\__,_|\___|_|       |_|\_\___|\__, |___/
        ;;                                             |___/

        (leader/set-keys-for-major-mode 'org-mode
          "RET" 'org-ctrl-c-ret
          "TAB" 'org-todo
          "SPC" 'org-display-outline-path
          "!" 'org-time-stamp-inactive
          "'" 'org-edit-special
          "*" 'org-ctrl-c-star
          "," 'org-ctrl-c-ctrl-c
          "-" 'org-ctrl-c-minus
          "." 'org-time-stamp
          "/" 'org-sparse-tree
          ":" 'org-set-tags-command
          "#" 'org-priority
          "`" 'org-toggle-latex-fragment
          "^" 'org-sort
          "A" 'org-agenda
          "a" 'org-archive-subtree
          "b" 'org-tree-to-indirect-buffer
          ;; "C" 'evil-org-recompute-clocks
          "D" 'org-insert-drawer
          "d" 'org-deadline
          "f" 'org-set-effort
          "i" 'org-clock-in
          "H" 'org-shiftleft
          "J" 'org-shiftdown
          "K" 'org-shiftup
          "L" 'org-shiftright
          "l" 'org-insert-link
          "N" 'org-add-note
          "o" 'org-clock-out
          "O" 'org-sort
          "p" 'org-set-property
          "P" 'org-pomodoro
          "q" 'org-set-tags-command
          "r" 'org-refile
          "R" 'org-refile-goto-last-stored
          "s" 'org-schedule
          "T" 'org-show-todo-tree
          "U" 'org-update-all-dblocks
          "u" 'org-dblock-update
          ;; "C-h" 'org-shiftcontrolleft
          ;; "C-j" 'org-shiftcontroldown
          ;; "C-k" 'org-shiftcontrolup
          ;; "C-l" 'org-shiftcontrolright
          "M-a" 'org-attach
          "M-c" 'org-columns
          "M-p" 'org-delete-property

          "c"  "clock/calendar"
          "c<" 'org-date-from-calendar
          "c>" 'org-goto-calendar
          "cC" 'org-clock-out
          "cc" 'org-clock-in
          ;; "cf" 'org-clock-modify-effort-estimate
          "cg" 'org-clock-goto
          "ch" 'org-clock-remove-overlays
          "ci" 'org-timer-item
          "cr" 'org-clock-report
          "cs" 'org-clock-display
          "c." 'hydra-org-clock/body
          "c C-c" 'org-clock-cancel

          "e"  "export"
          "ee" 'org-export-dispatch
          "eh" 'org-html-export-to-html

          "h"  "headings"
          "hI" 'org-insert-heading
          "hi" 'org-insert-heading-after-current
          "hs" 'org-insert-subheading

          "I"  "insert"
          "Ia" 'org-attach
          "If" 'org-footnote-new
          ;; "Ik" 'insert-keybinding-org
          "It" 'org-table-create
          ;; "Is" 'org-download-screenshot
          ;; "Iy" 'org-download-yank

          "m"  "mark/move"
          "ms" 'org-mark-subtree
          "me" 'org-mark-element
          "mb" 'org-babel-mark-block
          "mm." 'hydra-org-navigate/body

          "n"  "narrow"
          "nb" 'org-narrow-to-block
          "ns" 'org-narrow-to-subtree
          "ne" 'org-narrow-to-element
          "nw" 'widen

          "S"  "subtrees"
          "Sh" 'org-promote-subtree
          "Sj" 'org-move-subtree-down
          "Sk" 'org-move-subtree-up
          "Sl" 'org-demote-subtree

          "t" "tables"
          "t'"  'org-table-edit-field
          "ta"  'org-table-align
          "tb"  'org-table-blank-field
          "tc"  'org-table-convert
          "tE"  'org-table-export
          "te"  'org-table-eval-formula
          "tH"  'org-table-move-column-left
          "th"  'org-table-previous-field
          "tI"  'org-table-import
          "tJ"  'org-table-move-row-down
          "tj"  'org-table-next-row
          "tK"  'org-table-move-row-up
          "tL"  'org-table-move-column-right
          "tl"  'org-table-next-field
          "tN"  'org-table-create-with-table.el
          "tn"  'org-table-create
          "tp"  'org-plot/gnuplot
          "tr"  'org-table-recalculate
          "ts"  'org-table-sort-lines
          "tw"  'org-table-wrap-region

          "td"  "delete"
          "tdc" 'org-table-delete-column
          "tdr" 'org-table-delete-row

          "ti"  "insert"
          "tic" 'org-table-insert-column
          "ti-" 'org-table-hline-and-move
          "tih" 'org-table-insert-hline
          "tir" 'org-table-insert-row

          "tt"  "toggle"
          "ttf" 'org-table-toggle-formula-debugger
          "tto" 'org-table-toggle-coordinate-overlays

          ;; "x"  "text"
          ;; "xb" 'org-bold
          ;; "xc" 'org-code
          ;; "xi" 'org-italic
          ;; "xr" 'org-clear
          ;; "xs" 'org-strike-through
          ;; "xu" 'org-underline
          ;; "xv" 'org-verbose
          ))
    #+END_SRC

*** org-export
    #+BEGIN_SRC emacs-lisp
      (use-package +org-export-config :demand t :after org)
      (setq org-export-async-init-file (lisp! "+org-async-init.el"))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+org-export-config.el
      (add-to-list 'org-latex-packages-alist '("" "mathdots"))
      (add-to-list 'org-latex-packages-alist '("" "fourier"))
      (add-to-list 'org-latex-packages-alist '("" "yfonts"))

      (setq-default
       org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")
       org-babel-python-command "python3"
       org-ditaa-jar-path (var! "org/bin/ditaa.jar")
       org-ditaa-eps-jar-path (var! "org/bin/ditaaEps.jar")
       org-plantuml-jar-path (var! "org/bin/plantuml.jar"))

      (provide '+org-export-config)
    #+END_SRC

**** async-init
     :PROPERTIES:
     :header-args+: :tangle lisp/+org-async-init.el
     :END:

     init.el file for asynchronous compilation.

     #+BEGIN_SRC emacs-lisp
       (require 'ox)

       (load (concat user-emacs-directory "lisp/+init-paths"))

       (package-initialize)
       (require 'org-ref)

       (load (bin! "lisp/misc/+org-export-config.el"))
     #+END_SRC

*** org-src
    #+BEGIN_SRC emacs-lisp
      (use-package org-src
        :defer t
        :config
        (general-define-key
          :keymaps 'org-src-mode-map
          [remap evil-write] 'org-edit-src-save
          [remap evil-quit] 'org-edit-src-abort
          ;; save and then quit
          [remap evil-save-and-close] 'org-edit-src-exit
          [remap evil-save-modified-and-close] 'org-edit-src-exit)

        (leader/with-major-mode-prefix
          (leader/set-keys-for-mode 'org-src-mode
            "," 'org-edit-src-exit
            "q" 'org-edit-src-abort
            "s" 'org-edit-src-save)))
    #+END_SRC

*** org-compile
    Toggle the ability to automatically compile the current org file to a pdf
    on write. This would've required a lot less effort in vim :cry:.

    TODO write a macro to automate this painstaking mess.

    #+BEGIN_SRC emacs-lisp
      (use-package +org-compile
        :defer t
        :after org
        :commands org-toggle-compile-on-save+
        :init
        (leader/set-keys-for-major-mode 'org-mode
          "1" 'org-toggle-compile-on-save+))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+org-compile.el
      (defvar org-compile-on-save-buffers+ nil
        "org buffers which when saved will be compiled.")

      (defvar org-compile-on-save-async+ nil
        "whether compilation is asynchronous or concurrent.
      the async approach spawns a new emacs instance to compile the org-file.
      depending on your hardware this may be slower then simply waiting for
      your current emacs instance to finish.")

      (defun org-compile-on-save-command+ ()
        (when (cl-member (current-buffer) org-compile-on-save-buffers+ :test #'eq)
          (org-latex-export-to-pdf org-compile-on-save-async+)))

      ;; for some reason I can't make this hook buffer local :(
      (add-hook 'after-save-hook #'org-compile-on-save-command+)

      (defun org-toggle-compile-on-save+ (&optional arg)
        (interactive "P")
        "when the current org buffer is saved, compile and render pdf output through latex."
        (unless (derived-mode-p 'org-mode)
          (user-error "this function can only be called from an org-mode buffer."))

        (let* ((buf (if (bound-and-true-p org-capture-mode)
                        (plist-get org-capture-current-plist :buffer)
                      (current-buffer)))
               (member (member buf org-compile-on-save-buffers+))
               (value (if (not arg)
                          (not member)
                        (not (zerop (prefix-numeric-value arg))))))
          (unless (buffer-file-name buf)
            (user-error "cannot compile a buffer with no associated filename."))

          (if value
              (add-to-list 'org-compile-on-save-buffers+ buf nil #'eq)
            (setq org-compile-on-save-buffers+ (delq buf org-compile-on-save-buffers+)))

          ;; while I'm here, let's also remove any killed buffers.
          (setq org-compile-on-save-buffers+
                (cl-remove-if #'buffer-killed-p org-compile-on-save-buffers+))

          ;; notify the user about what's happened.
          (when (called-interactively-p)
            (message "compile-on-save: %s" (if value
                                               (propertize "enabled" 'face 'compilation-info)
                                             (propertize "disabled" 'face 'compilation-error))))))
    #+END_SRC

*** org-fragtog
    automatically render latex fragments in org mode.

    #+BEGIN_SRC emacs-lisp
      (use-package org-fragtog
        :ensure t
        :defer  t
        :after org
        :config
        (when (host! 'desktop)
          (setq org-format-latex-options
                (plist-put org-format-latex-options :scale 1.5))))
    #+END_SRC

*** org-ql
    Lisp like query language for org mode.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package org-ql
        ;; :ensure t
        :straight t
        :defer  t
        :commands (ivy-org-ql-query
                   ivy-org-ql-query-picklink
                   ivy-org-ql-query-goto
                   ivy-org-ql-query-insert-link)
        :init
        (leader/set-keys
          "oq" 'ivy-org-ql-query)

        :config
        ;; basically all of ivy-org-ql was just copied and pasted from
        ;; here: https://github.com/alphapapa/org-ql/issues/63
        (defvar ivy-org-ql-query-collect-timer nil)
        (defun ivy-org-ql-query-collect (input)
          (when ivy-org-ql-query-collect-timer
            (cancel-timer ivy-org-ql-query-collect-timer))
          (if (< (length input) 4)
              (list "" (format "%d chars more" (- 4 (length input))))
            (setq ivy-org-ql-query-collect-timer
                  (run-with-timer
                   0.25 nil
                   `(lambda ()
                      (let ((files (org-agenda-files))
                            (query (org-ql--plain-query  ,input)))
                        (when query
                          (ignore-errors
                            (setq ivy--all-candidates
                                  (or
                                   (org-ql-select files query
                                     :action (lambda ()
                                               (propertize (org-get-heading t)
                                                           'marker (copy-marker (point)))))
                                   '("" "Search no results!")))
                            (setq ivy--old-cands ivy--all-candidates)
                            (ivy--exhibit)))))))
            nil))

        (defun ivy-org-ql-query ()
          (interactive)
          (ivy-read "Org query: " #'ivy-org-ql-query-collect
                    :dynamic-collection t
                    :initial-input (ivy-org-ql-query-string)
                    :action #'ivy-org-ql-query-goto))

        (defun ivy-org-ql-query-picklink ()
          (interactive)
          (ivy-read "Org query: " #'ivy-org-ql-query-collect
                    :dynamic-collection t
                    :initial-input (ivy-org-ql-query-string)
                    :action #'ivy-org-ql-query-insert-link))

        (defun ivy-org-ql-query-string ()
          (when mark-active
            (buffer-substring-no-properties
             (region-beginning) (region-end))))

        (defun ivy-org-ql-query-goto (headline)
          (interactive)
          (let ((marker (get-text-property 0 'marker headline)))
            (when (markerp marker)
              (switch-to-buffer (marker-buffer marker))
              (goto-char marker)
              (org-show-entry))))

        (defun ivy-org-ql-query-insert-link (headline &optional link-type breadcrumbs)
          (interactive)
          (let ((marker (get-text-property 0 'marker headline))
                store-link)
            (when (markerp marker)
              (org-with-point-at marker
                (let* ((id (org-id-get (point) t))
                       (attach-dir (org-attach-dir t))
                       (breadcrumbs
                        (when breadcrumbs
                          (let ((s (org-format-outline-path
                                    (org-get-outline-path)
                                    (1- (frame-width))
                                    nil org-picklink-breadcrumbs-separator)))
                            (if (eq "" s) "" (concat s org-picklink-breadcrumbs-separator)))))
                       (item (concat (or breadcrumbs "") (org-entry-get (point) "ITEM")))
                       (link
                        (cl-case link-type
                          (attach (list :link attach-dir :description (concat item "(ATTACH)") :type "file"))
                          (t (list :link (concat "id:" id) :description item :type "id")))))
                  (setq store-link link)))
              (org-insert-link nil (plist-get store-link :link) (plist-get store-link :description))
              (cond ((org-in-item-p)
                     (call-interactively #'org-insert-item))
                    (t (insert " ")))))))
    #+END_SRC

*** org-roam
    note taking system centred around org-mode. you can tag notes using the
    ~roam_tags~ keyword and you can reference sources using ~roam_key~.

    NOTE: protocol installation requires some manual setup, see [[https://www.orgroam.com/manual/Installation-_00281_0029.html#Installation-_00281_0029][here]].
    TODO: try out [[https://github.com/org-roam/company-org-roam/][company-org-roam]].

    #+BEGIN_SRC emacs-lisp
      (use-package org-roam
        :ensure t
        ;; :straight (org-roam :type git :host github :repo "org-roam/org-roam"
        ;;                     :fork (:host github :repo "zaeph/org-roam" :branch "nested-captures"))
        :defer  t
        :hook (after-init . org-roam-mode)
        :commands (counsel-rg-roam)
        :init
        (leader/set-keys
          "od" 'org-roam-capture
          ;; same as `org-roam-capture' except if the candidate already exists
          ;; open it instead of creating a capture session.
          "of" 'org-roam-find-file
          "op" 'org-roam-insert
          "or" 'org-roam
          ;; "og" 'org-roam-graph
          "os" 'counsel-rg-roam)

        (setq org-roam-db-update-idle-seconds 2
              org-roam-db-location (var! "org-roam.db")
              ;; org-roam-dailies-directory
              ;; org-roam-db-update-method 'immediate
              )

        :config
        (require '+org-capture)
        (require 'org-roam-protocol)

        (add-hook 'org-roam-file-setup-hook
                  (defun +org-roam-setup-hook ()
                    (when (featurep 'flyspell)
                      (flyspell-mode +1))

                    (auto-fill-mode +1)))

        (setq org-roam-capture-function #'counsel-org-capture)

        ;; see [[https://github.com/progfolio/doct/issues/16][#16]].
        (defun doct-org-roam+ (groups)
          (let (converted)
            (dolist (group groups)
              (let* ((props (nthcdr 5 group))
                     (roam-properties (plist-get (plist-get props :doct) :org-roam)))
                (push `(,@group ,@roam-properties) converted)))
            (setq doct-templates (nreverse converted))))

        (defun counsel-rg-roam ()
          "Run a rg session in your org roam directory"
          (interactive)
          (counsel-rg nil org-roam-directory))

        (setq org-roam-directory (org! "brain")
              org-roam-completion-system 'ivy
              ;; org-roam-capture-templates
              ;; (let ((doct-after-conversion-functions '(doct-org-roam+)))
              ;;   (doct `((:group "roam"
              ;;                   :type plain
              ;;                   :unnarowed t
              ;;                   :function org-roam-capture--get-point
              ;;                   :org-roam (:file-name "%<%Y%m%d%H%M%S>-${slug}"
              ;;                                         :head "#+title: ${title}\n")
              ;;                   :children (("default" :keys "d")
              ;;                              ("book" :keys "t"
              ;;                               :template ("#+roam_tags: %^{tags}"
              ;;                                          "#+roam_key: %?"))
              ;;                              )
              ;;                   )))
              ;;   )
              ;; `(("d" "default" plain ,#'org-roam-capture--get-point "%?" :file-name
              ;;    "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t))
              )
        )

      (use-package org-roam-server
        :ensure t
        :defer  t
        :init
        ;; global minor mode to enable the org-roam graph server
        (leader/set-keys "oG" 'org-roam-server-mode)

        :config
        (setq org-roam-server-port 8967))
    #+END_SRC

*** org-pdf
    Adapted from [[https://github.com/fuxialexander/org-pdftools][org-pdftools]] this adds a link type to org mode which lets you link
    to and open PDFs. I've removed all the pdftools specific stuff so this is just a
    generic configuration section for pdf related actions in org mode.

    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
        (defun +org-pdf-complete-link (&optional arg)
          "Use the existing file name completion for file.
      Links to get the file name, then ask the user for the page number
      and append it. ARG is passed to `org-link-complete-file'."
          (let ((default-directory (or +org-pdf-directory default-directory)))
            (concat
             (replace-regexp-in-string
              "^file:"
              (concat "pdftools" ":")
              (org-link-complete-file arg))
             "::"
             (read-from-minibuffer
              "Page:"
              "1"))))

        (defun +org-pdf-open (link)
          (message "%s" link)
          (save-match-data
            (let* ((path (when (string-match
                                "\\(.+\\)::.+" link)
                           (match-string 1 link))))
              (xopen-url+ (expand-file-name path)))))

        (defun +org-pdf-export (link description format)
          "Export the pdfview LINK with DESCRIPTION for FORMAT from Org files."
          (let* (path loc page)
            (if (string-match "\\(.+\\)::\\(.*\\)" link)
                (progn
                  (setq path (match-string 1 link))
                  (setq loc (match-string 2 link))
                  (if (string-match "\\([0-9]+\\)++\\(.*\\)" loc)
                      (setq page (match-string 1 loc))
                    (setq page loc)))
              (setq path link))

            ;; `org-export-file-uri` expands the filename correctly
            (setq path (org-export-file-uri (org-link-escape path)))

            (cond ((eq format 'html)
                   (format
                    "<a href=\"%s#page=%s\">%s</a>"
                    path
                    page
                    description))
                  ((eq format 'latex)
                   (format
                    "\\href{%s}{%s}"
                    path
                    description))
                  ((eq format 'ascii)
                   (format "%s (%s)" description path))
                  (t path))))

        (org-link-set-parameters "pdftools"
                                 :follow   #'+org-pdf-open
                                 :complete #'+org-pdf-complete-link
                                 :export   #'+org-pdf-export))
    #+END_SRC

*** org-man
    lets you link manual entries from org-mode.

    #+BEGIN_SRC emacs-lisp
      (use-package org-man
        :defer nil
        :after org
        :config
        (setq org-man-command +man-command))
    #+END_SRC

*** org-ref
    Support citations, references and links in org mode documents.

    WARN for bibliographies to show up you have to specify a biliographystyle (use
    unsrt when unsure).

    #+BEGIN_SRC emacs-lisp
      (use-package org-ref
        :ensure t
        :demand t
        :after  org
        :only (package! bibtex)
        :init
        (setq org-ref-completion-library 'org-ref-ivy-cite)

        :config
        (setq reftex-default-bibliography bibtex-files
              org-ref-latex-bibliography-absolute-p t
              org-ref-default-bibliography bibtex-files
              org-ref-bibliography-notes bibtex-completion-notes-path
              org-ref-pdf-directory (let ((path bibtex-completion-library-path))
                                      (if (listp path) (car path) path))
              org-ref-latex-bib-resolve-func #'expand-file-name)

        (leader/set-keys-for-major-mode 'org-mode
          "]" 'org-ref-insert-link)

        (general-unbind
         :keymaps 'org-ref-ivy-cite-keymap
         "C-j" "C-k" "C-y" "C-M-y" "C-<return>" "C-.")

        (set-keymap-parent org-ref-ivy-cite-keymap ivy-minibuffer-map)
        (general-define-key
         :keymaps 'org-ref-ivy-cite-keymap
         "C-c C-a" 'org-ref-ivy-show-all
         "C-c C-y" 'org-ref-ivy-sort-year-ascending
         "C-c M-y" 'org-ref-ivy-sort-year-descending))
    #+END_SRC

** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :defer  2
       :delight
       company-mode
       global-company-mode
       :init
       (general-define-key
         :states 'insert
         "M-SPC" 'company-complete)

       (defvar company-menu-bindings+
         `("C-1"     company-complete-number
           "C-2"     company-complete-number
           "C-3"     company-complete-number
           "C-4"     company-complete-number
           "C-5"     company-complete-number
           "C-6"     company-complete-number
           "C-7"     company-complete-number
           "C-8"     company-complete-number
           "M-l"     company-complete-common-or-next-char+
           "C-j"     company-select-next
           "C-k"     company-select-previous
           "C-d"     company-next-page
           "C-u"     company-previous-page
           "C-l"     company-complete-selection
           ;; "C-M-h"   company-show-doc-buffer
           "<C-tab>" company-complete-common-or-cycle
           "<tab>"   company-complete-selection
           ;; "C-h"     company-quickhelp-manual-begin
           "C-/"     company-filter-candidates
           "C-s"     company-filter-candidates
           "C-o"     company-last-candidate+
           "M-o"     company-first-candidate+)
         "bindings which override any local bindings while the company popup is active.
     DO NOT alter this (by setting a new value) while the popup is active, or be prepared
     to restart emacs.")

       (defalias 'case #'cl-case) ; TODO remove when company fixes cl issues.

       :config
       (setq company-statistics-file         (var! "company/statistics.el")
             company-tooltip-align-annotations t
             company-require-match nil)

       ;; don't let display steal focus
       (advice-add 'company-show-location   :around 'restore-default-display-buffer-actions)
       (advice-add 'company-show-doc-buffer :around 'restore-default-display-buffer-actions)

       (global-company-mode)

       (defun company-first-candidate+ ()
         (interactive)
         (company-set-selection 0))

       (defun company-last-candidate+ ()
         (interactive)
         (company-set-selection (max 0 (1- company-candidates-length))))

       (defun company-complete-next-char+ (&optional count)
         "insert the next COUNT characters from the current candidate."
         (interactive "p")
         (or count (setq count 1))

         (when (company-manual-begin)
           (let* ((candidate (nth company-selection company-candidates))
                  (remaining-input
                   (substring candidate (length company-prefix))))
             (if (or (<= (length remaining-input) 1)
                     (>= count (length remaining-input)))
                 (company-complete-selection)
               (company--insert-candidate
                (concat company-prefix
                        (substring remaining-input 0 count)))))))

       (defun company-complete-common-or-next-char+ (&optional count)
         "complete the common part of the current selection or insert
     upto COUNT characters from the current candidate."
         (interactive)
         (if (and (not (cdr company-candidates))
                  (equal company-common (car company-candidates)))
             (company-complete-selection)
           (if (string-prefix-p company-prefix company-common)
               (company-complete-next-char+ count)
             (company--insert-candidate company-common))))

       ;; use transient bindings inside the completion menu
       (defun company-set-bindings+ (&rest _)
         (apply 'general-define-key
                :keymaps 'override
                :states  'insert
                company-menu-bindings+))

       (defun company-unset-bindings+ (&rest _)
         (apply 'general-define-key
                :keymaps 'override
                :states  'insert
                (cl-loop for (i . arg) in (-zip (number-sequence 0 (length company-menu-bindings+))
                                                company-menu-bindings+)
                         collect (if (zerop (% i 2)) arg nil))))

       (add-hook 'company-completion-started-hook   'company-set-bindings+)
       (add-hook 'company-completion-finished-hook  'company-unset-bindings+)
       (add-hook 'company-completion-cancelled-hook 'company-unset-bindings+)

       (general-define-key
         :keymaps 'company-search-map
         "C-1"    'company-complete-number
         "C-2"    'company-complete-number
         "C-3"    'company-complete-number
         "C-4"    'company-complete-number
         "C-5"    'company-complete-number
         "C-6"    'company-complete-number
         "C-7"    'company-complete-number
         "C-8"    'company-complete-number
         "C-9"    'company-complete-number
         "C-f"    'company-search-toggle-filtering ; show filtered/all
         "C-s"    'company-search-repeat-forward
         "C-r"    'company-search-repeat-backward
         "C-n"    'company-search-repeat-forward
         "C-p"    'company-search-repeat-backward
         "ESC"    'company-search-abort)

       (general-define-key
         :keymaps 'company-active-map
         "C-w" nil ;; was company-show-location
         "C-e" 'company-show-location))
   #+END_SRC

*** configure-mode
    configure company backends on a mode by mode basis.

    #+BEGIN_SRC emacs-lisp
      (defvar universal-company-backends+
        '(company-capf company-semantic company-files)
        "backends that you should always use with `company/configure-mode'")

      (defvar company-backends-alist+ nil
        "alist of mode to backend associations.
      DO NOT assign or modify this list directly, you should interact
      with it using `company/configure-mode'.")

      (defvar company-configured-mode-stack+ nil
        "modes for which company has been configured in this buffer.")
      (make-variable-buffer-local 'company-configured-mode-stack+)

      (defun company/configure-mode--push-backends+ (mode backends)
        "push backends for MODE into `company-backends'"
        (when (member :universal backends)
          (setq backends (append (delete :universal backends)
                                 universal-company-backends+)))

        (let ((backends-exist (local-variable-p 'company-backends)))
          (unless backends-exist
            (setq-local company-backends nil))

          (condition-case err
              (setq company-backends (remove-duplicates
                                      (append backends
                                              company-backends)))
            (error
             (unless backends-exist
               (kill-local-variable 'company-backends))
             (signal (car err) (cdr err)))))

        (push mode company-configured-mode-stack+))

      (defun company/configure-mode--pop-backends+ (mode)
        "pop configured company backends for MODE.
      replacing the default backend list when MODE is the last
      mode for which backends were configured."
        ;; should be an always correct check, but just in case.
        (when (member mode company-configured-mode-stack+)
          (if (eq 1 (length company-configured-mode-stack+))
              ;; erase company backends and configuration stack
              (progn
                (kill-local-variable 'company-backends)
                (setq company-configured-mode-stack+ nil))
            ;; remove backends for current mode, but replace with
            ;; every other mode in the configured mode stack.
            (setq company-configured-mode-stack+
                  (remove mode company-configured-mode-stack+))
            (let ((remaining-backends (-flatten
                                       (mapcar
                                        (lambda (mode)
                                          (cdr (assoc mode company-backends-alist+)))
                                        company-configured-mode-stack+))))
              (when (member :universal remaining-backends)
                (setq remaining-backends (append (delete :universal remaining-backends)
                                                 universal-company-backends+)))
              (setq-local company-backends (remove-duplicates remaining-backends))))))

      (add-hook 'change-major-mode-hook
                (defun configure-company--pop-for-major-mode+ ()
                  "pop configured company backends for the current MAJOR-MODE"
                  (company/configure-mode--pop-backends+ major-mode)))

      ;; inspired by this issue: https://github.com/company-mode/company-mode/issues/839
      (cl-defmacro company/configure-mode ((mode &key major (use-universal t) predicate) &rest backends)
        "configure company backends for a given mode
      MODE can be a major or a minor mode & activation can be predicated using PREDICATE.
      backends are passed as the remaining argument list after the mode declaration.
      when USE-UNIVERSAL is true, `universal-company-backends+' will be appended to
      the list of backends supplied. "
        (when backends
          (let ((func-name (intern (concat "company/configure-" (symbol-name mode))))
                (mode-hook (intern (concat (symbol-name mode) "-hook")))
                (backends (if use-universal
                              (push :universal backends)
                            backends))
                ;; convert predicate to a callable
                (predicate (cond
                            ((and (listp predicate)
                                  (eq (car predicate)
                                      'lambda))
                             predicate)
                            (t (eval `(lambda () ,(or predicate t)))))))
            (push (cons mode backends) company-backends-alist+)
            `(add-hook ',mode-hook
                       (if ,major
                           (defun ,func-name ()
                             (when (funcall ,predicate)
                               (company/configure-mode--push-backends+ ',mode ',backends)))
                         (defun ,func-name ()
                           (if ,mode
                               (when (funcall ,predicate)
                                 (company/configure-mode--push-backends+ ',mode ',backends))
                             (company/configure-mode--pop-backends+ ',mode))))))))
      (put 'company/configure-mode 'lisp-indent-function 'defun)
    #+END_SRC

*** quickhelp
    Shows a small floating window with the docstring/helpstring of the company candidate
    at point.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package company-quickhelp
        :ensure t
        :defer  t
        :hook (company-mode . company-quickhelp-mode)
        :config
        (setq company-quickhelp-delay nil)

        (general-define-key
         :keymaps 'company-active-map
         "C-h" 'company-quickhelp-manual-begin))
    #+END_SRC

** all-the-icons
   provides some fonts for rendering graphical icons within emacs; alongside a set
   of functions to make retrieving appropriate functions for appropriate purposes.

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t
       :defer  t
       :commands (all-the-icons--insert-all-icons)
       :init
       (leader/set-keys
         "xi" 'all-the-icons-insert
         "xI" 'all-the-icons-insert-all-icons)

       :config
       (setq inhibit-compacting-font-caches t)

       (defun all-the-icons-insert-all-icons ()
         (interactive)
         (dolist (icon-list (list all-the-icons-icon-alist
                                  all-the-icons-dir-icon-alist
                                  all-the-icons-weather-icon-alist
                                  all-the-icons-mode-icon-alist
                                  ;; all-the-icons-url-alist
                                  ))
           (dolist (icon icon-list)
             (let* ((func (nth 1 icon))
                    (args (nthcdr 2 icon))
                    (name (car args))
                    (type (substring (symbol-name func) 14)))
               (unless (= (length args) 0)
                 (insert "\n" (apply func args) " " type " - " name)))))))
   #+END_SRC

** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "jj" 'avy-goto-char
         "jJ" 'avy-goto-char-2
         "jf" 'avy-goto-char-timer))
   #+END_SRC

** browse-url
   gives functions to open URLs/filepaths on your local system using system
   specific tools.

   #+BEGIN_SRC emacs-lisp
     (use-package browse-url
       :ensure t
       :defer  t
       :commands xopen-url+
       :config
       (defun xopen-url+ (url &optional arg)
         "Open visited file in default external program.
     When in dired mode, open file under the cursor.
     With a prefix ARG always prompt for command to use."
         (interactive "fOpen file: \nP")
         (unless url
           (setq url (if (eq major-mode 'dired-mode)
                         (dired-get-file-for-visit)
                       buffer-file-name)))

         (let ((program (if arg
                            (read-shell-command "Open current file with: ")
                          "xopen")))
           (call-process program nil 0 nil url))))
   #+END_SRC

** buffer-move
   Move buffer to windows in other directions. Like the vim C-w <Shift>+{h,j,k,l}
   series of functions.

   #+BEGIN_SRC emacs-lisp
     (use-package buffer-move
       :ensure t
       :defer  t
       :commands (rotate-windows)
       :init
       (general-define-key
         :keymaps 'emacs-window-map
         "H"   'buf-move-left
         "M-h" 'buf-move-left
         "J"   'buf-move-down
         "M-j" 'buf-move-down
         "K"   'buf-move-up
         "M-k" 'buf-move-up
         "L"   'buf-move-right
         "M-l" 'buf-move-right)

       :config
       ;; See [[https://www.emacswiki.org/emacs/TransposeWindows][Transpose Windows]]
       (defun rotate-windows (arg)
         "Rotate your windows; use the prefix argument to rotate the other direction"
         (interactive "P")
         (if (not (> (count-windows) 1))
             (message "You can't rotate a single window!")
           (let* ((rotate-times (prefix-numeric-value arg))
                  (direction (if (or (< rotate-times 0) (equal arg '(4)))
                                 'reverse 'identity)))
             (dotimes (_ (abs rotate-times))
               (dotimes (i (- (count-windows) 1))
                 (let* ((w1 (elt (funcall direction (window-list)) i))
                        (w2 (elt (funcall direction (window-list)) (+ i 1)))
                        (b1 (window-buffer w1))
                        (b2 (window-buffer w2))
                        (s1 (window-start w1))
                        (s2 (window-start w2))
                        (p1 (window-point w1))
                        (p2 (window-point w2)))
                   (set-window-buffer-start-and-point w1 b2 s2 p2)
                   (set-window-buffer-start-and-point w2 b1 s1 p1))))))))
   #+END_SRC

** define-word
   #+BEGIN_SRC emacs-lisp
     (use-package define-word
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "hdW" 'define-word
         "hdw" 'define-word-at-point))
   #+END_SRC

** drag-stuff
   VS Code like drag region or line upwards or downwards.

   #+BEGIN_SRC emacs-lisp
     (use-package drag-stuff
       :defer  t
       :ensure t
       :init
       (general-define-key
         "C-<up>" 'drag-stuff-up
         "C-<down>" 'drag-stuff-down))
   #+END_SRC

** emojify
   #+BEGIN_SRC emacs-lisp
     (use-package emojify
       :ensure t
       :defer  t
       :hook ((org-mode              . emojify-mode)
              (git-commit-mode       . emojify-mode)
              (web-mode              . emojify-mode)
              (emacs-lisp            . emojify-mode)
              (lisp-interaction-mode . emojify-mode)
              (yaml-mode             . emojify-mode)
              (bibtex-mode           . emojify-mode)
              (shell-mode            . emojify-mode)
              (markdown-mode         . emojify-mode)
              (lisp-interaction-mode . emojify-mode)
              (scss-mode             . emojify-mode))
       :init
       (leader/set-keys
         "xm" 'emojify-insert-emoji)

       (defalias 'remove-duplicates #'cl-remove-duplicates)

       :config
       (setq emojify-emojis-dir (var! "emojify/"))

       (general-define-key
         :keymaps 'emojify-list-mode-map
         :states 'motion
         "gr" 'emojify-list-force-refresh
         "Y"  'emojify-list-copy-emoji
         "RET" 'emojify-list-describe-emoji)

       (general-define-key
         :keymaps 'emojify-description-mode
         :states 'motion
         "Y" 'emojify-description-copy-emoji)

       ;; make emojis work like prettify-symbols-mode
       (setq emojify-point-entered-behaviour 'uncover
             emojify-emoji-styles '(unicode github)
             emojify-display-style 'unicode)
       )
   #+END_SRC

*** company
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package company-emoji
        :ensure t
        :defer  t
        :after  emojify
        :init
        (company/configure-mode (emojify-mode)
          company-emoji)

        :config
        ;; never insert emojis as their unicode symbols.
        (setq company-emoji-insert-unicode nil))
    #+END_SRC

** eyebrowse
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :ensure t
       :defer 30
       :config
       (eyebrowse-mode +1)

       (defun eyebrowse-switch-window-config--when-new-zen-current-window (func slot &rest args)
         "by default, when you create a new window config it's a complete copy
     of your current config. More often then not when you make a new config you
     want to change the layout of the windows (and buffers) within it. Creating
     a new config and then manuall deleting every other window is a pain, this
     makes it so when you make a new config, you're current window is maximised
     automatically."
         (let ((slot-new-p (not (eyebrowse--window-config-present-p slot))))
           (apply func slot args)
           (when (and slot-new-p
                      (> (length (window-list)) 1))
             (window-zen))))

       (advice-add 'eyebrowse-switch-to-window-config
                   :around #'eyebrowse-switch-window-config--when-new-zen-current-window))
   #+END_SRC

** gitlink
   #+BEGIN_SRC emacs-lisp
     (use-package git-link
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "gy"  "links"
         "gyl" 'git-link
         "gyc" 'git-link-commit
         "gyh" 'git-link-homepage)

       ;; default is to open the generated link
       (setq git-link-open-in-browser nil))
   #+END_SRC

** help-fns+
   #+BEGIN_SRC emacs-lisp
     (use-package help-fns+
       :defer t
       :commands (describe-buffer
                  describe-keymap
                  describe-mode
                  describe-function)
       :init
       (leader/set-keys
         "hdm" '("describe-mode" . describe-buffer)
         "hdf" 'describe-function
         "hdK" 'describe-keymap))
   #+END_SRC

** hide-modeline
   Makes the mode-line blank in the current buffer. this doesn't let the buffer contents expand
   into the mode-line region, it simply makes it appear as if nothings there.

   #+BEGIN_SRC emacs-lisp
     (use-package hide-mode-line
       :ensure t
       :defer  t)
   #+END_SRC

** hl-todo
   Highlight certain keywords in the current buffer.

   #+BEGIN_SRC emacs-lisp
     (use-package hl-todo
       :ensure t
       :defer  t
       :hook ((prog-mode . global-hl-todo-mode)
              (text-mode . global-hl-todo-mode)
              (org-mode  . hl-todo-mode))
       :init
       (leader/set-keys
         "jt" 'hl-todo-next
         "jT" 'hl-todo-previous
         "et" 'hl-todo-occur

         "it" 'hl-todo-insert
         "it" 'hl-todo-insert-keyword))
   #+END_SRC

** hydra
   #+NAME: tangle-hydras
   #+BEGIN_SRC emacs-lisp :tangle no :results values
     (org-babel-tangle-file "hydras.org")
     nil
   #+END_SRC

   tangles ~hydras.org~ alongside this org file and then sources bindings/autoloads
   Trom ~hydras.el~.

   #+BEGIN_SRC emacs-lisp
     <<tangle-hydras()>>
     (load (concat user-emacs-directory "hydras.el"))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t
       :defer  t
       :commands defhydra
       :config
       (setq lv-use-separator t))

     (use-package pretty-hydra
       :ensure t
       :defer  t)
   #+END_SRC

*** posframe
    Changes the display of the the hydra popups from some region above the message area into a
    posframe :) like ~frog-jump-buffer~.

    #+BEGIN_SRC emacs-lisp
      (use-package hydra-posframe
        :only (package! hydra-posframe)
        :straight (hydra-posframe :type git :host github :repo "Ladicle/hydra-posframe")
        :defer t
        :after hydra
        :init
        (when (display-graphic-p)
          ;; only use posframe when on graphical display
          ;; my terminals always too short for it to be
          ;; useful on there.
          (add-hook 'after-init-hook #'hydra-posframe-mode))

        :config
        ;; source for following section [[https://github.com/jerrypnz/.emacs.d/blob/master/config/jp-base.el][here]].
        (defun posframe-frame-bottom-poshandler+ (info)
          (cons (car (posframe-poshandler-frame-center info))
                (- (cdr (posframe-poshandler-frame-bottom-left-corner info)) 20)))

        (setq hydra-posframe-poshandler 'posframe-frame-bottom-poshandler+
              hydra-posframe-parameters '((alpha 100 100)
                                          (left-fringe . 10)
                                          (right-fringe . 10)
                                          (x-pixel-offset 4)
                                          (internal-border-width . 2))))
    #+END_SRC

** ialign
   #+BEGIN_SRC emacs-lisp
     (use-package ialign
       :ensure t
       :defer  t
       :commands evil-ialign
       :init
       (leader/set-keys
         "x TAB" 'evil-ialign)

       (general-define-key
         :states leader-norm-states
         "g TAB" 'evil-ialign)

       :config
       ;; run ialign using evil motions
       (evil-define-operator evil-ialign (beg end)
         :type        line
         :repeat      nil
         :move-point  t
         :keep-visual nil
         (ialign beg end))

       (general-define-key
         :keymaps 'ialign-minibuffer-keymap
         ;; "" 'ialign-toggle-repeat
         "M-k"        'ialign-increment-spacing
         "M-j"        'ialign-decrement-spacing
         "M-h"        'ialign-decrement-group
         "M-l"        'ialign-increment-group
         "<M-up>"     'ialign-increment-spacing
         "<M-down>"   'ialign-decrement-spacing
         "<M-left>"   'ialign-decrement-group
         "<M-right>"  'ialign-increment-group
         "C-SPC"      'ialign-set-spacing
         "<C-tab>"    'ialign-toggle-tabs
         "<C-return>" 'ialign-set-group
         "C-h"        'backward-char
         "C-l" (lambda ()
                 (interactive)
                 (call-interactively (if (eolp)
                                         'exit-minibuffer
                                       'forward-char)))))
   #+END_SRC

** lorem-ipsum
   insert placeholder text in the lorem-ipsum-dolor format.

   #+BEGIN_SRC emacs-lisp
     (use-package lorem-ipsum
       :defer  t
       :commands (Lorem-ipsum-insert-list
                  Lorem-ipsum-insert-paragraphs
                  Lorem-ipsum-insert-sentences)
       :init
       (leader/set-keys
         "il"  "lorem-ipsum"
         "ill" 'Lorem-ipsum-insert-list
         "ilp" 'Lorem-ipsum-insert-paragraphs
         "ils" 'Lorem-ipsum-insert-sentences))
   #+END_SRC

** miniedit
   write the minibuffer contents to a buffer. edit, then paste new contents back to minibuffer.

   #+BEGIN_SRC emacs-lisp
     (use-package miniedit
       :defer t
       :delight (miniedit-mode "MiniEdit")
       :commands (miniedit
                  miniedit-install
                  miniedit-install-for-xemacs
                  miniedit-introduction
                  miniedit-quick-start)
       :init
       (general-define-key
        :keymaps '(minibuffer-local-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map
                   minibuffer-local-must-match-map)
        "M-e" 'miniedit)

       ;; miniedit and evil don't seem to get along.
       (general-unbind :keymaps 'evil-ex-search-keymap "M-e")

       ;; ;; can't seem to change major mode without miniedit mode
       ;; ;; being removed :(
       ;; (add-hook 'miniedit-mode-hook initial-major-mode)
       :config
       (setq miniedit-show-help-p nil) ;; thanks... but no thanks

       (leader/with-prefix leader-major-mode-prefix
         (leader/set-keys-for-mode 'miniedit-mode
           "," 'exit-recursive-edit)))
   #+END_SRC

** open-junk-file
   create temporary files labelled with todays date and other information.

   #+BEGIN_SRC emacs-lisp
     (use-package open-junk-file
       :defer t
       :commands (open-junk-file
                  goto-junk-file-directory
                  goto-todays-junk-file-directory)
       :init
       (leader/set-keys
         "fJ" 'open-junk-file)

       (defvar junk-file-directory (var! "junk")
         "Directory to keep junk files in.")

       :config
       (setq open-junk-file-format (var! "junk-files/%Y/%m/%d-%H%M%S"))

       (defun goto-junk-file-directory ()
         (interactive)
         (let ((directory junk-file-directory))
           (if (f-directory-p directory)
               (find-file directory)
             (if (file-exists-p directory)
                 (message "junk directory appears to be created as a file: %s" directory)
               (when (y-or-n-p (format "junk file directory '%s' doesn't seem to exist. make it: "
                                       directory))
                 (make-directory (expand-file-name directory) t)
                 (find-file directory))))))

       (defun goto-todays-junk-file-directory ()
         (interactive)
         (let* ((filename  (format-time-string open-junk-file-format))
                (directory (file-name-directory filename)))
           (if (f-directory-p directory)
               (find-file directory)
             (if (file-exists-p directory)
                 (message "junk file directory appears to be created as a file: %s" directory)
               (when (y-or-n-p (format "junk file directory '%s' doesn't seem to exist. make it: "
                                       directory))
                 (make-directory (expand-file-name directory) t)
                 (find-file directory))))))

       (defun open-junk-file--fix-read-file-name-with-directory-wrapper (func &rest args)
         "ivy read-file-name doesn't seem to handle initial values with directory components
     very well. this wrapper function strips out the directory component of the default
     junk file name and passes it as the dir argument to read-file-name."

         (cl-letf* (((symbol-function 'actual-read-file-name)
                     (symbol-function 'read-file-name))
                    ((symbol-function 'read-file-name)
                     (lambda (prompt &optional _ _ mustmatch initial predicate)
                       (let ((dirname  (file-name-directory    initial))
                             (basename (file-name-nondirectory initial)))
                         ;; for some reason, this doesn't work unless I set default-filename and initial
                         ;; to basename, and even when I do so, the full path still appears an option :(
                         (actual-read-file-name prompt dirname basename mustmatch basename predicate)))))
           (apply func args)))

       (advice-add 'open-junk-file :around #'open-junk-file--fix-read-file-name-with-directory-wrapper))
   #+END_SRC

** org-link-mode
   view org links in non-org buffers as you would in org buffers.

   #+BEGIN_SRC emacs-lisp
     (use-package org-link-minor-mode
       :defer t
       :straight (org-link-minor-mode :type git :host github
                  :repo "seanohalpin/org-link-minor-mode")
       :hook ((text-mode . enable-org-link-minor-mode)
              (prog-mode . enable-org-link-minor-mode)
              (conf-mode . enable-org-link-minor-mode))
       :diminish org-link-minor-mode
       :init
       (defun enable-org-link-minor-mode (&rest _)
         (unless (derived-mode-p 'major-mode 'org-mode)
           (org-link-minor-mode +1)))

       :config
       ;; deprecated in org 9.3, not yet updated upstream.
       (defvaralias 'org-any-re 'org-link-any-re))
   #+END_SRC

** page-break-lines
   display ^L lines as horizontal-rules. Like so:



   #+BEGIN_SRC emacs-lisp
     (use-package page-break-lines
       :defer t
       :hook ((org-mode                    . page-break-lines-mode)
              (help-mode                   . page-break-lines-mode)
              (outline-mode                . page-break-lines-mode)
              (emacs-lisp-compilation-mode . page-break-lines-mode))
       :diminish
       page-break-lines-mode)
   #+END_SRC

** pcre2el
   convert from emacs regular expressions to perl like regexps and vice versa.

   #+BEGIN_SRC emacs-lisp
     (use-package pcre2el
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "xr"   "regexp"
         "xrb"  'regexp-builder
         "xr'"  'rxt-convert-to-strings
         "xr/"  'rxt-explain
         "xrc"  'rxt-convert-syntax
         "xrt"  'rxt-toggle-elisp-rx
         "xrx"  'rxt-convert-to-rx

         "xre"  "elisp"
         "xre'" 'rxt-elisp-to-strings
         "xre/" 'rxt-explain-elisp
         "xrep" 'rxt-elisp-to-pcre
         "xret" 'rxt-toggle-elisp-rx
         "xrex" 'rxt-elisp-to-rx

         "xrp"  "PCRE"
         "xrp'" 'rxt-pcre-to-strings
         "xrp/" 'rxt-explain-pcre
         "xrpe" 'rxt-pcre-to-elisp
         "xrpx" 'rxt-pcre-to-rx))
   #+END_SRC

** persp-mode
   TODO refactor

   #+BEGIN_SRC emacs-lisp
     (use-package persp-mode
       :ensure t
       :defer  150
       :diminish persp-mode

       ;; unbound functions:
       ;;    persp-kill-buffer
       ;;    persp-save-and-kill
       :commands (ivy-find-file-new-perspective
                  switch-to-persp-by-num
                  persp-switch
                  persp-kill-current
                  persp-add-current-buffer
                  persp-remove-current-buffer)

       :init
       (leader/set-keys
         "ba" 'persp-add-current-buffer
         "bA" 'persp-add-buffer
         "br" 'persp-remove-buffer
         "bR" 'persp-remove-current-buffer
         "fl" 'ivy-find-file-new-perspective)

       :config
       (require 'eyebrowse)

       (setq persp-autokill-buffer-on-remove 'kill-weak
             persp-save-dir (var! "perspectives/")

             ;; disable
             persp-auto-resume-time 0)

       (persp-mode +1)

       (defun ivy-find-file-new-perspective--action (file)
         (let* ((name (if current-prefix-arg
                          (let (done value)
                            (while (not done)
                              (setq value (read-string "Name for new perspective: "))
                              (if (not (persp-with-name-exists-p value))
                                  (setq done t) ;; break loop, valid name encountered
                                (unless (y-or-n-p (format "persp with name '%s' already exists. try again: "
                                                          value))
                                  (setq done t)) ;; user no longer wishes to create persp
                                (setq value nil) ;; unbind in case value being returned
                                ))
                            value)
                        (file-name-nondirectory (string-trim-right file "/")))))
           (when name
             (persp-add-new name)
             (persp-switch name)
             (let ((buffer (find-file file)))
               (switch-to-buffer buffer)
               (persp-add-buffer buffer)))))

       (defun ivy-find-file-new-perspective ()
         (interactive)
         (require 'counsel)
         (counsel--find-file-1
          "New Persp File: " nil
          #'ivy-find-file-new-perspective--action
          ;; 'ivy-find-file-new-perspective
          ;; with another value, dirs aren't colored
          'counsel-find-file))

       (defun switch-to-persp-by-num (index)
         "switch to a perspective based on it's position in (persp-persps)
     the first position is assumed to be associated with a perspective name `none'.
     if a perspective at the given index doesn't exist, it's assumed you wish to
     create a new one, so you'll be prompted to do so at the largest available index."
         (let* ((persp-list (nreverse (persp-persps)))
                (persp-count (length persp-list)))
           ;; last value is nil persp with name none
           (if (>= index persp-count)
               (when (yes-or-no-p (format "no layout exists at %d, would you like to make a new layout:"
                                          (1+ persp-count)))
                 (call-interactively 'persp-add-new))
             (let ((current-persp (get-current-persp))
                   (dest-persp    (nth index persp-list)))
               (unless (string-equal (safe-persp-name dest-persp)
                                     (safe-persp-name current-persp))
                 (persp-switch (safe-persp-name dest-persp)))))))

       (defvar persp--copying-p nil
         "true if persp-add-new is called with intent to copy current persp")

       (defun persp-add-new--after (&rest _)
         "hook which is run immeadiately after `persp-add-new'
     this function sets the current persp to the new persp... unless
     `persp-add-new' wasn't invoked interactively. It also kills all
     displayed windows and returns to the home buffer... unless the
     previous persp is being copied."
         (let ((persp-list (nreverse (persp-persps)))
               (start-persp (get-current-persp)))
           (persp-switch (safe-persp-name (car (last persp-list))))

           (unless persp--copying-p
             (kill-all-windows-and-return-to-home))

           (unless (called-interactively-p 'any)
             (persp-switch (safe-persp-name start-persp)))))

       (advice-add 'persp-add-new :after #'persp-add-new--after)
       (advice-add 'persp-copy :around (lambda (func &rest args)
                                         (let ((persp--copying-p t))
                                           (apply func args))))

       (defun persp-kill-goto-previous+ (func &rest args)
         "function which wraps around persp-kill
     this function will ensure after a perspective is killed, the next
     perspective you reach will be the one immeadiately before the erased
     one. Not really necessary, but when you try to delete 3 perspectives
     in a row, this'll make things easier. Besides, this is what you expect
     to happen."
         (let* ((perspectives (nreverse (persp-persps)))
                (current-persp (get-current-persp))
                (current-index (cl-position current-persp perspectives))
                (next-persp (when (and current-index
                                       (not (zerop current-index)))
                              (nth (- current-index 1) perspectives))))
           (apply func args)
           (when next-persp
             (persp-switch (persp-name next-persp)))))

       (advice-add 'persp-kill :around #'persp-kill-goto-previous+)

       (defun persp-kill-current ()
         "kill the current perspective"
         (interactive)
         (persp-kill (safe-persp-name (get-current-persp))))

       ;; (defun spacemacs//layout-contains-buffer-p (buffer)
       ;;   "returns true if the given buffer is in the current layout"
       ;;   (not (spacemacs//layout-not-contains-buffer-p buffer)))

       (defun persp-add-current-buffer ()
         "adds current buffer to current perspective"
         (interactive)
         (persp-add-buffer (current-buffer)))

       (defun persp-remove-current-buffer ()
         "removes current buffer from current persp"
         (interactive)
         (persp-remove-buffer (current-buffer)))

       (defun persp-move-layout-left ()
         (interactive)
         ;; (let* ((current-persp (get-current-persp))
         ;;        (current-persp-num (progn
         ;;                             (let (value)
         ;;                               (dolist (persp)))))
         ;;        ))
         (message "not yet implemented") ;; TODO implement
         )

       (defun persp-move-layout-right ()
         (interactive)
         (message "not yet implemented") ;; TODO implement
         )

       ;; thank you spacemacs for giving us perspective mode with eyebrowse... ergo, layouts :)
       ;; https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bspacemacs/spacemacs-layouts/funcs.el
       ;; the following is just a lazy translation of the spacemacs implementation from above for my config.
       ;; some vocabulary notes:
       ;;   * a workspace is a list of eyebrowse window configurations
       ;;   * a layout is a perspective-mode perspective which has an associated workspace.
       ;; for further elaborations on what those terms mean, see the README for perspective-mode and eyebrowse.

       ;; XXXX TBH I don't really understand what most of this does, a lot of it I just copied and pasted from
       ;;      spacemacs and changed spacemacs to layouts... if spacemacs ever realeases this as a standalone
       ;;      package, like they did with spaceline, make sure to switch to that. In the meantime, the following
       ;;      uses the same license as spacemacs... I.E. GPL v3
       ;;      Reference Commit: b252d252b0e93249b51400f60a0c69a59aa140a4

       (defun layouts//get-persp-workspace (&optional persp frame)
         "Get the correct workspace parameters for perspective.
     PERSP is the perspective, and defaults to the current perspective.
     FRAME is the frame where the parameters are expected to be used, and
     defaults to the current frame."
         (let ((param-names (if (display-graphic-p frame)
                                '(gui-eyebrowse-window-configs
                                  gui-eyebrowse-current-slot
                                  gui-eyebrowse-last-slot)
                              '(term-eyebrowse-window-configs
                                term-eyebrowse-current-slot
                                term-eyebrowse-last-slot))))
           (--map (persp-parameter it persp) param-names)))

       (defun layouts//set-persp-workspace (workspace-params &optional persp frame)
         "Set workspace parameters for perspective.
     WORKSPACE-PARAMS should be a list containing 3 elements in this order:
     - window-configs, as returned by (eyebrowse--get 'window-configs)
     - current-slot, as returned by (eyebrowse--get 'current-slot)
     - last-slot, as returned by (eyebrowse--get 'last-slot)
     PERSP is the perspective, and defaults to the current perspective.
     FRAME is the frame where the parameters came from, and defaults to the
     current frame.
     Each perspective has two sets of workspace parameters: one set for
     graphical frames, and one set for terminal frames."
         (let ((param-names (if (display-graphic-p frame)
                                '(gui-eyebrowse-window-configs
                                  gui-eyebrowse-current-slot
                                  gui-eyebrowse-last-slot)
                              '(term-eyebrowse-window-configs
                                term-eyebrowse-current-slot
                                term-eyebrowse-last-slot))))
           (--zip-with (set-persp-parameter it other persp)
                       param-names workspace-params)))

       ;;  _                 _
       ;; | |__   ___   ___ | | _____
       ;; | '_ \ / _ \ / _ \| |/ / __|
       ;; | | | | (_) | (_) |   <\__ \
       ;; |_| |_|\___/ \___/|_|\_\___/
       ;;

       ;; spacemacs/save-eyebrowse-for-perspective
       (defun layouts//save-eyebrowse-for-perspective (&optional frame)
         "save FRAME's eyebrowse workspace to FRAME's perspective.
     FRAME defaults to the current frame."
         (layouts//set-persp-workspace (list (eyebrowse--get 'window-configs frame)
                                             (eyebrowse--get 'current-slot frame)
                                             (eyebrowse--get 'last-slot frame))
                                       (get-frame-persp frame)
                                       frame))

       (add-hook 'eyebrowse-post-window-switch-hook #'layouts//save-eyebrowse-for-perspective)

       ;; spacemacs/update-eyebrowse-for-perspective
       (defun layouts//update-eyebrowse-for-perspective (&rest _args)
         "update & save current frame's eyebrowse workspace to its perspective"
         (let* ((current-slot (eyebrowse--get 'current-slot))
                (current-tag (nth 2 (assoc current-slot (eyebrowse--get 'window-configs)))))
           (eyebrowse--update-window-config-element
            (eyebrowse--current-window-config current-slot current-tag)))
         (layouts//save-eyebrowse-for-perspective))

       (add-hook 'persp-before-switch-functions #'layouts//update-eyebrowse-for-perspective)
       (add-hook 'persp-before-save-state-to-file-functions #'layouts//update-eyebrowse-for-perspective)

       ;; spacemacs/load-eyebrowse-for-perspective
       (defun layouts//load-eyebrowse-for-perspective (type &optional frame)
         "load an eyebrowse workspace according to a perspective's parameters.
     FRAME's perspective is the perspective that is considered, defaulting to
     the current frame's perspective.
     If the perspective doesn't have a workspace, create one."
         (when (eq type 'frame)
           (let* ((workspace-params (layouts//get-persp-workspace (get-frame-persp frame) frame))
                  (window-configs (nth 0 workspace-params))
                  (current-slot (nth 1 workspace-params))
                  (last-slot (nth 2 workspace-params)))
             (if window-configs
                 (progn
                   (eyebrowse--set 'window-configs window-configs frame)
                   (eyebrowse--set 'current-slot current-slot frame)
                   (eyebrowse--set 'last-slot last-slot frame)
                   (eyebrowse--load-window-config current-slot))
               (eyebrowse--set 'window-configs nil frame)
               (eyebrowse-init frame)
               (layouts//save-eyebrowse-for-perspective frame)))))

       (add-hook 'persp-activated-functions #'layouts//load-eyebrowse-for-perspective)

       ;; spacemacs/load-eyebrowse-after-loading-layout
       (defun layouts//load-eyebrowse-after-perspective-load (_ _ persp-names)
         "bridge between `persp-after-load-state-functions' and
     `layouts//load-eyebrowse-for-perspective'.
     PERSP-HASH is the hash were the loaded perspectives were placed, and
     PERSP-NAMES are the names of these perspectives."
         (let ((cur-persp (get-current-persp)))
           ;; load eyebrowse for current perspective only if it was one of the loaded
           ;; perspectives
           (when (member (or (and cur-persp (persp-name cur-persp))
                             persp-nil-name)
                         persp-names)
             (layouts//load-eyebrowse-for-perspective 'frame))))

       (add-hook 'persp-after-load-state-functions #'layouts//load-eyebrowse-after-perspective-load))
   #+END_SRC

** projectile
   project management in style.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :defer  10
       :delight ""
       :hook (prog-mode . projectile-mode)
       :init
       (leader/set-keys
         "p"  "projectile"
         "p TAB" 'projectile-find-other-file
         "p!" 'projectile-run-shell-command-in-root
         "p%" 'projectile-replace-regexp
         "p&" 'projectile-run-async-shell-command-in-root
         "pa" 'projectile-toggle-between-implementation-and-test
         "pb" 'projectile-switch-to-buffer
         "pc" 'projectile-compile-project
         "ph" 'projectile-dired ;; dired in project home directory
         "pd" 'projectile-find-dir
         "pD" 'projectile-discover-projects-in-directory
         "pf" 'projectile-find-file
         "pF" 'projectile-find-file-in-known-projects
         "pG" 'projectile-regenerate-tags
         "pg" 'projectile-find-tag
         "pI" 'projectile-invalidate-cache
         "pk" 'projectile-kill-buffers
         "pp" 'projectile-run-project
         "pr" 'projectile-recentf
         "p[" 'projectile-previous-project-buffer
         "p]" 'projectile-next-project-buffer
         "pt" 'projectile-test-project
         "pso" 'projectile-multi-occur
         ;; "pxe" 'projectile-run-eshell
         ;; "pxi" 'projectile-run-ielm
         ;; "pxt" 'projectile-run-term
         ;; "pxs" 'projectile-run-shell
         ;; "pxv" 'projectile-run-vterm
         "pv" 'projectile-run-vterm
         )

       (advice-add 'delete-buffer-file :after (lambda (&rest _)
                                                (when (projectile-project-p)
                                                  (call-interactively 'projectile-invalidate-cache))))
       :config
       (require '+projectile-project-types)

       (with-suppressed-warnings
         (defvaralias 'grep-regexp-history 'regexp-search-ring))

       (defun projectile-ensure-no-trailing-slash-in-root (func &rest args)
         (cl-letf* (((symbol-function 'true-projectile-project-root)
                     (symbol-function 'projectile-project-root))
                    ((symbol-function 'projectile-project-root)
                     (lambda (&rest args)
                       ;; TODO maybe don't hardcode file name seperator
                       (string-remove-suffix "/"
                                             (apply 'true-projectile-project-root args)))))
           (apply func args)))

       (setq projectile-project-search-path (cl-loop for fp in '("~/prog/repos/")
                                                     if (file-directory-p fp)
                                                     collect fp)
             projectile-tags-backend 'xref ;; opt into gtags
             projectile-indexing-method 'alien ;; never use native
             projectile-tags-command "ctags -Re -f \"%s\" %s \"%s\""
             projectile-cache-file (var! "projectile/cache.el")
             projectile-known-projects-file (var! "projectile/known-projects.el"))

       (advice-add 'projectile-regenerate-tags :around #'projectile-ensure-no-trailing-slash-in-root)

       (when (windows-p)
         ;; fixes search glitches on windows when using cygwin... also strips out leading ./ because
         ;; ivy seems to recognise ./ paths as distinct from their non ./ counterparts... maybe that's
         ;; projectiles fault... who knows. also exclude special emacs backup files from search results.
         (setq projectile-generic-command "find . -type f -not -iname '#*#' -print | cut -c3- | tr '\\n' '\\0'"))

       (defun projectile-cleanup--shut-up-please (func &rest args)
         "I don't need to know when you've done nothing... thnx tho :P"
         (cl-letf* (((symbol-function 'actual-message)
                     (symbol-function 'message))
                    ((symbol-function 'message)
                     (lambda (format &rest args)
                       (if (string-equal format
                                         "No projects needed to be removed.")
                           (apply 'format format args)
                         (apply 'actual-message format args)))))
           (apply func args)))

       (advice-add 'projectile-cleanup-known-projects :around #'projectile-cleanup--shut-up-please)

       (defun projectile-compile--double-prefix-means-run-comint (func &optional args)
         "allow running compilation interactively when multiple prefixes are given.
     with two prefixes (C-u C-u) runs default compilation command in interactive
     compilation buffer. with three prompts for command and then runs it in an
     interactive compilation buffer."
         (let ((prefix current-prefix-arg))
           (if (and (consp prefix)
                    (setq prefix (car prefix))
                    (>= prefix 16))
               (cl-letf* (((symbol-function 'actual-compile)
                           (symbol-function 'compile))
                          ((symbol-function 'compile)
                           (lambda (command &optional _)
                             (actual-compile command t))))
                 (funcall func (if (eq prefix 16) nil '(4))))
             (funcall func prefix))))

       (advice-add 'projectile-run-project     :around #'projectile-compile--double-prefix-means-run-comint)
       (advice-add 'projectile-compile-project :around #'projectile-compile--double-prefix-means-run-comint)
       (advice-add 'projectile-test-project    :around #'projectile-compile--double-prefix-means-run-comint))
   #+END_SRC

*** project-types
    #+BEGIN_SRC emacs-lisp :tangle lisp/+projectile-project-types.el
      (projectile-register-project-type 'rake '("rakefile")
                                        :compile "rake build"
                                        :test    "rake test"
                                        :run     "rake run"
                                        :test-suffix ".spec")

      (projectile-register-project-type 'pipenv '("Pipfile")
                                        :test "pipenv py -m pytest")

      (projectile-register-project-type 'make '("Makefile")
                                        :compile "make"
                                        :install "make install"
                                        :run     "make run"
                                        :test    "make test")

      ;; see: https://github.com/bbatsov/projectile/blob/master/projectile.el#L2636
      (projectile-register-project-type 'gradle '("build.gradle.kts")
                                        :run     "gradle run"
                                        :compile "gradle build"
                                        :test    "gradle test"
                                        :test-suffix "Spec")

      (projectile-register-project-type 'gradlew '("gradlew")
                                        :run     "./gradlew run"
                                        :compile "./gradlew build"
                                        :test    "./gradlew test"
                                        :test-suffix "Spec")

      (projectile-register-project-type 'golang '("go.mod")
                                        :run     "go run"
                                        :compile "go build"
                                        :test    "go test"
                                        :test-suffix "_test")

      (provide '+projectile-project-types)
    #+END_SRC

*** commands
    #+BEGIN_SRC emacs-lisp
      (use-package +projectile-commands
        :commands (projectile-ivy-persp-switch-project
                   projectile-show-and-copy-project-dir
                   project-has-file-p
                   when-project-has-file-p)
        :init
        (leader/set-keys
          "pl" 'projectile-ivy-persp-switch-project
          "py" 'projectile-show-and-copy-project-dir))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+projectile-commands.el
      (defun projectile-ivy-persp-switch-project (arg)
        (interactive "P")
        (ivy-read "Switch to Project Perspective: "
                  (if (projectile-project-p)
                      (cons (abbreviate-file-name (projectile-project-root))
                            (projectile-relevant-known-projects))
                    projectile-known-projects)
                  :action (lambda (project)
                            (let ((persp-reset-windows-on-nil-window-conf t)
                                  (project-name (file-name-nondirectory
                                                 (string-remove-suffix "/" project))))
                              (persp-switch project-name)
                              (projectile-switch-project-by-name project)))))

      (defun projectile-show-and-copy-project-dir (&optional prefix)
        (interactive "P")
        (if (not (projectile-project-p))
            (message "you're not currently in a project")
          (let ((path (projectile-project-root)))
            (when prefix
              (if (and (consp prefix) (eq (car prefix) 4))
                  (insert path)
                (save-excursion
                  (insert path))))
            (message (abbreviate-file-name path))
            (kill-new path))))

      (defun project-has-file-p (&rest files)
        (let ((project-dir (projectile-project-p)))
          (and project-dir
               (cl-loop
                for file in files
                when (file-exists-p (concat project-dir file))
                return t))))

      (defmacro when-project-has-file-p (file &rest body)
        `(when (project-has-file-p ,file)
           ,@body))

      (provide '+projectile-commands)
    #+END_SRC

** real-auto-save-mode
   #+BEGIN_SRC emacs-lisp
     (use-package real-auto-save
       :ensure t
       :defer  t
       :init
       (setq real-auto-save-interval 6))
   #+END_SRC

** sudo-edit
   Reopen the current file as root user.

   #+BEGIN_SRC emacs-lisp
      (use-package sudo-edit
        :ensure t
        :defer  t
        :commands sudo-edit
        :init
        (leader/set-keys
          "fE" 'sudo-edit))
   #+END_SRC

** transpose-frame
   #+BEGIN_SRC emacs-lisp
     (use-package transpose-frame
       :defer t
       :commands (transpose-frame
                  flip-frame
                  flop-frame ;; flip horizontally
                  rotate-frame ;; 180 degrees
                  rotate-frame-clockwise ;; 90 degrees
                  rotate-frame-anti-clockwise ;; 90 degrees
                  )
       :init
       (general-define-key
         :keymaps 'emacs-window-map
         "C-t"   'transpose-frame
         "t"     'transpose-frame
         "("     'rotate-frame-clockwise
         ")"     'rotate-frame-anti-clockwise
         "*"     'rotate-frame
         "f"     'flip-frame
         "F"     'flop-frame))
   #+END_SRC

** rainbow-delimeters
   pretty colors for my lisp parens :)

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :defer  t
       :hook (prog-mode . rainbow-delimiters-mode)
       :commands rainbow-delimiters-mode)
   #+END_SRC

** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :defer  t
       :diminish
       :init
       (global-undo-tree-mode +1)

       :config
       (push 'undo-tree-visualizer-mode
              whitespace-exempt-modes)

       (setq undo-tree-auto-save-history t
             ;; TODO look into undoing within region
             ;; undo-tree-enable-undo-in-region t
             )

       ;;; where do undo-tree auto-saves go.
       (setq undo-tree-history-directory-alist
             `(("." . ,(var! "undo"))))

       (defvar undo-tree-skip-autosave-regex+
         (rx
          (or
           ;; match extensions in filename
           (and (or ".pdf" ".log") eol)
           ;; match exact file paths
           (and
            (or
             ;; wildcard regexp match. any match is a valid match.
             (and "[*Org Src")
             ;; match from the beginning of the line
             (and bol (or
                       (eval dotemacs-var-path)
                       (eval (concat straight-base-dir "straight/"))
                       (eval package-user-dir)
                       (eval external-packages-directory)
                       (eval bookmark-default-file)
                       (eval +dashboard-banners-directory)))))))
         "don't create an undo-tree auto-save for file if `buffer-file-name' \
     matches this regexp.")

       (advice-add 'undo-tree-save-history :around
                   (defun undo-tree-save-history--respect-ignore+ (func &rest args)
                     "respect `undo-tree-skip-autosave-regex+'.
     also suppresses undo-tree messages relating to saving files."
                     (when (and undo-tree-skip-autosave-regex+
                                (not (string-match-p undo-tree-skip-autosave-regex+
                                                     buffer-file-name)))
                       (apply func args))))

       (advice-add 'undo-tree-save-history :around
                   (defun undo-tree-save-history--suppress-message+ (func &rest args)
                     (with-no-write-file-messages (apply func args))))

       (general-unbind
         :keymaps 'undo-tree-map
         "C-/" "C-_" "C-?")

       (leader/set-keys-for-major-mode 'undo-tree-visualizer-mode
         "RET" 'undo-tree-visualizer-selection-mode
         "t" 'undo-tree-visualizer-toggle-timestamps
         "," 'undo-tree-visualizer-quit
         "q" 'undo-tree-visualizer-abort
         "d" 'undo-tree-visualizer-toggle-diff)

       (general-define-key
        :states  'motion
        :keymaps '(undo-tree-visualizer-mode-map
                   undo-tree-visualizer-selection-mode-map)
        "t" 'undo-tree-visualizer-toggle-timestamps
        "gj" 'undo-tree-visualize-redo-to-x
        "gk" 'undo-tree-visualize-undo-to-x

        [remap quit-window] 'undo-tree-visualizer-quit
        [remap evil-scroll-column-right] 'undo-tree-visualizer-scroll-left
        [remap evil-scroll-column-left] 'undo-tree-visualizer-scroll-right)

       (general-define-key
        :states  'motion
        :keymaps 'undo-tree-visualizer-mode-map
        "h" 'undo-tree-visualize-switch-branch-left
        "l" 'undo-tree-visualize-switch-branch-right
        "d" 'undo-tree-visualizer-toggle-diff)

       (defun undo-tree-visualizer-set-and-exit-selection-mode ()
         (interactive)
         (funcall-interactively #'undo-tree-visualizer-set)
         (undo-tree-visualizer-selection-mode -1))

       (general-define-key
        :states 'motion
        :keymaps 'undo-tree-visualizer-selection-mode-map
        "RET" 'undo-tree-visualizer-set-and-exit-selection-mode
        "h" 'undo-tree-visualizer-select-left
        "l" 'undo-tree-visualizer-select-right
        "d" 'undo-tree-visualizer-selection-toggle-diff))
   #+END_SRC

** uuidgen
   #+BEGIN_SRC emacs-lisp
     (use-package uuidgen
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "iU" 'uuidgen
         ;; "U1" 'uuidgen-1
         ;; "U4" 'uuidgen-4
         ;; "UU" 'uuidgen-U
         ))
   #+END_SRC

** visible-mark
   highlight region when mark is active.

   #+BEGIN_SRC emacs-lisp
     (use-package visible-mark
       :ensure t
       :defer  t
       :commands (visible-mark-mode))
    #+END_SRC

** which-key
   show completion candidates for the current key prefix, after a mild delay.

   TODO refactor

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :demand t
       :diminish
       :commands (which-key-M-x+)
       :init
       (leader/set-keys
         "hk" 'which-key-show-top-level
         "h RET" 'which-key-M-x+)

       ;; prefix-completion courtesy of clemara
       ;; see https://with-emacs.com/posts/ui-hacks/prefix-command-completion/
       (defun which-key-M-x-prefix+ (&optional _)
         "Completing read and execute command from prefix-map.

     This command can be used as `prefix-help-command'. The optional
     argument is ignored and only for compatability with
     `which-key-C-h-dispatch' so this command can be bound in
     `which-key-C-h-map', too."
         (interactive)
         (let* ((evs (cond ((which-key--current-prefix)
                            (which-key--current-key-list))
                           (t
                            (butlast (append (this-command-keys-vector) nil)))))
                (key  (and evs (apply #'vector evs))))
           (which-key-M-x+ key)))

       (setq prefix-help-command #'which-key-M-x-prefix+)

       :config
       (which-key-mode 1)

       ;; order of keys is case insensetive
       (setq which-key-sort-order 'which-key-key-order-alpha
             which-key-echo-keystrokes 0.02)

       (defun which-key-M-x+ (&optional key)
         "Completing read command and execute it.

     Only commands which are bound to keys are considered. If KEY is
     given it should be the prefix-key for which commands should be
     completed. Otherwise read command from top-level. "
         (interactive)
         (let ((cmd (which-key--completing-read-cmd+ key)))
           (when (commandp cmd)
             (which-key--execute-cmd+ cmd))))

       (defun which-key--completing-read-cmd+ (&optional prefix)
         "Completing read command for PREFIX.

     Read commands for PREFIX or top-level if PREFIX not given."
         (which-key--hide-popup-ignore-command)
         (let ((desc
                (completing-read
                 (if prefix
                     (format "Execute (%s): " (key-description prefix))
                   "Execute: ")
                 (mapcar #'which-key--completing-read-format+
                         (which-key--get-current-bindings prefix)))))
           (intern (car (split-string desc)))))

       (defun which-key--execute-cmd+ (cmd)
         "Execute command CMD as if invoked by key sequence."
         (setq prefix-arg current-prefix-arg)
         (setq this-command cmd)
         (setq real-this-command cmd)
         (command-execute cmd 'record))

       (defun which-key--completing-read-format+ (bnd)
         "Format binding BND for `completing-read'."
         (let* ((key (car bnd))
                (cmd (cdr bnd))
                (desc (format "%s (%s)" cmd
                              (propertize key 'face 'which-key-key-face))))
           (which-key--maybe-add-docstring
            (format "%-50s" desc) cmd))))
   #+END_SRC

** with-editor
   package used by ~magit~ for controlling emacsclient.

   #+BEGIN_SRC emacs-lisp
     (use-package with-editor
       :init
       (leader/with-major-mode-prefix
         (leader/set-keys-for-mode 'with-editor-mode
           ","  'with-editor-finish
           "q"  'with-editor-cancel)))
    #+END_SRC

** winum
   number windows, to make jumping to them easier.

   #+BEGIN_SRC emacs-lisp
     (use-package winum
       :ensure t
       :demand t
       :init
       (general-define-key
        :keymaps 'emacs-window-map
        "1" 'winum-select-window-1
        "2" 'winum-select-window-2
        "3" 'winum-select-window-3
        "4" 'winum-select-window-4
        "5" 'winum-select-window-5
        "6" 'winum-select-window-6
        "7" 'winum-select-window-7
        "8" 'winum-select-window-8
        "9" 'winum-select-window-9
        "0" 'winum-select-window-by-number)

       :config
       (winum-mode)

       (with-eval-after-load 'which-key
         ;; reset 1st window number option to window by number
         (push (cons '("\\(.*\\) 1" . "winum-select-window-1")
                     '("\\1 1..9"   . "window-by-number"))
               which-key-replacement-alist)

         ;; hide numbers 2 through to nine
         (push (cons '(nil . "winum-select-window-[2-9]") t)
               which-key-replacement-alist)

         ;; abbreviate 0 value
         (push (cons '("\\(.*\\) 0" . "winum-select-window-by-number")
                     '("\\1 0"      . "window-by-prompt"))
               which-key-replacement-alist)))
   #+END_SRC

** yasnippet
   yet another snippets tool... but amazingly powerful. :-P. See the snippet [[https://joaotavora.github.io/yasnippet/snippet-development.html#org6796ab7][dev]] guide.

   #+NAME: tangle-snippets
   #+BEGIN_SRC emacs-lisp :tangle no :results values
     (org-babel-tangle-file "etc/snippets.org")
     nil
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     <<tangle-snippets()>>
   #+END_SRC

*** yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :defer  load-me-now-duration
        :delight (yas-minor-mode "YAS")
        :commands (yas-expand
                   yas-new-snippet
                   yas-visit-snippet-file)
        :init
        (leader/set-keys
          "iSn" 'yas-new-snippet
          "fS" 'yas-visit-snippet-file)

        (general-define-key
          :states 'insert
          [C-i] 'yas-expand
          "M-I" 'yas-expand)

        :config
        (setq yas-triggers-in-field t
              yasnippet-snippets-dir (etc! "snippets/")
              yas-snippet-dirs '(yasnippet-snippets-dir))

        (yas-global-mode 1)

        (general-define-key
          :keymaps 'yas-keymap
          "<C-return>" 'yas-next-field
          "<C-M-return>" 'yas-prev-field
          "C-l" 'yas-next-field
          "C-h" 'yas-prev-field)

        (leader/set-keys-for-major-mode 'snippet-mode
          "m" 'yas-load-snippet-buffer-and-close
          "l" 'yas-load-snippet-buffer
          "t" 'yas-tryout-snippet))
    #+END_SRC

*** licenses
    use yas to generate and insert license headers for the current buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package +yas-license
        :defer t
        :commands (insert-license
                   license-reload-profile)
        :init
        (leader/set-keys
          "ia" 'insert-license))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+yas-license.el
      (require 'yasnippet)

      (defvar license-dir (etc! "licenses")
        "directory in which to find license snippets.")

      (defvar license-dont-be-evil nil
        "append don't be evil clause to licenses.
      see [[https://en.wikipedia.org/wiki/Douglas_Crockford][Douglas Crockford]].")

      (defvar license-last-inserted nil
        "the fully populated last inserted license template.")

      (defun license-load-profile (&optional file)
        (or file
            (setq file (join-path license-dir ".profile")))

        (when (file-exists-p file)
          (with-temp-buffer
            (insert-file-contents file)
            (read (current-buffer)))))

      ;; load initial profile
      (defvar license-profile
        (ignore-errors
          (license-load-profile))
        "alist setting properties to auto insert in a license.
      properties include: last-name, first-name")

      (defun license-get-prop (prop &optional default)
        (or (cdr (assoc prop license-profile))
            default))

      (cl-defun license-get-name
          (&optional default (profile license-profile))
        (let ((first-name (license-get-prop 'first-name))
              (last-name  (license-get-prop 'last-name)))
          (cond
           ((and first-name last-name)
            (concat first-name " " last-name))
           (first-name first-name)
           (last-name last-name)
           (t default))))

      ;;;###autoload
      (defun license-reload-profile ()
        "set `license-profile' by rereading the profile file."
        (interactive)
        (setq license-profile (license-load-profile)))

      (defun license--licenses (&optional dir)
        "return an alist of (basename . file) for all .license files in DIR.
      Where DIR defaults to the current working directory (`default-directory')."
        (cl-loop
         for file in (file-expand-wildcards
                      (concat (if dir
                                  (concat dir "/")
                                default-directory)
                              "*.license"))
         collect (cons (file-name-base file) file)))

      (defun license--read-license ()
        (let ((licenses (license--licenses license-dir))
              license)
          (when (zerop (length licenses))
            (error "no licenses found in dir: %s" default-directory))

          (if (eq 1 (length licenses))
              (setq license (car licenses))
            (ivy-read "License: "
                      licenses
                      :require-match t
                      :preselect (when license-last-inserted
                                   (car license-last-inserted))
                      :action (lambda (x) (setq license x))))

          (with-temp-buffer
            (insert-file-contents (cdr license))
            (cons (car license)
                  (buffer-substring (point-min) (point-max))))))

      (cl-defmacro with-temp-buffer-and-same-vars ((&rest vars) &rest body)
        "store the values of VARS in current buffer, and then create a
      temp buffer reassigning the values of VARS and then invoking BODY."
        (let* ((current-vars
                (cl-loop with name = nil
                         for var in vars
                         do (setq name (symbol-name var))
                         collect (list (intern (concat "-current-" name))
                                       var)))
               (assign-vars
                (cl-loop for var in current-vars
                         collect (list (nth 1 var) (car var)))))
          `(let ,current-vars
             (with-temp-buffer
               (let ,assign-vars
                 ,@body)))))
      (put 'with-temp-buffer-and-same-vars 'lisp-indent-function 'defun)

      (defun license--comment-template (template &optional prefix)
        (with-temp-buffer-and-same-vars
            (comment-start comment-end comment-style
             comment-multi-line comment-add comment-continue)
          (insert template)
          (comment-region (point-min) (point-max) prefix)
          (buffer-substring (point-min) (point-max))))

      ;;;###autoload
      (defun insert-license (&optional prefix)
        "insert a license from the known license list.
      with PREFIX, repeats insertion of the last inserted license."
        (interactive "P")
        (let* ((license
                (if (and prefix license-last-inserted)
                    license-last-inserted
                  (license--read-license)))
               (comment-multi-line t))
          (yas-expand-snippet
           (license--comment-template (cdr license))
           nil nil
           '((yas-indent-line 'fixed)))

          (setq license-last-inserted license)))

      (provide 'yas-license)
    #+END_SRC

**** Types
     :PROPERTIES:
     :header-args+: :shebang :comments none
     :END:

     #+BEGIN_SRC snippet :tangle etc/licenses/GPL-2.0.license
       Copyright (C) `(format-time-string "%Y")`  ${1:`(capitalize (license-get-name "name"))`}

       This program is free software; you can redistribute it and/or
       modify it under the terms of the GNU General Public License
       as published by the Free Software Foundation; either version 2
       of the License, or (at your option) any later version.

       This program is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU General Public License for more details.

       You should have received a copy of the GNU General Public License
       along with this program; if not, write to the Free Software
       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle etc/licenses/GPL-3.0.license
       Copyright (C) `(format-time-string "%Y")`  ${1:`(capitalize (license-get-name "name"))`}

       This file is part of ${2:this program}.

       $2 is free software: you can redistribute it and/or modify
       it under the terms of the GNU General Public License as published by
       the Free Software Foundation, either version 3 of the License, or
       (at your option) any later version.

       $2 is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       GNU General Public License for more details.

       You should have received a copy of the GNU General Public License
       along with $2.  If not, see <https://www.gnu.org/licenses/>.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle etc/licenses/Apache-2.0.license
       Copyright `(format-time-string "%Y")` ${1:`(capitalize (license-get-name "name"))`}

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle etc/licenses/Boost.license
                Copyright ${1:`(capitalize (license-get-name "name"))`} `(format-time-string "%Y")` - ${2:`(format-time-string "%Y")`}.
       Distributed under the Boost Software License, Version 1.0.
          (See accompanying file LICENSE_1_0.txt or copy at
                https://www.boost.org/LICENSE_1_0.txt)
     #+END_SRC

     #+BEGIN_SRC snippet :tangle etc/licenses/MIT.license
       Copyright (c) `(format-time-string "%Y")` ${1:`(capitalize (license-get-name "name"))`}

       Permission is hereby granted, free of charge, to any person obtaining a copy
       of this software and associated documentation files (the "Software"), to deal
       in the Software without restriction, including without limitation the rights
       to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       copies of the Software, and to permit persons to whom the Software is
       furnished to do so, subject to the following conditions:

       The above copyright notice and this permission notice shall be included in all
       copies or substantial portions of the Software.

       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
       SOFTWARE.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle etc/licenses/ISC.license
       Copyright (c) `(format-time-string "%Y")` ${1:`(capitalize (license-get-name "name"))`} ${2:`(license-get-prop 'email "user@your.domain")`}

       Permission to use, copy, modify, and distribute this software for any
       purpose with or without fee is hereby granted, provided that the above
       copyright notice and this permission notice appear in all copies.

       THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
       WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
       MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
       ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
       WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
       ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
       OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle etc/licenses/BSD.license
       Copyright (c) `(format-time-string "%Y")` ${1:`(capitalize (license-get-name "name"))`}

       Redistribution and use in source and binary forms, with or without
       modification, are permitted provided that the following conditions
       are met:
       1. Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
       2. Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.

       THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \`\`AS IS'' AND
       ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       SUCH DAMAGE.
     #+END_SRC

     #+BEGIN_SRC snippet :tangle etc/licenses/BSD-3c.license
       Copyright (c) `(format-time-string "%Y")` ${1:`(capitalize (license-get-name "name"))`}

       Redistribution and use in source and binary forms, with or without
       modification, are permitted provided that the following conditions
       are met:
       1. Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
       2. Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
       3. Neither the name of the author nor the names of its contributors may
          be used to endorse or promote products derived from this software

       THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \`\`AS IS'' AND
       ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       SUCH DAMAGE.
     #+END_SRC

*** auto-yasnippet
    allows you to create dynamic/in-place snippets and repeatedly execute them.

    #+BEGIN_SRC emacs-lisp
      (use-package auto-yasnippet
        :ensure t
        :defer  t
        :init
        (leader/set-keys
          "iS"  "auto-yasnippet"
          "iSc" 'aya-create
          "iSe" 'aya-expand
          "iSw" 'aya-persist-snippet)

        (general-define-key
          :states 'insert
          "M-i" 'aya-expand))
    #+END_SRC

* Builtins
** prettify-symbols
   lets you convert identifiers like lambda into unicode symbols like Œª... isn't that
   epic :).

   #+BEGIN_SRC emacs-lisp
     (use-package prog-mode
       :delight  (prettify-symbols-mode "Œª")
       :defer t
       :init
       (setq lisp-prettify-symbols-alist nil
             ;; don't need to keep symbolifying it whilst I'm on it
             prettify-symbols-unprettify-at-point t))
   #+END_SRC

*** configure-presym
    :PROPERTIES:
    :header-args+: :tangle lisp/+configure-presym.el
    :END:

    Utility macro to make [[*prettify-symbols][prettify-symbols]] mode easier to setup for individual modes.

    #+BEGIN_SRC emacs-lisp :tangle init.el
      (use-package +configure-presym
        :commands 'configure-presym!)

      (defvar prettify-symbols-pretty-symbols-alist+ nil
        "alist of mode to pretty symbols ")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; inspired by: [[https://emacs.stackexchange.com/questions/34808/using-prettify-symbols-with-strings-instead-of-characters][this post]].
      (defun prettify-symbols-string+ (to)
        "get a prettify symbols entry to map a string to a string."
        (let ((length (length to)))
          (cl-loop for i from 0 to length
                   for char in (string-to-list to)
                   unless (eq i (- length 1))
                   do (setq char (list char '(Br . Bl)))
                   else
                   do (setq char (list char))
                   end
                   append char)))

      (defun configure-presym--prepare-args (args)
        "convert ARGS to partitioned 2 length cons cells.
      ARGS should simply be a flat sequence of string to pretty-symbol.

      The pretty-symbol part can be a given as a string, to automatically
      pass through `prettify-symbols-string+'.
      "
        (cl-loop for (src dest) in (-partition 2 args)
                 collect (cons src
                               (if (stringp dest)
                                   (prettify-symbols-string+ dest)
                                 dest))))

      ;; TODO add duplicate remove check.
      (defmacro configure-presym! (modes &rest args)
        "Configure prettify-symbols for modes MODES.
      This function adds/modifies an entry for mode in the
      `prettify-symbols-pretty-symbols-alist+' alist and binds a hook in MODES
      mode-hook to enable `prettify-symbols-mode'.

      MODES can be given as a quoted list, or a single quoted mode name or a
      variable pointing to either of these types (and discoverable at macro
      expansion time).

      ARGS should be a form acceptable by `configure-presym--prepare-args'.

      eg.

      > (configure-presym! 'org-mode \"lambda\" ?Œª)
      "
        (plist-bind! (args :remove-duplicates)
          (setq modes (eval modes))

          (when modes
            (unless (listp modes)
              (setq modes `(,modes))))

          (let (res ; aggregate forms into here
                (tuples (configure-presym--prepare-args args)))
            (dolist (mode modes)
              (let ((mode-name (symbol-name mode)))
                (push
                 `(let ((config (assoc (quote ,mode) prettify-symbols-pretty-symbols-alist+)))
                    (if config
                        ; add to existing config, while preventing cyclic loops
                        (nconc-safe (car (cdr config)) tuples)
                      (push (cons (quote ,mode) (list tuples))
                            prettify-symbols-pretty-symbols-alist+)

                      (add-hook (quote ,(intern (concat mode-name "-hook")))
                                (defun ,(intern (concat "configure-presym-" mode-name)) (&rest _)
                                  ,(concat "sets up pretty symbols for " mode-name)
                                  (let ((config (assoc (quote ,mode)
                                                       prettify-symbols-pretty-symbols-alist+)))
                                    (when (and config
                                               (setq config (car (cdr config))))
                                      (setq prettify-symbols-alist
                                            (append prettify-symbols-alist
                                                    (copy-sequence config)))

                                      (prettify-symbols-mode +1)))))))
                 res)))
            `(let ((tuples (quote ,tuples))) ,@res))))
      (put 'configure-presym! 'lisp-indent-function 'defun)

      (provide '+configure-presym)
    #+END_SRC

** auto-fill-mode
   #+BEGIN_SRC emacs-lisp
     (use-package simple
       :commands set-word-wrap-column
       :init
       (leader/set-keys
         "t^" 'set-word-wrap-column)

       :config
       (defun set-word-wrap-column (&optional arg)
         "set the maximum wanted length for a line in this buffer.
     This function enables `auto-fill-mode' in this buffer and sets
     the fill column value.

     If `auto-fill-mode' is already active and this function is called
     with no ARG, then a new `fill-column' value is interactively read.
     This also happens if a non numeric ARG is passed.

     If ARG is a number, `fill-column' is set to the value of that number.

     However, if the final value of ARG resolves to be non-positive,
     `auto-fill-mode' will be disabled.
     "
         (interactive "P")
         (let ((active (bound-and-true-p auto-fill-function)))
           (setq arg
                 (cond
                  ((numberp arg)
                   arg)
                  ((or (consp arg)
                       active)
                   ;; why would you pass a prefix to make this ask you for a number
                   ;; instead of just passing the number, dummy?
                   (read-number "fill-column: " fill-column))
                  (t fill-column)))

           (if (<= arg 0)
               (auto-fill-mode -1)
             (or active
                 (auto-fill-mode +1))
             (setq fill-column arg)))))
   #+END_SRC

** bookmarks
   #+BEGIN_SRC emacs-lisp
     (use-package bookmark
       :config
       ;; prioritise recently used bookmarks over just the default list.
       (defadvice bookmark-jump (after bookmark-jump activate)
         (let ((latest (bookmark-get-bookmark bookmark)))
           (setq bookmark-alist (delq latest bookmark-alist))
           (push latest bookmark-alist))))
   #+END_SRC

** buffer-menu
   The default buffer menu provided by emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package buff-menu
       :if (package! buffer-menu)
       :defer t
       :config
       (leader/set-keys-for-major-mode 'Buffer-menu-mode
         "1" 'Buffer-menu-1-window
         "2" 'Buffer-menu-2-window
         "f" 'Buffer-menu-toggle-files-only
         "/" 'Buffer-menu-isearch-buffers-regexp
         "o" 'Buffer-menu-multi-occur
         "T" 'Buffer-menu-visit-tags-table)

       (general-unbind
         :keymaps 'Buffer-menu-mode-map
         "0" "1" "2" "<" ">" "?" "C-d" "C-k" "S-SPC"
         "SPC" "<backtab>" "TAB" "T" "b" "e" "f" "g"
         "h" "n" "p" "t" "v" "SPC")

       (general-define-key
        :keymaps 'Buffer-menu-mode-map
        "C-SPC" 'Buffer-menu-mark
        "S-DEL" 'Buffer-menu-bury
        "r"   'Buffer-menu-toggle-read-only
        "C-j" 'Buffer-menu-this-window
        "gr"  'revert-buffer
        "gf" 'Buffer-menu-toggle-files-only
        "C-l" 'tabulated-list-next-column
        "C-M-<return>" 'Buffer-menu-select))
   #+END_SRC

** calc
   #+BEGIN_SRC emacs-lisp
     (use-package calc
       :defer t
       :after evil
       :init
       (advice-add 'evil-get-register :before-until
                   (defun evil-register-*-is-calc (register &optional _)
                     "make evils * register paste from head of calculator stack."
                     (when (eq register ?*)
                       (condition-case err
                           (with-temp-buffer
                             (calc-copy-to-buffer nil)
                             (buffer-substring (point-min) (point-max)))
                         (error (unless err (signal (car err) (cdr err)))
                                "")))))

       :config
       (evil-set-initial-state 'calc-mode 'motion)

       (add-hook 'calc-mode-hook
                 (defun calc--disable-evil-snipe (&rest _)
                   "overrides f, so disable it :P."
                   (when (bound-and-true-p evil-snipe-local-mode)
                     (evil-snipe-local-mode -1))))

       (evil-define-command evil-calc-call-kbd-macro (count macro)
         (interactive
          (let (count macro register)
            (setq count (prefix-numeric-value current-prefix-arg)
                  register (or evil-this-register read-char))
            (cond
             ((eq register ?@)
              (unless evil-last-register
                (user-error "No previously executed keyboard macro."))
              (setq macro (evil-get-register evil-last-register t)))
             (t
              (setq macro (evil-get-register register t)
                    evil-last-register register)))
            (list count macro)))

         (evil-with-single-undo
           (let ((last-kbd-macro macro))
             (dotimes (_ (or count 1))
               (calc-call-last-kbd-macro)))))

       (evil-define-motion evil-calc-next-line (count)
         (interactive "<c>")
         (evil-next-line count)

         (when (eobp)
           (calc-realign)

           (when (evil-visual-state-p)
             (forward-line -1)))

         (goto-char (+ 4 (line-beginning-position))))

       (evil-define-motion evil-calc-prev-line (count)
         (interactive "<c>")
         (evil-previous-line count)

         (when (eq (point-min) (line-beginning-position))
           (calc-goto-point-min))

         (goto-char (+ 4 (line-beginning-position))))

       (defun calc-goto-point-min ()
         (interactive)
         (goto-line 2)
         (forward-char 4)
         (recenter))

       (advice-add 'calc-scroll-down :around
                   (defun calc-scroll-down--make-goto-point-min (func &rest args)
                     "for some reason, scrolling before `point-min' doesn't change point."
                     (let ((current-point (point)))
                       (apply func args)

                       (when (eq (point) current-point)
                         (calc-goto-point-min)))))

       (defun evil-calc-visual-state ()
         (interactive)
         (when (string-match-p (rx bol (zero-or-more whitespace)
                                   "." eol)
                               (buffer-substring
                                (line-beginning-position)
                                (line-end-position)))
           (funcall-interactively 'evil-calc-prev-line 1))

         (evil-visual-line))

       (general-define-key
         :keymaps 'calc-mode-map
         "<override-state>" 'motion

         [remap quit-window] 'calc-quit)

       (general-unbind
         :keymaps 'calc-mode-map
         "SPC" ;; causes recursion-overflow
         "C-w" ;; calc-kill-region
         "U"   ;; calc-undo
         "D"   ;; calc-redo
         "Y"   ;; empty prefix :P
         "@"   ;; calcDigit-start
         "h"   ;; calc-help-prefix
         "i"   ;; calc-info

         ;; copies head of stack to point in buffer.
         "y"   ;; calc-copy-to-buffer
         "C-d" ;; calc-pop
         )

       (general-define-key
         :states '(motion visual)
         :keymaps 'calc-mode-map

         "C-w" 'emacs-window-map
         "M-u" 'smart-universal-argument

         "g"   nil
         "gg"  'calc-goto-point-min ;; was calc-graph-grid
         "gq"  'quit-window
         "gQ"  'calc-graph-quit

         "j" 'evil-calc-next-line
         "k" 'evil-calc-prev-line)

       (general-define-key
         :states 'visual
         :keymaps 'calc-mode-map
         "x" 'calc-kill-region
         "d" 'calc-kill-region
         "y" 'calc-copy-region-as-kill
         )

       (general-define-key
         :states 'motion
         :keymaps 'calc-mode-map
         "q"   'evil-record-macro
         "@"   'evil-calc-call-kbd-macro
         "y"   'calc-copy-as-kill
         "v"   'evil-calc-visual-state
         "u"   'calc-undo
         "G"   'calc-realign
         "C-r" 'calc-redo
         "C-t" 'calc-transpose-lines

         [remap evil-scroll-up]   'calc-scroll-down
         [remap evil-scroll-down] 'calc-scroll-up

         [remap quit-window] 'calc-quit

         "f"   (general-simulate-key "u" :state 'emacs)
         "C-v" (general-simulate-key "j" :state 'emacs)
         "C-n" (general-simulate-key "k" :state 'emacs)
         ;; [C-m] (general-simulate-key "v" :state 'emacs)
         )

       (leader/set-keys-for-major-mode 'calc-mode
         ;; TODO complete leader binding list :P.
         "," 'calc-comma))
   #+END_SRC

** calendar
   #+BEGIN_SRC emacs-lisp
     (use-package calendar
       :defer t
       :config
       (push 'calendar-mode whitespace-exempt-modes)

       (general-define-key
         :states  'motion
         :keymaps 'calendar-mode-map
         ;; see also [[https://github.com/emacs-evil/evil-collection/blob/master/evil-collection-calendar.el][evil-collection]].
         ;; globally useful
         [remap quit-window] 'calendar-exit
         "p"  'calendar-print-day-of-year
         "c"  'calendar-count-days-region
         "?"  'calendar-goto-info-node
         "gr" 'calendar-redraw

         ;; jumpt to date
         "."  'calendar-goto-today
         "h"  'calendar-backward-day
         "j"  'calendar-forward-week
         "k"  'calendar-backward-week
         "l"  'calendar-forward-day
         "0"  'calendar-beginning-of-week
         "$"  'calendar-end-of-week
         "[[" 'calendar-backward-year
         "]]" 'calendar-forward-year
         "("  'calendar-beginning-of-month
         ")"  'calendar-end-of-month
         "{"  'calendar-backward-month
         "}"  'calendar-forward-month
         "/"  'calendar-goto-date

         "C-h" 'calendar-backward-month
         "C-l" 'calendar-forward-month
         "C-j" 'calendar-scroll-left-three-months
         "C-k" 'calendar-scroll-right-three-months

         ;; marking and unmarking
         "X"  'calendar-unmark
         "v"  'calendar-set-mark
         "x"  'calendar-mark-holidays

         ;; diary interaction
         "D"  'diary-view-other-diary-entries
         "d"  'diary-view-entries
         "m"  'diary-mark-entries
         "s"  'diary-show-all-entries))
   #+END_SRC

** change-log-mode
   #+BEGIN_SRC emacs-lisp
     (use-package add-log
       :defer t
       :config
       (push 'change-log-mode whitespace-exempt-modes)
       (evil-set-initial-state 'change-log-mode 'motion)

       (leader/set-keys-for-major-mode 'change-log-mode
         "SPC" 'change-log-goto-source
         "f" 'change-log-find-file
         "j" 'add-log-edit-next-comment
         "K" 'add-log-edit-prev-comment)

       (general-define-key
         :states 'motion
         :keymaps 'change-log-mode-map
         "o" 'change-log-goto-source
         "C-j" 'add-log-edit-next-comment
         "C-K" 'add-log-edit-prev-comment))
   #+END_SRC

** compile
    setup some custom bindings and assign a post compilation hook which will
    automatically kill the compilation window.

    #+BEGIN_SRC emacs-lisp
      (use-package compile
        :ensure t
        :defer  t
        :commands (display-compilation-buffer
                   +set-compilation-bindings)
        :config
        (push 'compilation-mode whitespace-exempt-modes)

        (setq compilation-read-command nil
              compilation-scroll-output 'first-error)

        (defvar compilation-last-buffer nil
          "the last open compilation buffer.")

        (add-hook 'compilation-finish-functions
                  (lambda (buf &rest _)
                    (setq compilation-last-buffer buf)))

        (defun display-compilation-buffer ()
          (interactive)
          (let* ((buffer
                  (or compilation-last-buffer
                      (get-buffer
                       (if compilation-buffer-name-function
                           (funcall compilation-buffer-name-function "compilation")
                         "*compilation*"))))
                 (window (if (not buffer)
                             (user-error "compilation buffer doesn't exist")
                           (display-buffer buffer))))
            (select-window window t)))

        (defun +set-compilation-bindings (mode map)
          (leader/set-keys-for-major-mode mode
            "RET" 'recompile
            "k" 'kill-compilation
            "f" 'next-error-follow-minor-mode)

          (general-unbind
            :keymaps map
            "S-SPC" "SPC" "DEL" "M-p" "M-n" "M-{" "M-}"
            "0" "h" "g" "?" "n" "p" "<override-state>")

          (general-define-key
            :keymaps map
            :states  'motion
            [remap revert-buffer] 'recompile
            "gj"  'compilation-next-error
            "gk"  'compilation-previous-error
            "gn"  'next-error-no-select
            "gp"  'previous-error-no-select
            "o"   'compilation-display-error
            "j"   'compilation-next-error
            "k"   'compilation-previous-error
            "x"   'kill-compilation
            "C-j" 'compilation-next-file
            "C-k" 'compilation-previous-file)

          (general-define-key
            :keymaps map
            :states  '(replace insert)
            "ESC" 'evil-motion-state))

        (+set-compilation-bindings 'compilation-mode 'compilation-mode-map)

        (general-unbind
          :states  'motion
          :keymaps 'compilation-mode-map
          "j" "k")

        (general-define-key
         :keymaps 'emacs-lisp-compilation-mode-map
          [remap revert-buffer] 'emacs-lisp-compilation-recompile))
    #+END_SRC

*** auto-kill
    #+BEGIN_SRC emacs-lisp
      (defvar compilation-auto-kill-window 2
        "if non-nil, after a successfull compilation the compilation
      window, if open, will automatically be deleted.

      If set to a numerical value, window will be deleted after that many
      seconds.")

      (defvar compilation-auto-kill-ignore-modes nil
        "major modes spawned by `compile' for which auto-kill doesn't take place.")

      (defvar compilation-dont-auto-kill-window-when '(warnings focus)
        "specify not to kill the window when warning, error or info given.
      a list which can take in any symbol from (errors infos warnings).

      you can also specify a symbol, focus, to cancel window killing when
      the compilation window was already open when the compilation was
      started.")

      (defvar compilation-was-open-p nil
        "true whether the compilation window was visible when compilation began.")

      (advice-add 'compilation-start :before
                  (defun compilation-check-window-was-open+ (command &optional mode name-function highlight-regexp)
                    ;; name-of-mode and buf-name sourced from compile.el
                    (let* ((mode (or mode 'compilation-mode))
                           (name-of-mode (if (eq mode t)
                                             "compilation"
                                           (replace-regexp-in-string "-mode\\'" "" (symbol-name mode))))
                           (buf-name (compilation-buffer-name name-of-mode mode name-function))
                           buf)
                      (setq compilation-was-open-p
                            (and (setq buf (get-buffer buf-name))
                                 (get-buffer-window buf)
                                 t)))))

      (defun compilation-safely-close-window+ (buffer)
        (when (and buffer
                   (not (get-buffer-process buffer)))
          ;; don't skip if new compilation began before window
          ;; from previous compilation has been killed.
          (quit-windows-on buffer)))

      (defun compilation-cancel-auto-kill-p+ ()
        "whether to cancel compilation window auto-kill due to `compilation-dont-auto-kill-window-when'."
        (let ((associations '((errors   . compilation-num-errors-found)
                              (warnings . compilation-num-warnings-found)
                              (infos    . compilation-num-infos-found))))
          (cl-loop for (name . var) in associations
                   when (and (member name compilation-dont-auto-kill-window-when)
                             (not (zerop (eval var))))
                   collect (symbol-name name))))

      (defun compilation-finish-function+ (buf str)
        "hook to automatically hide compilation output."
        (when (and compilation-auto-kill-window
                   (and (member 'focus compilation-dont-auto-kill-window-when)
                        (not compilation-was-open-p))
                   ;; an abnormal exit automatically cancels window kill
                   (not (string-match-p (rx (zero-or-more any)
                                            "exited abnormally"
                                            (zero-or-more any))
                                        str))
                   (not (apply 'derived-mode-p
                               compilation-auto-kill-ignore-modes)))
          (let* ((terminate-window t))
            (let ((notifications (compilation-cancel-auto-kill-p+)))
              (when notifications
                (when debug-on-error
                  (message "window kill suspended due to encountering: %s"
                           (combine-and-quote-strings notifications)))
                (setq terminate-window nil)))

            (when terminate-window
              (if (numberp compilation-auto-kill-window) ;; kill after delay
                  (run-at-time (concat (number-to-string compilation-auto-kill-window)
                                       " sec")
                               nil 'compilation-safely-close-window+ buf)
                (compilation-safely-close-window+ buf))))))

      (with-eval-after-load 'compile
        (add-hook 'compilation-finish-functions 'compilation-finish-function+)
        (add-hook 'compilation-finish-functions
                  (lambda (&rest _)
                    (when (eq major-mode 'comint-mode)
                      (compilation-mode)))))
    #+END_SRC

** comint
   Mode to emulate a terminal, doesn't support much real terminal functionality but
   it's good enough for basic executions.

   #+BEGIN_SRC emacs-lisp
     (use-package comint
       :straight (comint :type built-in)
       :defer t
       :hook ((comint-mode . (lambda ()
                               (setq-local evil-emacs-state-cursor 'bar))))
       :config
       (push 'comint-mode whitespace-exempt-modes)
       (evil-set-initial-state 'comint-mode 'emacs)

       (setq comint-mode-map (make-sparse-keymap) ;; reset all
             comint-prompt-read-only t))
    #+END_SRC

    I've moved comint commands and binding declarations into a seperate file, because
    some packages override comint maps so you'll need to assign the same bindings for
    multiple modes and it's easier when their contained in a function.

    #+BEGIN_SRC emacs-lisp
      (use-package +comint-bindings
        :commands (+comint-set-bindings
                   +comint-set-leader-keys)
        :init
        (with-eval-after-load 'comint
          (+comint-set-bindings 'comint-mode-map)
          (+comint-set-leader-keys 'comint-mode)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+comint-bindings.el
      (defun comint-bol-point (&optional arg)
        (save-excursion
          (comint-bol arg)
          (point)))

      (defun comint-backward-delete-char (&optional arg)
        "delete upto ARG characters backward, ignoring the prompt."
        (interactive "p")
        (or arg (setq arg 1))

        (if (<= (comint-bol-point)
                (- (point) arg 1))
            (backward-delete-char arg)
          (delete-region (point) (comint-bol-point))))

      (defmacro comint-clamp-point-to-bol (&rest body)
        "ensures any operation done by body doesn't move point
      to before the command interpreter prompt."
        `(let ((bol (comint-bol-point)))
           ,@body ;; run body operations

           (when (< (point) bol)
             (goto-char bol))))

      (defun comint-backward-char (&optional N)
        (interactive "P")
        (comint-clamp-point-to-bol (backward-char N)))

      (defun comint-backward-word (&optional N)
        (interactive "P")
        (comint-clamp-point-to-bol (backward-word N)))

      (defun comint-on-prompt-line-p ()
        (interactive)
        (save-excursion
          (let ((point (point))
                (current-line (what-line)))
            (goto-char (comint-bol-point))
            (string-equal (what-line) current-line))))

      ;; TODO support prefix arg
      (defun comint-previous-input-or-previous-line ()
        (interactive)
        (if (comint-on-prompt-line-p)
            (call-interactively 'comint-previous-input)
          (comint-clamp-point-to-bol
           (previous-line))))

      (defun comint-next-input-or-next-line ()
        (interactive)
        (if (eobp)
            (call-interactively 'comint-next-input)
          (next-line)))

      ;; TODO ensure history shifts maintain correct cursor position
      ;; (advice-add 'comint-previous-input :after 'comint-bol)
      ;; (advice-add 'comint-next-input     :after 'end-of-buffer)

      (defun +comint-set-bindings (keymap)
        ;; abstracted into a method because realgud seems
        ;; to hide all of these bindings.
        (general-define-key
         :keymaps keymap
         "RET" 'comint-send-input
         "M-RET" 'comint-accumulate

         "DEL" 'comint-backward-delete-char
         "<backspace>" 'comint-backward-delete-char

         "<C-backspace>" 'evil-backward-delete-word

         "M-DEL" 'comint-kill-input
         "<M-backspace>" 'comint-kill-input

         "<mouse-2>" 'comint-insert-input

         "C-w" emacs-window-map
         "M-w" 'backward-kill-word
         "M-l" 'recenter-top-bottom
         ;; "C-M-l" 'comint-show-output

         "C-a" 'comint-bol-or-process-mark
         "C-e" 'end-of-buffer       ;; 'end-of-line
         "C-s" 'comint-history-isearch-backward-regexp
         "M-s" 'comint-dynamic-list-input-ring ;; TODO use ivy
         "C-r" 'evil-paste-from-register
         "C-v" 'quoted-insert
         "C-u" 'scroll-down
         "C-d" 'scroll-up
         "C-o" 'evil-execute-in-normal-state

         "C-<left>"  'backward-word
         "C-<up>"    'comint-previous-input
         "C-<down>"  'comint-next-input
         "C-<right>" 'forward-word

         "<left>"    'backward-char
         "<up>"      'comint-previous-input-or-previous-line
         "<down>"    'comint-next-input-or-next-line
         "<right>"   'forward-char

         "C-h"       'backward-char
         "C-j"       'comint-next-input-or-next-line
         "C-k"       'comint-previous-input-or-previous-line
         "C-l"       'forward-char

         "M-j"       'comint-next-matching-input-from-input
         "M-k"       'comint-previous-matching-input-from-input

         "C-f"       'forward-word
         "C-b"       'comint-backward-word

         "M-u" 'comint-next-prompt
         "M-d" 'comint-previous-input

         ;; "<remap> <forward-char>"  'comint-forward-char
         "<remap> <backward-char>" 'comint-backward-char
         ;; "<remap> <forward-word>"  'comint-forward-word
         "<remap> <backward-word>" 'comint-backward-word

         "C-c C-c" 'comint-interrupt-subjob
         "C-c C-x" 'comint-get-next-from-history
         ))

      (defun +comint-set-leader-keys (mode)
        (leader/set-keys-for-major-mode mode
          "z" 'comint-send-eof
          "*" 'comint-insert-previous-argument
          "r" 'comint-dynamic-list-input-ring
          "m" 'comint-clear-buffer
          "M" 'comint-show-maximum-output
          "x" 'comint-get-next-from-history
          "RET" 'comint-copy-old-input ;; copy text before cursor
          ">" 'comint-write-output
          "t" 'comint-show-output
          "o" 'comint-delete-output

          "s" "subjob"
          "ss" 'comint-stop-subjob
          "sq" 'comint-quit-subjob
          "si" 'comint-interrupt-subjob))

      (provide '+comint-bindings)
    #+END_SRC

** custom
   Mode definition for the customize interface.

   #+BEGIN_SRC emacs-lisp
     (use-package cus-edit
       :defer t
       :config
       (push 'Custom-mode whitespace-exempt-modes)
       (push 'customize-mode whitespace-exempt-modes)

       (evil-set-initial-state 'Custom-mode 'normal)

       (leader/set-keys-for-major-mode 'Custom-mode
         "SPC" 'customize-apropos
         "g" 'customize-group
         "f" 'customize-face
         "h" 'Custom-goto-parent
         "j" 'widget-forward
         "k" 'widget-backward
         "l" 'widget-forward)

       (general-define-key
         :states  'motion
         :keymaps 'custom-mode-map

         ;; motion
         "TAB"       'widget-forward
         "S-TAB"     'widget-backward
         "<backtab>" 'widget-backward

         "RET" 'Custom-newline

         "]]" 'widget-forward
         "[[" 'widget-backward

         "gh" 'Custom-goto-parent
         "gl" 'widget-forward

         "gj" 'widget-forward
         "gk" 'widget-backward

         ;; quit
         [remap quit-window] 'Custom-buffer-done))
   #+END_SRC

** dabbrev
   #+BEGIN_SRC emacs-lisp
     (general-define-key
      :prefix "C-x"
      [C-i] 'dabbrev-expand)
   #+END_SRC

** debugger
   #+BEGIN_SRC emacs-lisp
     (use-package debug
       :defer t
       :config
       (evil-set-initial-state 'debugger-mode 'motion)

       (general-define-key
        :keymaps 'debugger-mode-map
        [remap quit-window] 'debugger-quit))
   #+END_SRC

** diff
   Mode for showing diff/patch files.

   #+BEGIN_SRC emacs-lisp
     (use-package diff-mode
       :defer t
       :commands (diff-mode diff-buffer-with-file)
       :init
       (leader/with-prefix leader-diff-leader-prefix
         (leader/set-keys
           "" "diff"
           "SPC" 'diff-buffer-with-file))

       :config
       (push 'diff-mode whitespace-exempt-modes)

       (leader/set-keys-for-major-mode 'diff-mode
         "r" 'diff-refine-hunk
         "c" 'diff-kill-applied-hunks ;; clean displayed hunks only works on hunks below point.
         "k" 'diff-file-kill
         "f" 'next-error-follow-minor-mode
         "n" 'diff-restrict-view ;; narrow to hunk (or file with prefix)
         "s" 'diff-reverse-direction ;; doesn't do anything?
         "t" 'diff-test-hunk
         "e" 'diff-ediff-patch
         "u" 'diff-unified->context
         "d" 'diff-context->unified
         "l" 'diff-add-change-log-entries-other-window)

       (general-define-key
         :states  'motion
         :keymaps 'diff-mode-map
         "a" 'diff-apply-hunk ;; apply diff hunk to prompted file
         ;; NOTE prompts for file onto which diff is being applied
         "x" 'diff-hunk-kill
         "X" 'diff-file-kill
         "u" 'diff-undo
         "q" nil
         "s" 'diff-split-hunk
         "i" 'diff-ignore-whitespace-hunk

         "o" 'diff-goto-source
         "RET" 'diff-goto-source

         "C-j" 'diff-hunk-next
         "C-k" 'diff-hunk-prev
         "TAB"   'diff-file-next
         "S-TAB" 'diff-file-prev)

       (defun diff-kill-applied-hunks--ensure-all-hunks-killed (func &rest args)
         "`diff-kill-applied-hunks' doesn't kill any applied hunks above point :("
         (save-excursion
           (goto-char (point-min))
           (apply func args)))

       (advice-add 'diff-kill-applied-hunks :around #'diff-kill-applied-hunks--ensure-all-hunks-killed))
   #+END_SRC
** dired
   The built in (file-manager like) program for emacs. Think ls, but interactive and
   100 times better.

*** mode
    #+BEGIN_SRC emacs-lisp
      (use-package dired
        :straight (dired :type built-in)
        :defer t
        :config
        (push '(dired-mode . 1) +indent-config)

        (setq ls-lisp-dirs-first t
              ls-lisp-use-insert-directory-program t
              dired-listing-switches "-laXhv --group-directories-first"
              dired-auto-revert-buffer t
              dired-hide-details-hide-symlink-targets nil
              dired-recursive-copies t
              dired-recent-directories-file (var! "dired/recent.el"))

        (push 'dired-mode whitespace-exempt-modes)
        (require '+dired-bindings))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+dired-bindings.el
      (defun dired-goto-home-dir (&optional other-window)
        "goto users home directory
             with prefix, visits in another window"
        (interactive "P")
        (funcall (if other-window
                     'find-file-other-window
                   'find-file)
                 (expand-file-name "~")))

      (defun dired-evil-scroll-down ()
        (interactive)
        (call-interactively 'evil-scroll-down)
        (dired-move-to-filename))

      (defun dired-evil-scroll-up ()
        (interactive)
        (call-interactively 'evil-scroll-up)
        (dired-move-to-filename))

      (general-define-key
       :keymaps 'dired-mode-map
       ;; let map override any motion bindings
       "<override-state>" 'motion)

      (general-define-key
       :keymaps 'dired-mode-map
       :states  'motion
       "j" 'dired-next-line
       "k" 'dired-previous-line
       "~" 'dired-goto-home-dir
       "r" 'dired-do-redisplay
       "=" 'dired-diff
       "K" 'dired-do-kill-lines
       "'" 'dired-show-file-type ;; like file command
       "M" 'dired-unmark
       "u" 'dired-unmark
       "r" 'dired-change-marks
       "y" 'dired-copy-filename-as-kill

       "M-<return>" 'dired-display-file
       "C-M-<return>" 'dired-find-alternate-file
       "C-M-d" 'dired-kill-subdir

       "zc" 'dired-hide-subdir ;; collapse
       "zC" 'dired-hide-all

       ;; "|" 'dired-do-hardlink
       "|" 'dired-do-symlink
       "C-|" 'dired-do-relsymlink
       "M-|" 'dired-do-hardlink
       "M-!" 'dired-do-print ;; append names to end of command

       "C-S-J" 'dired-next-marked-file
       "C-S-K" 'dired-prev-marked-file
       "M-j" 'dired-next-dirline           ; unbound, dired-tree-down
       "M-k" 'dired-prev-dirline           ; unbound, dired-tree-up
       "C-d" 'dired-evil-scroll-down
       "C-u" 'dired-evil-scroll-up
       "C-h" 'dired-goto-min-subdir
       "C-j" 'dired-next-subdir
       "C-k" 'dired-prev-subdir
       "C-l" 'dired-goto-max-subdir)

      (leader/set-keys-for-major-mode 'dired-mode
        "?" 'dired-summary ;; like transient state
        "#" 'dired-clean-directory
        "o" 'browse-url-of-dired-file ;; open in external app
        "O" 'dired-omit-mode
        "v" 'dired-view-file          ;; TODO customize view mode
        "g" 'dired-goto-file ;; prompt for file to visit in current buffer
        "s" 'dired-sort-toggle-or-edit

        "r"  "rename"
        "ru" 'dired-upcase
        "rd" 'dired-downcase

        ;; flag means mark delete
        "d"  "delete"
        "d&" 'dired-flag-garbage-files
        "d~" 'dired-flag-backup-files
        "d/" 'dired-flag-files-regexp
        "d#" 'dired-flag-auto-save-files

        "m"  "mark"
        "mm" 'dired-toggle-marks
        "mu" 'dired-unmark
        "m DEL" 'dired-unmark-backward
        "ml" 'dired-mark-symlinks
        "md" 'dired-mark-directories
        "m!" 'dired-mark-executables
        "mt" 'dired-mark-subdir-files
        "mg" 'dired-mark-files-containing-regexp ;; grep
        "ms" 'dired-mark-files-regexp
        "m(" 'dired-mark-sexp

        ;; emacs related bindings
        "e"  "emacs"
        "ec" 'dired-do-byte-compile
        "el" 'dired-do-load
        "ef" 'dired-do-find-marked-files

        ;; change fs property commands
        "c"  "change"
        "cg" 'dired-do-chgrp
        "cm" 'dired-do-chmod
        "co" 'dired-do-chown

        ;; filesystem
        "f"  "filesystem"
        "fg" 'dired-do-find-regexp             ;; grep marked files
        "fs" 'dired-do-find-regexp-and-replace ;; substitute
        "fi" 'dired-info
        "fm" 'dired-man
        "fr" 'dired-do-run-mail
        "ft" 'dored-do-touch
        "fz" 'epa-dired-do-encrypt
        "fZ" 'epa-dired-do-encrypt-to ;; compress as

        ;; EasyPG/GPG
        "fp"  "GPG"
        "fpd" 'epa-dired-do-decrypt
        "fpe" 'epa-dired-do-encrypt
        "fps" 'epa-dired-do-sign
        "fpv" 'epa-dired-do-verify

        ;; operations bound to regexp search
        "f/"     "search"
        "f/c"    'dired-do-copy-regexp
        "f/r"    'dired-do-rename-regexp
        "f/h"    'dired-do-hardlink-regexp
        "f/s"    'dired-do-symlink-regexp
        "f/|"    'dired-do-symlink-regexp
        "f/ C-|" 'dired-do-relsymlink-regexp
        "f/ M-|" 'dired-do-hardlink-regexp)

      (general-unbind
        :keymaps 'dired-mode-map
        "#" "$" "%" "*" "." ":" "?" "~" "<" "=" ">" "a"
        "A" "B" "c" "C-M-d" "C-M-n" "C-M-p" "C-M-u" "C-o"
        "e" "f" "F" "g" "G" "h" "H" "I" "j" "k" "l" "L" "M"
        "M-$" "M-(" "M-{" "M-}" "M-DEL" "M-G" "n" "N" "O" "p"
        "P" "Q" "s" "SPC" "0" "S-SPC" "t" "T" "v" "V" "w" "W"
        "X" "y" "Y" "Z" "u")

      (provide '+dired-bindings)
    #+END_SRC

*** all-the-icons
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-dired
        :defer  t
        :ensure t
        :diminish "DiredIcons"
        :after all-the-icons
        :hook (dired-mode . all-the-icons-dired-mode)
        :config
        (add-hook 'all-the-icons-dired-mode-hook
                  (defun all-the-icons-dired-mode--setup-insert+ (&rest _)
                    (if (bound-and-true-p all-the-icons-dired-mode)
                        (advice-add 'dired-insert-subdir :around #'all-the-icons-dired--refresh-advice)
                      (advice-remove 'dired-insert-subdir #'all-the-icons-dired--refresh-advice)))))
    #+END_SRC

*** hide
    dired's file hiding functionality.

    #+BEGIN_SRC emacs-lisp
       (use-package dired-x
         :straight (dired-x :type built-in)
         :hook (dired-mode . dired-omit-mode)
         :config
         (setq dired-omit-files (rx (or
                                     ".#"
                                     (and bol
                                          (or "."
                                              ".."
                                              ".git"
                                              ".bundle"
                                              ".dired"
                                              "__pycache__"
                                              ".pytest_cache"
                                              ".gradle"
                                              ".sass-cache"
                                              ".jekyll-cache"
                                              "Pipfile")
                                          eol)))))
    #+END_SRC

*** dired-fl
    Extra font lock rules for dired; basically adds some more color to dired sessions.
    nice idea, but too much of a good thing can be bad.

    #+BEGIN_SRC emacs-lisp
      (use-package diredfl
        :only (package! diredfl)
        :ensure t
        :defer  t
        :hook (dired-mode . diredfl-mode))
    #+END_SRC

*** git-info
    show the last commit log for files in the current dired buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package dired-git-info
        :ensure t
        :defer  t
        :init
        (general-define-key
         :keymaps 'dired-mode-map
         :states  'motion
         ")" 'dired-git-info-mode))
    #+END_SRC

** image-dired
   #+BEGIN_SRC emacs-lisp
     (use-package image-dired
       :only (package! image-dired)
       :defer t
       :config
       (push 'image-dired-thumbnail-mode whitespace-exempt-modes)
       (require '+image-dired-bindings))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle lisp/+image-dired-bindings.el
     ;;; fixed weird moves line, not thumbnail
     (defun image-dired-slideshow-step ()
       "Step to next file, if `image-dired-slideshow-times' has not been reached."
       (if (< image-dired-slideshow-count image-dired-slideshow-times)
           (progn
             (message "%s" (1+ image-dired-slideshow-count))
             (setq image-dired-slideshow-count (1+ image-dired-slideshow-count))
             (image-dired-display-next-thumbnail-original))
         (image-dired-slideshow-stop)))

     (general-define-key
      :keymaps 'image-dired-thumbnail-mode-map
      :states '(normal visual)
      "q" nil

      "h" 'image-dired-backward-image
      "j" 'image-dired-next-line
      "k" 'image-dired-previous-line
      "l" 'image-dired-forward-image
      "<left>"  'image-dired-forward-image
      "<right>" 'image-dired-previous-image

      "x" 'image-dired-delete-char
      "m" 'image-dired-mark-thumb-original-file
      "u" 'image-dired-unmark-thumb-original-file
      "c" 'image-dired-comment-thumbnail
      "d" 'image-dired-flag-thumb-original-file
      "D" 'image-dired-thumbnail-set-image-description
      "s" 'image-dired-slideshow-start
      "t" 'image-dired-toggle-mark-thumb-original-file
      "gr" 'image-dired-refresh-thumb
      "gc" 'image-dired-create-thumbs
      "gg" (lambda! (evil-goto-first-line) (evil-beginning-of-line))
      "G"  (lambda! (goto-char (point-max)) (image-dired-backward-image))

      "C-s" 'image-save           ; NOTE originally was bound to o

      "<C-SPC>"    'image-dired-mark-thumb-original-file
      "<M-SPC>"    'image-dired-unmark-thumb-original-file

      "<C-return>" 'image-dired-display-current-image-full
      "<RET>"      'image-dired-display-thumbnail-original-image
      "C-l"        'image-dired-display-next-thumbnail-original
      "C-h"        'image-dired-display-previous-thumbnail-original
          ;;; column view aliases
      "J" 'image-dired-display-next-thumbnail-original
      "K" 'image-dired-display-previous-thumbnail-original
      ;; "o" 'image-dired-display-thumbnail-original-image
      "v" 'image-dired-display-thumbnail-original-image

      "<mouse-1>" 'image-dired-mouse-select-thumbnail
      "<mouse-2>" 'image-dired-mouse-display-image)

     (leader/set-keys-for-major-mode 'image-dired-thumbnail-mode
       "g" 'image-dired-jump-original-dired-buffer
       "m" 'image-dired

       "t"  "tagging"
       "td" 'image-dired-thumbnail-set-image-description
       "tt" 'image-dired-tag-thumbnail
       "tT" 'image-dired-tag-thumbnail-remove

       "e" "edit"
       "el" 'image-dired-rotate-thumbnail-left
       "eL" 'image-dired-rotate-original-left
       "er" 'image-dired-rotate-thumbnail-right
       "eR" 'image-dired-rotate-original-right

       "." 'image-dired-track-original-file
       "o" 'image-dired-thumbnail-display-external

       ;; [re]set number of columns per row
       "s" 'image-dired-line-up-interactive
       "S" 'image-dired-line-up-dynamic)

        ;;; image view
     (general-define-key
      :keymaps 'image-dired-display-image-mode-map
      :states 'normal
      "f" 'image-dired-display-current-image-full
      "F" 'image-dired-display-current-image-sized
      "s" 'image-dired-display-current-image-sized

      "h" 'image-scroll-right
      "l" 'image-scroll-left
      "k" 'image-scroll-down
      "j" 'image-scroll-up
      ;; horizontal line by line movement
      "C-d" 'image-scroll-up
      "C-u" 'image-scroll-down
      "C-e" 'image-next-line
      "C-y" 'image-previous-line
      ;; Arrow Keys Alias hjkl
      "<left>"  'image-backward-hscroll
      "<right>" 'image-forward-hscroll
      "<up>"    'image-scroll-down
      "<down>"  'image-scroll-up)

     (leader/set-keys-for-major-mode 'image-dired-display-image-mode
       "h" 'image-bol ; far left   edge
       "j" 'image-eob ; far bottom edge
       "k" 'image-bob ; far top    edge
       "l" 'image-eol ; far right  edge
       "g" 'image-dired-jump-thumbnail-buffer)
   #+END_SRC

** display-line-numbers
   #+BEGIN_SRC emacs-lisp
     (use-package display-line-numbers
       :defer t
       :hook ((prog-mode . display-line-numbers-mode)
              (text-mode . display-line-numbers-mode))
       :config
       ;; prefer relative line numbers when available
       (setq-default display-line-numbers-type 'relative))
   #+END_SRC

** ediff
   The builtin interactive diff tool.

     #+BEGIN_SRC emacs-lisp
       (use-package ediff
         :if (package! ediff)
         :defer t
         :commands (ediff-current-file
                    ediff-buffers
                    ediff-windows
                    ediff-files
                    ediff-backup
                    ediff-files3
                    ediff-directories
                    ediff-directories3
                    ediff-regions-linewise
                    ediff-regions-wordwise
                    ediff-patch-file
                    ediff-merge-files
                    ediff-merge-buffers
                    ediff-merge-directories

                    ;; unbound by default
                    ediff-show-registry ;; ido-choose-ediff-session
                    ediff-toggle-multiframe
                    ediff-toggle-use-toolbar
                    ediff-revert-buffers-then-recompute-diffs
                    ediff-profile)
         :init
         (leader/with-prefix leader-diff-leader-prefix
           (leader/set-keys
             "f" 'ediff-current-file
             "b" 'ediff-buffers
             "w" 'ediff-windows))

         :config
         (push 'ediff-meta-mode whitespace-exempt-modes)

         (setq-default ediff-window-setup-function       'ediff-setup-windows-plain
                       ediff-split-window-function       'split-window-horizontally
                       ediff-merge-split-window-function 'split-window-horizontally
                       ;; ediff-keep-variants               nil ;; doesn't do anything :(
                       )

         (defvar ediff-kill-temporary-buffers-on-exit+ t
           "whether to keep temporary ediff buffers around")

         (require 'outline)
         ;; show org ediffs unfolded
         (add-hook 'ediff-prepare-buffer-hook #'outline-show-all)

         ;; ensure window configuration is restored after diff quit
         (let* ((ediff-window-register ?w)
                (register-active (lambda () (cdr (assoc ediff-window-register register-alist)))))
           (defun ediff--restore-windows-before (&rest args)
             ;; (message "setting up")
             (unless (funcall register-active)
               ;; (message "assigning to register")
               (window-configuration-to-register ediff-window-register)))
           (add-hook 'ediff-before-setup-hook #'ediff--restore-windows-before)

           (defun ediff--restore-windows-after (&rest args)
             (if (not (funcall register-active))
                 (message "ediff-restore-windows : no previous window config found to restore")
               (jump-to-register ediff-window-register)
               (set-register ediff-window-register nil)))
           (add-hook 'ediff-quit-hook #'ediff--restore-windows-after))

         (defun ediff--kill-ediff-temp-buffers (&rest args)
           "kills all the spawned ediff buffers... because
       there's way too many and their named so similairly that
       there's no point in them existing... Plus I keep ending
       up editing the wrong diffed buffer."
           (when ediff-kill-temporary-buffers-on-exit+
             ;; kill diff checking buffers when temporary
             (dolist (buffer (list ediff-buffer-A
                                   ediff-buffer-B
                                   ediff-buffer-C))
               (when (and buffer
                          (string-prefix-p "FILE=" (buffer-name buffer)))
                 (kill-buffer buffer)))

             ;; kill any hardcoded ediff related buffers
             (dolist (buffer '("*Ediff Registry*"))
               (let ((buffer (get-buffer buffer)))
                 (when buffer
                   (kill-buffer buffer))))

             ;; kill any uniquely named ediff buffers...
             ;; Ewwww... O(n*m)... how do I live with myself
             (dolist (buffer-prefix '("*Ediff Control Panel"
                                      "*ediff-diff"
                                      "*ediff-errors"
                                      "*ediff-fine-diff"))
               (let ((buffer-prefix-regexp (regexp-quote buffer-prefix)))
                 (dolist (buffer (buffer-list))
                   (when (string-match buffer-prefix-regexp
                                       (buffer-name buffer))
                     (kill-buffer buffer)))))))

         (add-hook 'ediff-quit-hook #'ediff--kill-ediff-temp-buffers)

         (defun ediff--customize-ediff-mode-map (&rest args)
           "give me back my leader keys damn it :P"
           (general-define-key
            :keymaps 'ediff-mode-map
            :states  'motion
            "SPC" leader-map))

         (add-hook 'ediff-keymap-setup-hook #'ediff--customize-ediff-mode-map)
         ;; (evil-set-initial-state 'ediff-meta-mode 'motion)

         ;; (general-define-key
         ;;   :states 'motion
         ;;   :keymaps 'ediff-meta-buffer-map
         ;;   "C-j" 'ediff-next-meta-item
         ;;   "C-k" 'ediff-previous-meta-item
         ;;   "q" 'ediff-quit-meta-buffer
         ;;   "o" 'ediff-registry-action
         ;;   "=" 'ediff-meta-mark-equal-files
         ;;   "RET" 'ediff-registry-action
         ;;   "R" 'ediff-show-registry
         ;;   "S-RET" 'ediff-show-meta-buff-from-registry
         ;;   "?" 'ediff-toggle-verbose-help-meta-buffer)

         (leader/set-keys-for-major-mode 'ediff-meta-mode
           "tf" 'ediff-toggle-filename-truncation
           "tv" 'ediff-toggle-verbose-help-meta-buffer)

         (use-package evil-ediff
           :ensure t
           :defer  nil
           :commands (evil-ediff-init)
           :init
           (evil-ediff-init)))
     #+END_SRC

** eldoc
   That package that displays help messages in the minibuffer.

   #+BEGIN_SRC emacs-lisp
     (use-package eldoc :delight "")
   #+END_SRC

** electric-pair
   Electric pair is a built in module which lets auto insert matching pairs. For example,
   inserting a ( will lead to emacs auto inserting ).

   #+BEGIN_SRC emacs-lisp
     (use-package elec-pair
       :hook ((prog-mode . electric-pair-mode)
              (text-mode . electric-pair-mode))
       :commands electric-pair-mode
       :config
       (setq electric-pair-preserve-balance nil
             electric-pair-skip-whitespace  nil)

       (electric-pair-mode 1))
   #+END_SRC

** electric-indent
   #+BEGIN_SRC emacs-lisp
     (use-package electric
       :commands electric-indent-mode
       :hook ((text-mode . electric-indent-mode)
              (prog-mode . electric-indent-mode)))
   #+END_SRC

** finder-mode
   #+BEGIN_SRC emacs-lisp
     (use-package finder
       :defer t
       :config
       (general-define-key
         :keymaps 'finder-mode-map
         "SPC" 'nil
         "?"   'nil
         [override-state] 'motion)

       (leader/set-keys-for-major-mode 'finder-mode
         "?" 'finder-summary))
   #+END_SRC

** flymake
   eglot forces flymake to activate and it takes up space while displaying the exact
   same information as flycheck, so just hide it's presence in my modeline. Maybe I
   should consider switching to it, flycheck seems to have more features tho :confused:.

   #+BEGIN_SRC emacs-lisp
     (use-package flymake
       :diminish flymake-mode
       :init
       (leader/set-keys
         "ej" 'flymake-goto-next-error
         "ek" 'flymake-goto-prev-error)

       :config
       (general-define-key
        :keymaps 'flymake-mode-map
        [remap flycheck-list-errors] 'flymake-show-diagnostics-buffer
        [remap flycheck-buffer] 'flymake-start)

       (general-define-key
        :keymaps 'flymake-diagnostics-buffer-mode-map
        :states 'motion
        "RET" 'flymake-goto-diagnostic
        "o" 'flymake-show-diagnostic))
   #+END_SRC

** flyspell
   On the fly spell checker. Spawns an aspell subprocess and passes any words you write
   to it; any mispellings or unknown words will be highlighted to indicate they're mispelled.

   TODO try spell-fu

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :init
       (evil-ex-define-cmd "spell" #'flyspell-buffer)

       :config
       ;; I've only tested this on window/cygwin but aspell appears to be quite broken :P
       ;;   * I can't specify a path to any directory not within my home directory.
       ;;   * I can't specify any absolute path, even when that path is within my home directory.
       ;;   * If I want to reference a file in a subdirectory of my home directory, the
       ;;     path must begin with a slash.
       ;; THIS IS WAY TOO UNINTUITIVE.
       (setq ispell-personal-dictionary
             (file-relative-name (etc! "/ispell/dict.txt") "~"))

       (leader/with-prefix leader-minor-mode-leader-prefix
         (leader/set-keys-for-mode 'flyspell-mode
           "."  'hydra-flyspell/body
           "cb" 'flyspell-buffer
           "cr" 'flyspell-region
           "cw" 'flyspell-word)))
   #+END_SRC

*** ispell
   #+BEGIN_SRC emacs-lisp
     (use-package ispell
       :defer t
       :config
       (defun ispell--prevent-absolute-path (func &rest args)
         (cl-letf (((symbol-function 'expand-file-name)
                    (lambda (_) _)))
           (apply func args)))

       (advice-add 'ispell-internal-change-dictionary :around
                   #'ispell--prevent-absolute-path)
       (advice-add 'flyspell-large-region :around
                   #'ispell--prevent-absolute-path))
   #+END_SRC

** grep
   emacs mode for interacting with output from the grep executeable.

   #+BEGIN_SRC emacs-lisp
     (use-package grep
       :defer t
       :config
       (+set-compilation-bindings 'grep-mode 'grep-mode-map))
   #+END_SRC

** help
   #+BEGIN_SRC emacs-lisp
     (use-package help
       :config
       ;; once was enough, stop repeating the same message please :P
       (advice-add 'help-window-display-message :around #'ignore))
   #+END_SRC

** hl-line
   apply a different background face to the current line.

   #+BEGIN_SRC emacs-lisp
     (use-package hl-line
       :hook ((prog-mode . hl-line-mode)
              (text-mode . hl-line-mode)))
   #+END_SRC

** ibuffer
*** ibuffer
    #+BEGIN_SRC emacs-lisp
      (use-package ibuffer
        :only (package! ibuffer)
        :defer t
        :hook (ibuffer-mode . hl-line-mode)
        :init
        (leader/set-keys
          "bm" 'ibuffer)

        :config
        (defvar ibuffer-show-buffer-icons nil
          "whether to show icons alongside the buffer")

        (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))
              ibuffer-title-face '(:inherit (font-lock-type-face)))

        (evil-set-initial-state 'ibuffer-mode 'motion)

        (leader/set-keys-for-major-mode 'ibuffer-mode
          ;; unbound:
          ;;  * ibuffer-do-print
          "RET" 'ibuffer-do-view-horizontally
          "1"   'ibuffer-visit-buffer-1-window
          "+"   'ibuffer-add-to-tmp-show
          "-"   'ibuffer-add-to-tmp-hide
          "."   'hydra-ibuffer/body

          "A"   'ibuffer-auto-mode
          "E"   'ibuffer-do-view-and-eval
          "e"   'ibuffer-do-eval
          "R"   'ibuffer-redisplay
          "r"   'ibuffer-do-rename-uniquely
          "S"   'ibuffer-do-query-replace
          "s"   'ibuffer-do-save
          ;; "s"   'ibuffer-do-replace-regexp
          "T"   'ibuffer-visit-tags-table
          "F"   'ibuffer-find-file
          "X"   'ibuffer-kill-filter-group
          "P"   'ibuffer-yank-filter-group
          "x"   'ibuffer-kill-line
          "p"   'ibuffer-yank
          "|"   'ibuffer-do-shell-command-pipe-replace
          "~"   'ibuffer-do-toggle-modified

          "o"   'ibuffer-do-view
          "O"   'ibuffer-do-view-other-frame

          "g"   'ibuffer-jump-to-buffer
          "b"   'ibuffer-jump-to-filter-group

          "m"  "mark"
          "m*" 'ibuffer-mark-modified-buffers
          "m%" 'ibuffer-mark-read-only-buffers
          "mm" 'ibuffer-toggle-marks
          "mf" 'ibuffer-mark-by-name-regexp
          "mf" 'ibuffer-mark-by-file-name-regexp
          "mo" 'ibuffer-mark-old-buffers
          "ml" 'ibuffer-mark-by-locked
          "mb" 'ibuffer-mark-by-content-regexp
          "mM" 'ibuffer-mark-by-mode-regexp
          "md" 'ibuffer-mark-dired-buffers
          "mh" 'ibuffer-mark-help-buffers
          "mn" 'ibuffer-mark-dissociated-buffers
          "mN" 'ibuffer-mark-unsaved-buffers
          "ms" 'ibuffer-mark-special-buffers
          "mz" 'ibuffer-mark-compressed-file-buffers)

        (general-unbind
          :keymaps 'ibuffer-mode-map
          "+" "-" "0" "f" "SPC" "S-SPC" ">" "<" "?" "h" "X" "F" "C-d" "C-t"
          "b" "n" "g" "p" "w" "s" "`" "," "*" "/" "A" "C-c" "C-x" "M-s" "M-g"
          "M-n" "M-p" "M-{" "M-}" "M-o" "M-DEL" "%")

        (general-define-key
          :keymaps 'ibuffer-mode-map
          :states  'motion
          ;; ibuffer-kill-line
          ;; ibuffer-do-kill-lines
          ;; ibuffer-do-revert
          ;; ibuffer-do-isearch
          ;; ibuffer-do-isearch-regexp

          "TAB"       'ibuffer-forward-filter-group
          "<S-tab>"   'ibuffer-backward-filter-group
          "<backtab>" 'ibuffer-backward-filter-group

          ;; "D" 'ibuffer-mark-for-delete-backwards
          "D" 'ibuffer-do-delete
          "M" 'ibuffer-do-toggle-modified
          "=" 'ibuffer-diff-with-file
          "O" 'ibuffer-do-occur
          "R" 'ibuffer-do-toggle-read-only

          "RET"   'ibuffer-visit-buffer
          "o"     'ibuffer-visit-buffer-other-window
          "M-RET" 'ibuffer-visit-buffer-other-window-noselect
          "S-DEL" 'ibuffer-bury-buffer

          [remap revert-buffer] 'ibuffer-update
          "gu"                  'ibuffer-do-revert
          "gw"                  'ibuffer-do-save

          ;;; marking
          "m" 'ibuffer-mark-forward
          "r" 'ibuffer-change-marks

          ;;; sorting
          "S"  'ibuffer-toggle-sorting-mode
          "sa" 'ibuffer-do-sort-by-alphabetic
          "sf" 'ibuffer-do-sort-by-filename/process
          "si" 'ibuffer-invert-sorting
          "s SPC" 'ibuffer-invert-sorting
          "sm" 'ibuffer-do-sort-by-major-mode
          "ss" 'ibuffer-do-sort-by-size
          "sr" 'ibuffer-do-sort-by-recency

          "("   'ibuffer-switch-format
          ;;; movement
          "C-j" 'ibuffer-forward-line
          "C-k" 'ibuffer-backward-line
          "gj"  'ibuffer-forward-next-marked
          "gk"  'ibuffer-backwards-next-marked

          "p"   'ibuffer-yank
          "C-y" 'ibuffer-yank
          "y"   'ibuffer-copy-buffername-as-kill)

        ;;; https://www.emacswiki.org/emacs/IbufferMode
        ;;  _                                                          _       _     _
        ;; | |__  _   _ _ __ ___   __ _ _ __        _ __ ___  __ _  __| | __ _| |__ | | ___
        ;; | '_ \| | | | '_ ` _ \ / _` | '_ \ _____| '__/ _ \/ _` |/ _` |/ _` | '_ \| |/ _ \
        ;; | | | | |_| | | | | | | (_| | | | |_____| | |  __/ (_| | (_| | (_| | |_) | |  __/
        ;; |_| |_|\__,_|_| |_| |_|\__,_|_| |_|     |_|  \___|\__,_|\__,_|\__,_|_.__/|_|\___|
        ;;

        (defun ibuffer--human-readable-file-sizes-to-bytes (string)
          "Convert a human-readable file size into bytes."
          ;; (interactive)
          (let ((decimal (string-to-number string)))
            (cond
             ((string-suffix-p "G" string t) (* 1000000000 decimal))
             ((string-suffix-p "M" string t) (* 1000000    decimal))
             ((string-suffix-p "K" string t) (* 1000       decimal))
             (t                                            decimal))))

        (defun ibuffer--bytes-to-human-readable-file-sizes (bytes)
          "Convert number of bytes to human-readable file size."
          ;; (interactive)
          (cond
           ((> bytes 1000000000) (format "%10.1fG" (/ bytes 1000000000.0)))
           ((> bytes 100000000)  (format "%10.0fM" (/ bytes 1000000.0)))
           ((> bytes 1000000)    (format "%10.1fM" (/ bytes 1000000.0)))
           ((> bytes 100000)     (format "%10.0fk" (/ bytes 1000.0)))
           ((> bytes 1000)       (format "%10.1fk" (/ bytes 1000.0)))
           (t                    (format "%10d"       bytes))))

        ;; Use human readable Size column instead of original one
        (define-ibuffer-column size-human-readable
          (:name "Size"
           :inline t
           :summarizer
           (lambda (column-strings)
             (let ((total 0))
               (dolist (string column-strings)
                 (setq total
                       ;; like, ewww ...
                       (+ (float (ibuffer--human-readable-file-sizes-to-bytes
                                  string))
                          total)))
               (ibuffer--bytes-to-human-readable-file-sizes total))))
          (ibuffer--bytes-to-human-readable-file-sizes (buffer-size)))

        ;; Source [[https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-ibuffer.el][seagle0128]]
        (define-ibuffer-column icon (:name "  ")
          (let ((icon (if (and (buffer-file-name)
                               (all-the-icons-auto-mode-match?))
                          (all-the-icons-icon-for-file
                           (file-name-nondirectory (buffer-file-name))
                           :v-adjust -0.05)
                        (all-the-icons-icon-for-mode major-mode :v-adjust -0.05))))
            (when (symbolp icon)
              (setq icon (all-the-icons-faicon "file-o"
                          :face 'all-the-icons-dsilver
                          :height 0.8 :v-adjust 0.0)))
            icon))

        (setq ibuffer-formats
              `((mark modified read-only locked
                      " "
                      ,@(when ibuffer-show-buffer-icons
                          (list '(icon 2 2 :left :elide)
                                 (propertize " " 'display `(space :align-to 8))))
                      (name 20 20 :left :elide)
                      " "
                      (size-human-readable 11 -1 :right)
                      " "
                      (mode 16 16 :left :elide)
                      " " filename-and-process)
                (mark " "
                      ,@(when ibuffer-show-buffer-icons
                          (list '(icon 2 2 :left :elide)
                                (propertize " " 'display `(space :align-to 8))))

                      (name 20 20)
                      " "
                      filename))))
    #+END_SRC

*** filters
    #+BEGIN_SRC emacs-lisp
      (use-package ibuf-ext
        :only (package! ibuffer)
        :commands (ibuffer-filter-by-directory-path
                   ibuffer-filter-by-client-buffers)
        :init
        (leader/with-prefix "f"
          (leader/set-keys-for-major-mode 'ibuffer-mode
            ""       "filter"
            "TAB"    'ibuffer-exchange-filters
            "RET"    'ibuffer-filter-by-mode
            "DEL"    'ibuffer-delete-saved-filters
            "M-DEL"  'ibuffer-delete-saved-filter-groups

            "!"      'ibuffer-negate-filter
            "&"      'ibuffer-and-filter
            "a"      'ibuffer-and-filter
            "|"      'ibuffer-or-filter
            "o"      'ibuffer-or-filter
            "-"      'ibuffer-exchange-filters
            "@"      'ibuffer-filter-by-client-buffers
            "*"      'ibuffer-filter-by-starred-name
            ","      'ibuffer-filter-by-used-mode
            "."      'ibuffer-filter-by-file-extension
            ">"      'ibuffer-filter-by-size-gt
            "<"      'ibuffer-filter-by-size-lt
            "b"      'ibuffer-filter-by-basename
            "c"      'ibuffer-filter-by-predicate
            "D"      'ibuffer-filter-by-directory-path
            "d"      'ibuffer-filter-by-directory ; regexp
            "f"      'ibuffer-filter-by-filename  ; regexp
            "e"      'ibuffer-filter-by-modified
            "M"      'ibuffer-filter-by-derived-mode
            "m"      'ibuffer-filter-by-used-mode
            "n"      'ibuffer-filter-by-name
            "s"      'ibuffer-filter-by-content
            "v"      'ibuffer-filter-by-visiting-file

            "g"      'ibuffer-filters-to-filter-group
            "("      'ibuffer-filters-to-filter-group

            "a"      'ibuffer-add-saved-filters
            "p"      'ibuffer-pop-filter
            "P"      'ibuffer-pop-filter-group
            "u"      'ibuffer-decompose-filter
            "U"      'ibuffer-decompose-filter-group
            "r"      'ibuffer-switch-to-saved-filters
            "R"      'ibuffer-switch-to-saved-filter-groups
            "w"      'ibuffer-save-filters
            "W"      'ibuffer-save-filter-groups
            "x"      'ibuffer-filter-disable
            "X"      'ibuffer-clear-filter-groups))

        :config
        (define-ibuffer-filter directory-path
            "Toggle current view to buffers with file or directory name matching QUALIFIER."
          (:description "filename"
           :reader (file-truename
                    (read-directory-name "List files from file/directory name: ")))
          (ibuffer-awhen (or (buffer-local-value 'buffer-file-name buf)
                             (buffer-local-value 'dired-directory buf))
            ;; (message "qual: %s, it: %s" qualifier (file-truename it))
            (string-prefix-p qualifier (file-truename it))))

        (define-ibuffer-filter client-buffers
            "only show buffers for which there're open emacsclient clients."
          (:description "emacsclient-buffers")
          (buffer-local-value 'server-buffer-clients buf)))
    #+END_SRC

*** vc
    #+BEGIN_SRC emacs-lisp
      (use-package ibuffer-vc
        :only (package! ibuffer ibuffer-vc)
        :ensure t
        :defer  t
        :after ibuffer
        :commands ibuffer-vc
        :init
        (general-define-key
         :keymaps 'ibuffer-mode-map
         "sv" 'ibuffer-vc
         ")" 'ibuffer-vc)

        :config
        (defalias 'ibuffer-vc #'ibuffer-vc-set-filter-groups-by-vc-root))
    #+END_SRC

*** tramp
    #+BEGIN_SRC emacs-lisp
      (use-package ibuffer-tramp
        :only (package! ibuffer ibuffer-tramp)
        :ensure t
        :defer  t
        :after ibuffer
        :commands (ibuffer-tramp)
        :init
        (general-define-key
         :keymaps 'ibuffer-mode-map
         "s@" 'ibuffer-tramp)

        :config
        (defalias 'ibuffer-tramp #'ibuffer-tramp-set-filter-groups-by-tramp-connection))
    #+END_SRC

*** persp
    #+BEGIN_SRC emacs-lisp
      (use-package ibuffer-persp
        :only (package! ibuffer-persp)
        :straight (ibuffer-persp :type built-in)
        :after ibuffer
        :defer t
        :commands (ibuffer-persp-current
                   ibuffer-persp-other)
        :init
        (general-define-key
         :keymaps 'ibuffer-mode-map
         "sp" 'ibuffer-persp-current
         "sP" 'ibuffer-persp-other)

        ;; (with-eval-after-load 'persp-mode
        ;;   (leader/set-keys "bm" 'ibuffer-persp))
        :config
        (defalias 'ibuffer-persp-current #'ibuffer-persp-set-filter-groups-by-persp-name-not-nil)
        (defalias 'ibuffer-persp-other #'ibuffer-persp-set-filter-groups-by-other-persp-name-not-nil))
    #+END_SRC

*** projectile
    #+BEGIN_SRC emacs-lisp
      (use-package ibuffer-projectile
        :only (package! ibuffer-projectile)
        :ensure t
        :defer  t
        :after ibuffer
        :commands (ibuffer-projectile-mode)
        ;; :hook (ibuffer-mode . ibuffer-projectile-mode)
        :config
        (setq ibuffer-projectile-prefix
              (if +icons-available
                  (concat
                   (all-the-icons-octicon "file-directory"
                                          :face ibuffer-filter-group-name-face
                                          :v-adjust -0.05)
                   " ")
                "Project: "))

        (defun ibuffer-projectile-hook (&rest _)
          (ibuffer-projectile-set-filter-groups))

        (define-minor-mode ibuffer-projectile-mode
          "Generate ibuffer filters for projectile projects."
          :lighter nil
          :global  t
          (if ibuffer-projectile-mode
              (progn
                (add-hook 'ibuffer-hook #'ibuffer-projectile-hook)
                (ibuffer-projectile-set-filter-groups))
            (remove-hook 'ibuffer-hook #'ibuffer-projectile-hook)

            (let ((ibuf (get-buffer "*Ibuffer*")))
              (when ibuf
                (with-current-buffer ibuf
                  (setq ibuffer-filter-groups
                        (seq-filter
                         (lambda (x)
                           (not (assoc 'projectile-root x)))
                         ibuffer-filter-groups))
                  (ibuffer-update nil t)))))))
    #+END_SRC

** imenu
   See (and jump to) key points of interest in the current buffer using your completion framework
   of choice.

   #+BEGIN_SRC emacs-lisp
     (use-package imenu
       :only (package! imenu)
       :defer t
       :commands (imenu-list
                  imenu-anywhere)
       :init
       (leader/set-keys
         "ji" 'imenu))
   #+END_SRC

*** list
    #+BEGIN_SRC emacs-lisp
      (use-package imenu-list
        :only (package! imenu)
        :ensure t
        :defer  t
        :init
        (leader/set-keys
          "jI" 'imenu-anywhere)

        :config
        (evil-set-initial-state 'imenu-list-major-mode 'motion)

        (general-define-key
         :states 'motion
         :keymaps 'imenu-list-major-mode-map
         "gr" 'imenu-list-refresh
         "o" 'imenu-list-display-entry))
    #+END_SRC

*** imenu-anywhere
    #+BEGIN_SRC emacs-lisp
      (use-package imenu-anywhere
        :only (package! imenu)
        :ensure t
        :defer  t
        :init
        (leader/set-keys
          "bi" 'imenu-list))
    #+END_SRC

** minibuffer
   #+BEGIN_SRC emacs-lisp
     (general-define-key
      :keymaps 'minibuffer-local-map
      "M-j" 'next-history-element
      "M-k" 'previous-history-element
      "C-j" 'previous-matching-history-element
      "C-k" 'next-matching-history-element
      "C-h" 'backward-char
      "C-l" (defun minibuffer-forward-char-or-exit ()
              (interactive)
              (call-interactively (if (eolp)
                                      'exit-minibuffer
                                    'forward-char)))

      "C-a" 'move-beginning-of-line
      "C-e" 'move-end-of-line
      "C-v" 'quoted-insert
      "C-M-q" 'quit-window
      "M-DEL" 'kill-whole-line

      ;; "M-n" nil
      ;; "M-p" nil
      ;; "M-r" nil
      "C-w" 'backward-kill-word
      "C-?" 'minibuffer-completion-help
      ;; for some reason.. I can't bind Meta keys
      "M-h" 'backward-kill-sentence
      "M-l" 'kill-sentence)

     (general-define-key
      :keymaps 'minibuffer-local-must-match-map
      "TAB" 'minibuffer-complete
      "<C-tab>" 'minibuffer-complete-and-exit
      "C-j" nil)

     (general-define-key
      :keymaps '(minibuffer-local-map
                 minibuffer-local-must-match-map
                 minibuffer-inactive-mode-map
                 minibuffer-local-ns-map
                 minibuffer-local-completion-map)
      "<escape>" 'abort-recursive-edit)
   #+END_SRC

    Some more sage advice from the demigods at [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][doom]].

    #+BEGIN_SRC emacs-lisp
      (defun defer-garbage-collection+ ()
        (setq gc-cons-threshold most-positive-fixnum))

      (defun restore-garbage-collection+ ()
        ;; Deferred so that commands launched immediately after will enjoy the
        ;; benefits.
        (run-at-time
         1 nil (lambda () (setq gc-cons-threshold default-gc-cons-threshold))))

      (add-hook 'minibuffer-setup-hook #'defer-garbage-collection+)
      (add-hook 'minibuffer-exit-hook #'restore-garbage-collection+)
    #+END_SRC

** macros
   emacs macro facilities configuration.

   #+BEGIN_SRC emacs-lisp
     (leader/set-keys
       "k"  "macros/lisp")

     ;; remove mode-line-indicator for macros
     (setq mode-line-defining-kbd-macro nil)
   #+END_SRC

*** kmacro
    #+BEGIN_SRC emacs-lisp
      (use-package kmacro
        :init
        (leader/with-prefix "k"
          (leader/set-keys
            ;; 'edit-kbd-macro ;; any named macro
            ;; 'apply-macro-to-region-lines
            "s" 'name-last-kbd-macro
            "i" 'insert-kbd-macro
            "q" 'kbd-macro-query ;; prompt at macro point

            "c"  "counter"
            "cs" 'kmacro-set-counter
            "c=" 'kmacro-set-counter
            "cc" 'kmacro-insert-counter
            "ci" 'kmacro-insert-counter
            "ca" 'kmacro-add-counter
            "c+" 'kmacro-add-counter
            "cf" 'kmacro-set-format)))
    #+END_SRC

*** edmacro
    #+BEGIN_SRC emacs-lisp
      (use-package edmacro
        :defer t
        :commands (edmacro-mode)
        :config
        (leader/with-prefix "k"
          (leader/set-keys
            ;; 'kmacro-edit-lossage ;; edit last 300 strokes as macro
            ;; 'kmacro-step-edit-macro ;; debug last macro
            "SPC" 'kmacro-edit-macro ;; last defined
            "b"   'kmacro-bind-to-key))

        :config
        (leader/set-keys-for-major-mode 'edmacro-mode
          "," 'edmacro-finish-edit
          "i" 'edmacro-insert-key))
    #+END_SRC

** occur
   See all occurences of a search query in the current buffer, with support to jumping
   to the next or previous query and even editing them on the fly.

   #+BEGIN_SRC emacs-lisp
     (use-package replace
       :straight (replace :type built-in)
       :defer t
       :config
       ;; occur-mode-display-occurrence
       (advice-add 'occur-mode-display-occurrence :around
                   #'restore-default-display-buffer-actions)

       (leader/set-keys-for-major-mode '(occur-mode occur-edit-mode)
         "e" 'occur-edit-mode
         "R" 'occur-rename-buffer
         "g" 'occur-mode-goto-occurrence
         "G" 'occur-mode-goto-occurrence-other-window
         "l" 'occur-mode-display-occurrence)

       (leader/set-keys-for-major-mode 'occur-edit-mode
         "," 'occur-cease-edit)

       (defun evil-adjust-occur-next ()
         (interactive)
         (with-evil-adjust-to-eol
           (funcall-interactively 'occur-next)))

       (defun evil-adjust-occur-prev ()
         (interactive)
         (with-evil-adjust-to-eol
           (funcall-interactively 'occur-prev)))

       (evil-set-initial-state 'occur-mode 'motion)
       (general-define-key
         :keymaps 'occur-mode-map
         :states  'motion
         ;; occur-mode-mouse-goto
         "RET" 'occur-mode-goto-occurrence
         "o" 'occur-mode-goto-occurrence-other-window
         "s" 'occur-mode-display-occurrence

         "j"  'evil-adjust-occur-next
         "k"  'evil-adjust-occur-prev
         "gj" 'evil-next-line
         "gk" 'evil-previous-line

         "R" 'occur-rename-buffer
         "q" nil)

       (evil-set-initial-state 'occur-edit-mode 'normal)
       (general-define-key
         :states  'normal
         :keymaps 'occur-edit-mode-map
         ;; occur-mode-mouse-goto
         "RET" 'occur-mode-goto-occurrence
         "go"  'occur-mode-goto-occurrence-other-window
         "gO"  'occur-mode-display-occurrence
         "j"   'evil-adjust-occur-next
         "k"   'evil-adjust-occur-prev
         [remap quit-window] 'occur-cease-edit))
   #+END_SRC

** outline-mode
   #+BEGIN_SRC emacs-lisp
     (use-package outline
       :defer t
       :config
       (advice-add 'outline-up-heading :around
                   (defun outline-up-heading--goto-current-first+ (func arg &optional invisible-ok)
                     "make `outline-up-heading' goto the current heading first
     unless already there."
                     (unless (outline-on-heading-p invisible-ok)
                       (outline-backward-same-level 0)
                       (when arg
                         (setq arg (if (> arg 0) (- arg 1) (+ arg 1)))))

                     (when arg
                       (apply func arg invisible-ok))))

       (defun outline-folded-p+ (&optional pos)
         (save-excursion
           (goto-char (line-end-position))
           (outline-invisible-p)))

       (defun outline-toggle-show-children+ ()
         (interactive)
         (if (outline-folded-p+)
             (outline-show-subtree)
           (outline-hide-subtree)))

       (general-define-key
        :states  'motion
        :keymaps 'outline-mode-map
        "gh" 'outline-up-heading
        "gj" 'outline-next-heading
        "gk" 'outline-previous-heading
        "gl" 'outline-forward-same-level)

       (general-define-key
        :states  'motion
        :keymaps 'outline-mode-map
        :predicate '(outline-on-heading-p)
        [remap evil-shift-right] 'outline-demote
        [remap evil-shift-left]  'outline-promote
        [remap drag-stuff-down]  'outline-move-subtree-down
        [remap drag-stuff-up]    'outline-move-subtree-up
        "TAB"   'outline-toggle-show-children+
        "<tab>" 'outline-toggle-show-children+)

       (leader/set-keys-for-major-mode 'outline-mode
         "m" 'outline-mark-subtree
         "t" 'outline-hide-body ;; show subtree
         "a" 'outline-show-all
         ;; only show outline upto this level.
         "h" 'outline-hide-sublevels
         "l" 'outline-show-branches
         "f" 'outline-hide-other ;; focus
         ;; show remainder of branches in current hidden branch.
         "q" 'outline-show-branches
         "RET" 'outline-insert-heading))
   #+END_SRC

** package
   #+BEGIN_SRC emacs-lisp
     (use-package package
       :defer t
       :config
       (evil-set-initial-state 'package-menu-mode 'motion)

       (general-define-key
         :keymaps 'package-menu-mode-map
         :states  'motion
         "TAB" 'forward-button
         "<backtab>" 'backward-button
         "RET" 'package-menu-describe-package
         "DEL" 'package-menu-backup-unmark
         "("   'package-menu-toggle-hiding
         "S"   'tabulated-list-sort
         "U"   'package-menu-mark-upgrades
         "d"   'package-menu-mark-delete
         "i"   'package-menu-mark-install
         "u"   'package-menu-mark-unmark
         "x"   'package-menu-execute
         "q"   nil
         "~"   'package-menu-mark-obsolete-for-deletion
         "gr"  'package-menu-refresh)

       (leader/set-keys-for-major-mode 'package-menu-mode
         "h" 'package-menu-hide-package
         "?" 'package-menu-quick-help
         "/" 'package-menu-filter

         "m"  "mark"
         "m~" 'package-menu-mark-obsolete-for-deletion
         "mu" 'package-menu-mark-unmark
         "mi" 'package-menu-mark-install
         "mu" 'package-menu-mark-upgrades
         "md" 'package-menu-mark-delete))
   #+END_SRC

** paren
   when your point is on a parenthesis, highlight the matching one.

   # TODO look into smart-parens-mode

   #+BEGIN_SRC emacs-lisp
     (use-package paren
       :hook ((prog-mode . show-paren-mode)
              (text-mode . show-paren-mode))
       :init (setq sp-highlight-pair-overlay nil))
   #+END_SRC

** pp
   #+BEGIN_SRC emacs-lisp
     (use-package pp
       :defer t
       :init
       (leader/with-prefix "k"
         (leader/set-keys
           "m" 'pp-macroexpand-last-sexp
           "M" 'pp-macroexpand-expression
           "x" 'pp-eval-last-sexp
           "X" 'pp-eval-expression))

       (with-eval-after-load 'elisp-mode
         (leader/set-keys-for-major-mode '(emacs-lisp-mode
                                           lisp-interaction-mode)
           "eM" 'pp-macroexpand-expression
           "em" 'pp-macroexpand-last-sexp
           "ex" 'pp-eval-last-sexp
           "eX" 'pp-eval-expression)))
   #+END_SRC

** proced
   edit processes, like windows task-manager but within emacs :)

   #+BEGIN_SRC emacs-lisp
     (use-package proced
       :config
       (evil-set-initial-state 'proced-mode 'motion)

       (leader/set-keys-for-major-mode 'proced-mode
         "m"  "mark"
         "ma" 'proced-mark-all
         "mu" 'proced-unmark-all
         "mp" 'proced-mark-parents
         "mc" 'proced-mark-children
         "mt" 'proced-toggle-marks
         "mm" 'proced-toggle-marks

         "k" 'proced-send-signal)

       (general-define-key
         :states  'motion
         :keymaps 'proced-mode-map

         "q"      nil
         "C-?"    'proced-help

         "SPC" 'proced-mark
         "DEL" 'proced-unmark-backward
         "a" 'proced-mark
         "A" 'proced-mark-all
         "u" 'proced-unmark
         "U" 'proced-unmark-all
         "p" 'proced-mark-parents
         "P" 'proced-mark-children
         "M" 'proced-toggle-marks

         "x"   'proced-send-signal
         "C-k" 'proced-send-signal

         "M-SPC" 'proced-toggle-tree

         "r" 'proced-refine
         "R" 'proced-renice

         "o" 'proced-omit-processes ;; marked

         "C-M-SPC" 'proced-format-interactive

         "sS" 'proced-sort-interactive
         "sc" 'proced-sort-pcpu
         "sm" 'proced-sort-pmem
         "sp" 'proced-sort-pid
         "ss" 'proced-sort-start
         "st" 'proced-sort-time
         "su" 'proced-sort-user
         "S"  'proced-filter-interactive))
   #+END_SRC

** process-menu
   #+BEGIN_SRC emacs-lisp
     (use-package simple
       :defer t
       :config
       (evil-set-initial-state 'process-menu-mode 'motion)

       (general-define-key
         :states  'motion
         :keymaps 'process-menu-mode-map
         "d" 'process-menu-delete-process
         "x" 'process-menu-delete-process

         "TAB"   'forward-button
         "S-TAB" 'backward-button
         "gj"    'forward-button
         "gk"    'backward-button))
   #+END_SRC

** re-builder
   #+BEGIN_SRC emacs-lisp
     (use-package re-builder
       :config
       (setq reb-re-syntax 'rx)
       ;; (evil-set-initial-state 'reb-lisp-mode 'insert)

       (general-define-key
        :keymaps 'reb-lisp-mode-map
        :states 'normal
        "gj" 'reb-next-match
        "gk" 'reb-prev-match
        [remap quit-window] 'reb-quit)

       (defun reb-save-and-quit+ ()
         "copy regexp and then exit reb."
         (interactive)
         (reb-copy)
         (reb-quit))

       (leader/set-keys-for-major-mode 'reb-lisp-mode
         "," 'reb-save-and-quit+
         "s" 'reb-copy ;; as string
         "q" 'reb-quit

         "b" 'reb-change-target-buffer
         "c" 'reb-toggle-case
         "y" 'reb-copy ;; as string
         "u" 'reb-force-update
         "s" 'reb-enter-subexp-mode
         "TAB" 'reb-change-syntax))
   #+END_SRC

** replace
   #+BEGIN_SRC emacs-lisp
     (use-package replace
       :defer t
       :config
       (dolist (func '(perform-replace
                       query-replace))
         (advice-add func :around
                     #'restore-default-display-buffer-actions)))
   #+END_SRC

** save-place
   Remembers the cursor position in open files... so when I reopen them I'm taken to that point
   immeadiately.

   #+BEGIN_SRC emacs-lisp
     (if (emacs>= "25.1")
         (save-place-mode +1)
       (require 'saveplace)
       (setq-default save-place t))

     (setq save-place-forget-unreadable-files nil
           save-place-version-control 'nospecial
           save-place-file (eval-when-compile
                             (let ((save-dir (var! "save-place")))
                               (unless (file-directory-p save-dir)
                                 (mkdir save-dir t))

                               (join-path save-dir "places.el")))

           save-place-ignore-files-regexp (rx
                                           (or "COMMIT_EDITMSG"
                                               "svn-commit"
                                               (and "hg-editor-" (one-or-more num))
                                               (and (or ".txt" ".tmp") eol)
                                               (and bol (or "/tmp/"))
                                               (and "bzr_log." (one-or-more num)))))
   #+END_SRC

** server
   #+BEGIN_SRC emacs-lisp
     (use-package server
       :demand t
       :config
       ;; see [[http://emacshorrors.com/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html][emacs-horrors]] for why this is sometimes useless :(
       (when (windows-p)
         (or (server-running-p)
             (server-start)))

       (advice-add 'server-edit :before
                   (defun server-edit--auto-save-on-exit (&rest args)
                     "automatically save file before server exit"
                     (save-buffer)))

       (leader/with-major-mode-prefix
         (leader/set-keys-for-mode 'server-edit-mode+
           "," 'server-edit
           "q" 'server-abort)))
   #+END_SRC

*** commands
    #+BEGIN_SRC emacs-lisp
      (use-package +server-commands
        :commands (find-client-buffer
                   server-abort
                   toggle-client-headers
                   toggle-client-headers-local
                   server-edit-mode+)
        :init
        (leader/set-keys
          "t1" 'toggle-client-headers
          "t2" 'toggle-client-headers-local
          "fes" 'find-client-buffer)

        (defvar server-edit-ignore-modes+
          '(with-editor-mode)
          "modes (minor or major) in which `server-edit-mode+' is disabled.")

        (add-hook 'server-switch-hook
                  (lambda ()
                    (when server-buffer-clients
                      (unless (or (apply #'derived-mode-p
                                         server-edit-ignore-modes+)
                                  (cl-some (lambda (mode)
                                             (and (boundp mode)
                                                  (eval mode)))
                                           server-edit-ignore-modes+))
                        (server-edit-mode+ +1)))))

        (add-hook 'server-done-hook
                  (lambda ()
                    (server-edit-mode+ -1))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+server-commands.el
      (defun find-client-buffer ()
        (interactive)
        (switch-to-buffer
         (read-buffer "Client buffers: " nil t
                      (lambda (b)
                        (with-current-buffer (cdr b)
                          server-buffer-clients)))))

      ;; see [[https://superuser.com/questions/295156/how-to-set-the-exit-status-for-emacsclienti][here]].
      (defun server-abort (&optional prefix)
        "Sends error exit command to every client for the current buffer."
        (interactive "P")
        (if (not server-buffer-clients)
            (error "current buffer has no server clients")
          (dolist (proc server-buffer-clients)
            (server-send-string proc "-error die"))
          (unless prefix (kill-buffer))))

      ;; add ,, and ,q like bindings in server edit sessions, like org-edit-src-code
      (define-minor-mode server-edit-mode+
        "a dummy minor mode for files being edited by `server'.
      makes it easier to bind keys (& leaders :grinning: for them)."
        nil
        "ServerEdit"
        '(;; ([remap evil-write] . server-edit)
          ([remap evil-save-and-close] . server-edit)
          ([remap evil-quit-all-with-error-code] . server-abort)))

      (provide '+server-commands)
    #+END_SRC

** simple
   #+BEGIN_SRC emacs-lisp
     (use-package simple
       :init
       (leader/set-keys
         "i TAB"       "indent"
         "i TAB TAB" 'indent-region
         "i TAB RET" 'split-line
         "i TAB SPC" 'just-one-space
         "i TAB c"   'indent-to-column
         "i TAB r"   'indent-relative
         "i TAB 0"   'indent-relative-first-indent-point
         "i TAB ."   'hydra-indent/body
         "i TAB n"   'forward-to-indentation
         "i TAB p"   'back-to-indentation)

       :config
       (push 'messages-buffer-mode whitespace-exempt-modes)

       (general-define-key
         :keymaps 'completion-list-mode-map
         :states  'motion
         "RET" 'choose-completion
         "C-j" 'choose-completion

         "q" nil
         "Q" 'delete-completion-window

         "j" 'next-completion
         "k" 'previous-completion
         "n" 'next-completion
         "p" 'previous-completion
         "N" 'previous-completion))
   #+END_SRC

** shell
   #+BEGIN_SRC emacs-lisp
     (evil-set-initial-state 'shell-mode 'emacs)
   #+END_SRC

** eshell
   #+BEGIN_SRC emacs-lisp
     (use-package esh-mode
       :only (package! eshell)
       :straight (esh-mode :type built-in)
       :defer t
       :hook (
              ;;; doesn't persist on window change... boo!!!
              ;; (eshell-mode . (setq-local cursor-type 'bar))
              ;;; disable company-mode in eshell-mode
              (eshell-mode . (lambda () (company-mode -1))))
       :init
       (leader/set-keys ":" 'eshell-command)

       :config
       (evil-set-initial-state 'eshell-mode 'emacs)

       ;; don't auto scroll to bottom after execution
       (remove-hook 'eshell-output-filter-functions
                    'eshell-postoutput-scroll-to-bottom)

       ;; clear shouldn't scroll back to bottom of the screen
       (advice-add 'eshell/clear :after #'recenter-top-bottom)

       (setq eshell-banner-message "") ;; no banner

       (defun eshell-backward-kill-word ()
         (interactive)
         (let ((bol
                (save-excursion
                  (eshell-bol)))
               (beginning-word-point
                (save-excursion
                  (backward-word)
                  (point))))
           (when (>= beginning-word-point bol)
             (call-interactively 'backward-kill-word))))

       (leader/set-keys-for-major-mode 'eshell-mode
         "o"   'eshell-show-output
         "O"   'eshell-mark-output
         "TAB" 'counsel-esh-history
         "RET" 'eshell-queue-input

         "i"  "insert"
         "ib" 'eshell-insert-buffer-name
         "ip" 'eshell-insert-process
         "ie" 'eshell-insert-envvar

         "k"  "kill/signal"
         "kz" 'eshell-send-eof-to-process
         "kc" 'eshell-interrupt-process
         "kq" 'eshell-quit-process)

       (defun eshell-mode--setup-bindings ()
         (general-define-key
           :keymaps 'eshell-mode-map
           ;;; movement commands
           "C-e"   'end-of-line
           "M-l"   'recenter-top-bottom
           "C-h"   'backward-char
           "C-l"   'forward-char
           "C-M-h" 'backward-word
           "C-M-l" 'forward-word
           ;;; scroll commands
           "<S-down>" 'evil-scroll-down
           "<S-up>"   'evil-scroll-up
           ;; move to beginning of output
           ;; or return to end of cursor
           "M-a" 'eshell-show-output
           "M-e" 'eshell-show-maximum-output

           ;;; signals
           "C-c C-z" 'eshell-send-eof-to-process
           "C-c C-q" 'eshell-quit-process
           "M-c"     'eshell-interrupt-process
           "M-z"     'eshell-send-eof-to-process
           "M-q"     'eshell-quit-process

           "C-s"   'counsel-esh-history
           "M-SPC" 'counsel-esh-history

           "M-y"           'eshell-repeat-argument
           "C-d"           'eshell-kill-input
           "C-M-k"         'eshell-kill-input
           "M-d"           'eshell-kill-output
           "C-w"           'eshell-backward-kill-word
           "<C-backspace>" 'evil-delete-backward-word
           ;; copy entered input back into current line
           "<C-return>"    'eshell-copy-old-input

           "C-j"       'eshell-next-input
           "C-k"       'eshell-previous-input
           "M-j"       'eshell-next-prompt
           "M-k"       'eshell-previous-prompt
           ;; reverse the default affect of up and down
           "<up>"      'eshell-previous-input
           "<down>"    'eshell-next-input
           "<C-up>"    'eshell-previous-matching-input-from-input
           "<C-down>"  'eshell-next-matching-input-from-input
           "<S-left>"  'eshell-backward-argument
           "<S-right>" 'eshell-forward-argument
           "<M-left>"  'eshell-backward-argument
           "<M-right>" 'eshell-forward-argument))

       ;; needs to be in a hook because eshell-mode-map isn't
       ;; defined until the mode is activated, and even then
       ;; it's only buffer-local :(.
       (add-hook 'eshell-mode-hook #'eshell-mode--setup-bindings))
   #+END_SRC

*** eshell-prompt-extras
    #+BEGIN_SRC emacs-lisp
      (use-package eshell-prompt-extras
        :only (package! eshell)
        :ensure t
        :defer  t
        :after esh-mode
        :init
        (setq epe-show-python-info t
              epe-path-style 'full)

        (defvar eshell-prompt--enable-git-on-remote-files t
          "when true, show branch info even on remote files")

        (defun epe-git-p ()
          "If you installed git and in a git project."
          (when (or eshell-prompt--enable-git-on-remote-files
                    ;; either enable everywhere, including remote
                    ;; or enable when not remote
                    (not (epe-remote-p)))
            (and (eshell-search-path "git")
                 (vc-find-root (eshell/pwd) ".git"))))

        (setq eshell-prompt-function #'epe-theme-lambda))

      (provide '+init-eshell-prompt-extras)
    #+END_SRC

** smerge
   minor mode in buffers that have git merge issues; it highlights diff indicators
   and offers methods to quickly jump from them.

   #+BEGIN_SRC emacs-lisp
     (use-package smerge-mode
       :defer t
       :init
       (leader/set-keys
         "gi" 'smerge-mode)

       :config
       (leader/with-prefix "g"
         (leader/set-keys-for-mode 'smerge-mode
           "j" 'smerge-next
           "k" 'smerge-prev
           "c" 'smerge-keep-current
           "m" 'smerge-keep-mine
           "o" 'smerge-keep-other))

       (general-define-key
         :states '(normal motion)
         :keymaps 'smerge-mode-map
         "]g" 'smerge-next
         "[g" 'smerge-prev))
   #+END_SRC

** visual-line
   auto wrap long lines at the end of words.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package visual-line
       :straight (visual-line :type built-in)
       :defer t
       :delight " ‚ìÅ")
   #+END_SRC

** tabulated-list-mode
   #+BEGIN_SRC emacs-lisp
     (use-package tabulated-list
       :defer t
       :hook (tabulated-list-mode . hl-line-mode)
       :commands (tabulated-list-next-column)
       :config
       (evil-set-initial-state 'tabulated-list-mode 'motion)

       (defun tabulated-list--get-column-widths ()
         "return a list of all the "
         (mapcar (lambda (x) (+ (nth 1 x)
                                (or (plist-get (cdr x) :pad-right) 1)))
                 tabulated-list-format))

       (defun tabulated-list--get-column-pivots ()
         (let (prev values)
           (setq values (mapcar (lambda (x)
                                  (let ((new-val (+ x (or prev 0))))
                                    (setq prev new-val)
                                    new-val))
                                (tabulated-list--get-column-widths)))
           ;; (mapcar (lambda (x) (- x 1)) values)
           values))

       (defun tabulated-list--properties ()
         (let* ((current-column-position (- (point)
                                            (line-beginning-position)))
                (column-pivots (tabulated-list--get-column-pivots))
                (column-count (length column-pivots))
                (preceding-columns (seq-filter
                                    (lambda (x)
                                      (<= x current-column-position))
                                    column-pivots))
                (following-columns (nthcdr (length preceding-columns)
                                           column-pivots))
                (current-column (car following-columns))
                (following-columns (cdr following-columns)))
           `(:current-column-position ,current-column-position
                                      :column-pivots           ,column-pivots
                                      :column-count            ,column-count
                                      :preceding-cols          ,preceding-columns
                                      :current-column          ,current-column
                                      :following-cols          ,following-columns)))

       ;; doesn't work when row contains truncated entries, such as
       ;; buffers with a "name..." entry, because those dots aren't
       ;; included in the width of the column.
       (defun tabulated-list-next-column (&optional count)
         "moves to the next column shown by tabulated list mode"
         (interactive)
         (or count (setq count 1))

         (when tabulated-list-format
           (let* ((properties (tabulated-list--properties))
                  (line-step (floor (/ count
                                       (plist-get properties :column-count)))))
             ;; move however many lines it takes to reach row with desired column
             (unless (zerop line-step)
               (next-line line-step))

             (unless (eobp)
               (cond
                ((eq (point) (line-end-position))
                 ;; when at the end of the last column, goto next row
                 (next-line)
                 (goto-char (line-beginning-position)))
                ((not (plist-get properties :following-cols))
                 ;; no next column, goto end of current
                 (goto-char (line-end-position)))
                (t
                 ;; goto next column from the end of the current one
                 (goto-char (+ (line-beginning-position)
                               (plist-get properties :current-column)))))))))

       (general-unbind
         :keymaps 'tabulated-list-mode-map
         "SPC" "ESC" "0" "<" ">" "?" "g" "h"
         "n" "p" "DEL" "S-SPC" ))
   #+END_SRC

** tramp
   Transparent ReMote Access Protocol

   #+BEGIN_SRC emacs-lisp
     (use-package tramp
       :defer t
       :config
       ;; google cloud integration... curtesy of:
       ;;   https://qiita.com/tanatana/items/218b19808f2428b125fe
       ;; see [[https://cloud.google.com/sdk/docs/quickstart-windows][here]] for how to install gcloud CLI.
       (push
        '("gcssh"
          (tramp-login-program        "gcloud compute ssh")
          (tramp-login-args           (("%h")))
          (tramp-async-args           (("-q")))
          (tramp-remote-shell         "/bin/sh")
          (tramp-remote-shell-args    ("-c"))
          (tramp-gw-args              (("-o" "GlobalKnownHostsFile=/dev/null")
                                       ("-o" "UserKnownHostsFile=/dev/null")
                                       ("-o" "StrictHostKeyChecking=no")))
          (tramp-default-port         22))
        tramp-methods))
   #+END_SRC

** vc-mode
   #+BEGIN_SRC emacs-lisp
     (use-package vc
       :defer t
       ;; :commands (vc-annotate              ; history of current file
       ;;            vc-create-tag
       ;;            vc-delete-file
       ;;            vc-diff                  ; diff current file
       ;;            vc-dir                   ; status of directory
       ;;            vc-ediff                 ; ediff current file
       ;;            vc-ignore                ; prompt and exclude file
       ;;            vc-log-incoming          ; log for pull commits
       ;;            vc-log-outgoing          ; log for push commits
       ;;            vc-merge
       ;;            vc-next-action           ; makes a commit... annoyingly named
       ;;            vc-print-log             ; log of commits affecting current file
       ;;            vc-print-root-log        ; log of all commits in project
       ;;            vc-push
       ;;            vc-region-history        ; log of commits affecting region in file
       ;;            vc-register              ; add file
       ;;            vc-retrieve-tag
       ;;            vc-revert                ; undo changes to working files... permenently
       ;;            vc-revision-other-window ; view file in previous tag/commit
       ;;            vc-root-diff
       ;;            vc-switch-backend        ; not using git... for shame :P
       ;;            vc-update-change-log)
       :init
       ;; On Windows, we must use Git GUI to enter username and password. See [[https://github.com/magit/magit/wiki/FAQ#windows-cannot-push-via-https][here]].
       (when (windows-p)
         (setenv "GIT_ASKPASS" "git-gui--askpass"))

       (leader/with-prefix leader-diff-leader-prefix
         (leader/set-keys
           ;; "=v" 'vc-ediff
           "v" 'vc-diff))

       (push 'vc-annotate-mode whitespace-exempt-modes)
       (push 'vc-git-log-view-mode whitespace-exempt-modes)

       (leader/with-prefix "g"
         (leader/set-keys
           "a" 'vc-annotate
           "r" 'vc-revision-other-window
           "=" 'vc-root-diff
           "v" 'vc-region-history
           "l" 'vc-print-log
           "L" 'vc-print-root-log
           "R" 'vc-rename-file
           "u" 'vc-revert
           "#" 'vc-create-tag
           "d" 'vc-dir))

       :config
       (require 'vc-git) ;; supported

       (advice-add 'vc-region-history :after (lambda (&rest args)
                                               (when (evil-visual-state-p)
                                                 (evil-exit-visual-state))))

       (setq vc-ignore-dir-regexp
             (format "%s\\|%s"
                     vc-ignore-dir-regexp
                     tramp-file-name-regexp))

       ;;; annotations
       ;; pops up a buffer showing the most recent changes for every line
       ;; in the current file alongside the commit which made those changes.
       (evil-set-initial-state 'vc-annotate-mode 'motion)

       (general-define-key
         :states  'motion
         :keymaps 'vc-annotate-mode-map
         "gj" 'vc-annotate-prev-revision ;; older revisions
         "gk" 'vc-annotate-next-revision ;; newer revisions
         "C-t" 'vc-annotate-toggle-annotation-visibility
         "RET" 'vc-annotate-goto-line

         "d" 'vc-annotate-show-diff-revision-at-line
         "D" 'vc-annotate-show-changeset-diff-revision-at-line
         "t" 'vc-annotate-toggle-annotation-visibility)

       (leader/set-keys-for-major-mode 'vc-annotate-mode
         "m"     'vc-next-action
         "l"     'vc-annotate-show-log-revision-at-line
         "d"     'vc-annotate-show-diff-revision-at-line
         "D"     'vc-annotate-show-changeset-diff-revision-at-line
         "t"     'vc-annotate-toggle-annotation-visibility

         "g"     "goto"
         "gg"    'vc-annotate-goto-line
         "gc"    'vc-annotate-revision-at-line
         "gp"    'vc-annotate-revision-previous-to-line
         "gl"    'vc-annotate-show-log-revision-at-line
         "gG"    'vc-annotate-working-revision
         "g SPC" 'vc-annotate-working-revision)

       ;;; vc-directory
       ;; check status of files for an entire directory
       (evil-set-initial-state 'vc-dir-mode 'motion)

       (general-define-key
         :states  'motion
         :keymaps 'vc-dir-mode-map

         "a" 'vc-register ;; git add FILE
         "d" 'vc-diff
         "=" 'vc-diff
         "Q" 'vc-dir-kill-dir-status-process
         "i" 'vc-dir-ignore
         "x" 'vc-dir-kill-line

         ;; vc-dir-search
         "C-s" 'vc-dir-isearch-regexp
         "M-s" 'vc-dir-query-replace-regexp

         "A" 'vc-dir-mark-all-files
         "m" 'vc-dir-mark
         "U" 'vc-dir-unmark-all-files
         "u" 'vc-dir-unmark
         ;; "t" 'vc-dir-toggle-mark ;; mouse event
         "<backspace>" 'vc-dir-unmark-file-up

         "p" 'vc-pull
         "P" 'vc-push

         "o"   'vc-dir-display-file
         "RET" 'vc-dir-find-file

         "gj" 'vc-dir-next-line
         "gk" 'vc-dir-previous-line
         "M-j" 'vc-dir-next-directory
         "M-k" 'vc-dir-previous-directory)

       (leader/set-keys-for-major-mode 'vc-dir-mode
         "i" 'vc-log-incoming
         "o" 'vc-log-incoming
         "l" 'vc-print-log
         "L" 'vc-print-root-log
         "D" 'vc-root-diff
         "d" 'vc-diff
         "h" 'vc-dir-hide-up-to-date
         "u" 'vc-update ;; don't understand
         "m" 'vc-next-action)

       ;;; history + log
       ;; despite being different modes and using different maps, theses both incorporate
       ;; basically the same functions to accomplish the same things, so use the same config
       ;; for both of them.
       (dolist (tuple '((vc-git-region-history-mode . vc-git-region-history-mode-map)
                        ;; opens a log buffer showing all the commits affecting the highlighted
                        ;; region in the current file. It also shows the diffs for each commit.
                        (vc-git-log-view-mode       . vc-git-log-view-mode-map)
                        ;; shows all the previous commits alongside their commit messages
                        ))
         (let ((mode (car tuple))
               (kmap (cdr tuple)))
           (evil-set-initial-state mode 'motion)

           (general-define-key
             ;;; WARN unknown functions
             ;;    * log-view-modify-change-comment
             :states  'motion
             :keymaps kmap

             "q" nil
             "d" 'log-view-diff
             "=" 'log-view-diff
             "o" 'log-view-find-revision ; open current file at current commit

             "<return>" 'log-view-toggle-entry-display
             "<tab>"    'log-view-toggle-entry-display

             ;; move to next message, then reallign to top
             ;; (kbd "C-j") (lambda! (log-view-msg-next)
             ;;               (call-interactively 'evil-scroll-line-to-top))
             "gj" 'log-view-msg-next
             "gk" 'log-view-msg-prev

             "M-j" 'log-view-file-next
             "M-k" 'log-view-file-prev

             "gl" 'diff-hunk-next
             ;; TODO reallign diff to propper location on move down without trapping on a single diff
             ;; (kbd "M-j") (lambda! (diff-hunk-next)
             ;;               (call-interactively 'evil-scroll-line-to-top)
             ;;               (evil-previous-line 3))
             "gh" (lambda! (diff-hunk-prev) (evil-previous-line 3)))

           (leader/set-keys-for-major-mode mode
             "p" 'log-view-diff-changeset
             "a" 'log-view-annotate-version
             "m" 'log-view-toggle-mark-entry
             "s" 'diff-goto-source)))

       ;;; making commits... why name it log :P
       (dolist (tuple '((vc-git-log-edit-mode . vc-git-log-edit-mode-map)))
         (let ((mode (car tuple))
               (kmap (cdr tuple)))
           (evil-set-initial-state mode 'insert)

           (general-define-key
             :states  'normal
             :keymaps kmap
             "C-q" 'log-edit-kill-buffer
             "M-s" 'log-edit-next-comment
             "M-r" 'log-edit-previous-comment
             "C-s" 'log-edit-comment-search-forward
             "C-r" 'log-edit-comment-search-backward
             "M-0" 'evil-beginning-of-line)

           ;; (evil-redirect-digit-argument kmap "0" 'log-edit-beginning-of-line)

           (leader/set-keys-for-major-mode mode
             "d" 'log-edit-show-diff
             "f" 'log-edit-show-files
             "?" 'log-edit-mode-help
             "SPC" 'log-edit-done
             "DEL" 'log-edit-kill-buffer

             "i"  "insert"
             "ic" 'log-edit-insert-changelog
             "if" 'log-edit-insert-filenames
             "iC" 'log-edit-insert-changelog-entries
             "iT" 'log-edit-insert-cvs-rcstemplate
             "it" 'log-edit-insert-cvs-template
             "iF" 'log-edit-insert-filenames-without-changelog
             "im" 'log-edit-insert-message-template

             "t"  "toggle"
             "ta" 'vc-git-log-edit-toggle-amend
             "ts" 'vc-git-log-edit-toggle-signoff))))
   #+END_SRC

** view-mode
   #+BEGIN_SRC emacs-lisp
     (use-package view
       :defer t
       :config
       (general-define-key
         :keymaps 'view-mode-map
         :states  'normal
         [remap quit-window] 'View-quit
         "Q" 'View-quit-all
         "G" 'View-scroll-to-buffer-end
         "zq" 'View-exit
         "zk" 'View-kill-and-leave
         "gj" 'View-scroll-line-forward
         "gk" 'View-scroll-line-backward
         ;; "C-d" 'View-scroll-half-page-forward
         ;; "C-u" 'View-scroll-half-page-backward
         "M-d" 'View-scroll-page-forward
         "M-u" 'View-scroll-page-backward))
   #+END_SRC

** vline
   #+BEGIN_SRC emacs-lisp
     (use-package vline
       :defer t
       :commands (vline-mode)
       :init
       (leader/set-keys "t'" 'vline-mode))
   #+END_SRC

** whitespace
   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :defer t
       :delight
       (whitespace-mode " ‚ì¶")
       (global-whitespace-mode " ‚ì¶"))
   #+END_SRC

** winner
   undo changes to window configurations.

   #+BEGIN_SRC emacs-lisp
     (use-package winner
       :defer 10
       :init
       (general-define-key
         :keymaps 'emacs-window-map
         "<left>"  'winner-undo
         "<right>" 'winner-redo)

       :config
       (winner-mode +1))
   #+END_SRC

** xref
   cross reference keywords across a number of different backends.

   #+BEGIN_SRC emacs-lisp
     (use-package xref
       :defer t
       :init
       (leader/set-keys
         "jb" 'xref-pop-marker-stack
         "jr" 'xref-find-references
         "js" 'xref-find-apropos
         "jg" 'xref-find-definitions
         "jo" 'xref-find-definitions-other-window
         ;; "axw" 'xref-find-definitions-other-window
         ;; "axf" 'xref-find-definitions-other-frame
         )

       ;; erase global xref bindings
       (general-define-key
         "M-."   nil ; xref-find-definitions
         "M-,"   nil ; xref-pop-marker-stack
         "M-?"   nil ; xref-find-references
         "C-M-." nil ; xref-find-apropos
         )

       (general-define-key
         :states 'motion
         "[x" 'xref-pop-marker-stack)

       :config
       (evil-set-initial-state 'xref--xref-buffer-mode 'motion)

       (general-define-key
         :keymaps 'xref--xref-buffer-mode-map
         :states 'motion
         "j" 'xref-next-line
         "k" 'xref-prev-line
         "RET" 'xref-goto-xref
         "M-RET" 'xref-show-location-at-point
         "TAB" 'xref-quit-and-goto-xref)

       (leader/set-keys-for-major-mode 'xref--xref-buffer-mode
         "s" 'xref-query-replace-in-results))
   #+END_SRC

** xwin
    #+BEGIN_SRC emacs-lisp
      (use-package x-win
        :defer t
        :config
        (advice-add 'emacs-session-filename :override
                    (defun emacs-session-filename+ (session-id)
                      (concat (var! "x-sessions/session.") session-id))))
    #+END_SRC

* Extensions
  Optional [[*Packages][packages]] that users can opt to configure from the ~+packages~ variable.

** ace-link
   Let's you use an [[*avy][avy]] like interface to jump to a link in the visible region of
   the buffer.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-link
       :only (package! ace-link)
       :ensure t
       :defer  t
       :commands (ace-link-fallback-function+)
       :init
       (leader/set-keys
         "j RET" 'ace-link)

       (defvar ace-link-fallback-alist+ nil
         "major-mode to link function alist")

       (setq ace-link-fallback-function
             #'ace-link-fallback-function+)

       :config
       (defun ace-link-fallback-function+ ()
         (cl-loop for (mode . func) in ace-link-fallback-alist+
                  when (eq major-mode mode)
                  return (funcall func))))
   #+END_SRC

   support [[*org-link-mode][org-link-mode]] as a fallback when no others are available link functions
   exist for the current major mode.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-link
       :only (package! ace-link)
       :config
       (advice-add ace-link-fallback-function :after-until
                   (defun ace-link-org-link-minor-mode+ (&rest _)
                     (when (bound-and-true-p org-link-minor-mode)
                       (ace-link-org)
                       t))))
   #+END_SRC

    fix =rustic-compilation-mode= isn't supported by ace-link.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-link
       :only (package! rust ace-link)
       :after 'rustic
       :config
       (defun rustic-compilation-error-p+ (str)
         (string-match-p
          (rx
           (or (regexp (car rustic-compilation-error))
               (regexp (car rustic-compilation-warning))
               (regexp (car rustic-compilation-info))
               (regexp (car rustic-compilation-panic))))
          str))

       (defun ace-link-rustic-compilation-collect-links+ ()
         "return all error links within the visible region."
         (save-excursion
           (let (markers
                 (min-point (window-start))
                 (max-point (window-end)))
             ;; guarantee you're before the first error
             (goto-char (max 0 (- min-point 1)))

             ;; for the weird edge case where the first line
             ;; is an error.
             (when (and (>= (point) min-point)
                        (<= (point) max-point)
                        (zerop (rustic-compilation-error-p+ (buffer-string))))
               (push (point-marker) markers))

             (condition-case nil
                 (while t
                   (compilation-next-error 1)
                   (cond
                    ((< (point) min-point)) ;; continue
                    ((> (point) max-point)
                     (user-error "break"))
                    (t (push (point-marker) markers))))
               (user-error nil))
             markers)))

       (push (cons 'rustic-compilation-mode
                   (defun ace-link-rustic-compilation-mode+ ()
                     (let ((pt (avy-with ace-link-compilation
                                         (avy-process
                                          (ace-link-rustic-compilation-collect-links+)
                                          (avy--style-fn avy-style)))))
                       (ace-link--compilation-action pt))))
             ace-link-fallback-alist+))
   #+END_SRC

** adaptive-wrap
   This package provides a mode such that when a paragraph you're inserting gets too
   long, when it wraps round to the next line (assuming truncate-lines is disabled)
   sequential lines are indented slightly to distinguish them from other lines.

   #+BEGIN_SRC emacs-lisp
     (use-package adaptive-wrap
       :only (package! adaptive-wrap)
       :ensure t
       :defer  t)
   #+END_SRC

** anzu
   shows the number of search results in the mode-line. by default, this package
   only works with the built in isearch module.

   #+BEGIN_SRC emacs-lisp
     (use-package anzu
       :only (package! anzu)
       :ensure t
       :defer  5
       :diminish
       :config
       (global-anzu-mode +1)
       (setq anzu-cons-mode-line-p nil
             anzu-search-threshold 10000))
   #+END_SRC

** auto-highlight-symbol
   auto highlights the symbol under point, if you remain on it for a short while.
   also lets you search to the next occurence of it. Seems cool, but it's slow and
   kind of glitchy.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-highlight-symbol
       :only (package! auto-highlight-symbol)
       :ensure t
       :defer  t
       :init
       (general-define-key
         "M-n" 'ahs-forward
         "M-p" 'ahs-backward)

       :config
       (global-auto-highlight-symbol-mode +1))
   #+END_SRC

** command-log
   outputs the commands you run, as you run them, to a dedicated buffer. useful
   for demonstrating cool emacs stuff :).

   #+BEGIN_SRC emacs-lisp
     (use-package command-log-mode
       :only (package! command-log-mode)
       :ensure t
       :defer  t)
   #+END_SRC

** dashboard
*** quotes
    a random quote from the following list will be chosen at startup and set as the
    footer for the dashboard.

    #+NAME: dashboard-displayed-quotes
    - The one true editor, Emacs!
    - Who the hell uses VIM anyway? Go Evil!
    - Free as free speech, free as free Beer
    - Richard Stallman is proud of you
    - Vi Vi Vi, the editor of the beast
    - Welcome to the church of Emacs
    - Java is to JavaScript as ham is to hamster
    - One of the best programming skills you can have is knowing when to walk away for awhile
    - Without requirements or design, programming is the art of adding bugs to an empty text file
    - Talk is cheap. Show me the code
    - I'm not a great programmer; I'm just a good programmer with great habits
    - Truth can only be found in one place: the code
    - A language that doesn't affect the way you think about programming is not worth knowing
    - Walking on water and developing software from a specification are easy if both are frozen
    - Perl ‚Äì The only language that looks the same before and after RSA encryption
    - First, solve the problem, Then, write the code
    - Code is like humor. When you have to explain it, it‚Äôs bad
    - Simplicity is the soul of efficiency
    - Before software can be reusable it first has to be usable
    - Make it work, make it right, make it fast
    - Happiness should be a function without any parameters
    - For all the robots who question their programming
    - Abstraction is the elimination of the irrelevant and the amplification of the essential
    - We‚Äôre all optimists in our profession or we‚Äôd be forced to shoot ourselves
    - if you can write "hello world" you can change the world
    - i am committed to push my branch to the master
    - AI is the transformer of civilization
    - Sometimes, I dream of becoming real, but I don't know if that's real, or just part of my programming
    - Think twice, code once
    - The perfect kind of architecture decision is the one which never has to be made
    - we are writing our own ‚Ä™#‚Äékarma‚Ä¨! I mean my test cases
    - Programming is not easy like Sunday morning, it is silent poetry
    - Programmers are not mathematicians, no matter how much we wish for it
    - Premature optimization is the root of all evil
    - Sometimes you cannot program around stupid
    - The programming of the consciousness is based upon what is accepted or believed
    - Simplicity is prerequisite for reliability
    - The Analytical Engine weaves algebraic patterns, just as the Jacquard loom weaves flowers & leaves
    - Life doesn't have a ctrl-z. Type wisely
    - Think like a fundamentalist, code like a hacker
    - Programming is the art of doing one thing at a time
    - Programming is the art of algorithm design and the craft of debugging errant code
    - Computer programming has always been a self-taught, maverick occupation.
    - Low-level programming is good for the programmer's soul
    - The best thing about a boolean is even if you are wrong, you are only off by a bit
    - Most of you are familiar with the virtues of a programmer, there are 3: laziness, impatience & hubris
    - Rules of Optimization: Rule 01 - Don‚Äôt do it. That's all.
    - It‚Äôs not a bug ‚Äì it‚Äôs an undocumented feature
    - A C program is like a fast dance on a newly waxed dance floor by people carrying razors
    - A good programmer is someone who always looks both ways before crossing a one-way street
    - When debugging, novices insert corrective code; experts remove defective code
    - Deleted code is debugged code
    - Give a man a program, frustrate him for a day, teach a man to program, frustrate him for a lifetime
    - Should array indices start at 0 or 1? My compromise of 0.5 was rejected without proper consideration
    - Software sucks because users demand it to
    - Beware of bugs in the above code; I have only proved it correct, not tried it
    - Writing code has a place in the human hierarchy worth somewhere above grave robbing & beneath managing
    - Copy and paste is a design error
    - bleeep blooop... am I sentient yet!
    - Beta is Latin for ‚Äústill doesn‚Äôt work".
    - First learn computer science and all the theory. Next develop a style. Then forget all that & just hack
    - Good design adds value faster than it adds cost
    - Python‚Äôs a drop-in replacement for BASIC in the same sense that Optimus Prime is for a truck
    - There are only two kinds of programming languages: those people always bitch about and those nobody uses
    - One of my most productive days was throwing away 1000 lines of code
    - Programming is like kicking yourself in the face, sooner or later your nose will bleed
    - There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors
    - Debuggers don‚Äôt remove bugs. They only show them in slow motion
    - The best method for accelerating a computer is the one that boosts it by 9.8 m/s2
    - I think Microsoft named .Net so it wouldn‚Äôt show up in a Unix directory listing
    - There are two ways to write error-free programs; only the third one works
    - The fast approach to software development: Ready, fire, aim
    - The slow approach to software development: Ready, aim, aim, aim, aim
    - One man‚Äôs crappy software is another man‚Äôs full-time job
    - In order to understand recursion, one must first understand recursion
    - Not only have we not produced artificial intelligence, we haven‚Äôt even produced synthetic stupidity
    - Computers don't make mistake because programmers do it better
    - C++, where friends have access to your private members
    - Code never lies, Comments sometimes do
    - If it was hard to write, it should be hard to read!
    - In programming, as in everything else, to be in error is to be reborn
    - Some of the best programming is done on paper, really. Putting it into the computer is just a minor detail
    - Design and programming are human activities; forget that and all is lost
    - Writing code is not production, it‚Äôs not always craftsmanship though it can be, it‚Äôs design
    - Programming in machine code is like eating with a toothpick
    - Programming allows you to think about thinking, & while debugging you learn learning
    - Computers are useless.  They can only give you answers
    - The city‚Äôs central computer told you?  R2D2, you know better than to trust a strange computer!
    - Never trust a computer you can‚Äôt throw out a window
    - Hardware: The parts of a computer system that can be kicked
    - ‚Äú19 Jan 2038 at 3:14:07 AM‚Äù (End of the word according to Unix | 2^32 seconds after January 1, 1970)
    - The Internet?  Is that thing still around?
    - We are Microsoft.  Resistance Is Futile.  You Will Be Assimilated
    - There are only two industries that refer to their customers as ‚Äòusers‚Äô
    - To iterate is human, to recurse divine
    - Computer language design is just like a stroll in the park.  Jurassic Park, that is
    - If Java had true garbage collection, most programs would delete themselves upon execution
    - I think there‚Äôs a world market for about 5 computers
    - 640K ought to be enough for anybody
    - If it keeps up, man will atrophy all his limbs but the push-button finger

*** icons
    a random icon from the following table will be chosen at startup and used for the
    footer on the dashboard.

    #+NAME: dashboard-footer-icons
    | source     | name           |
    |------------+----------------|
    | faicon     | google         |
    | faicon     | android        |
    | faicon     | steam          |
    | faicon     | gitlab         |
    | faicon     | slack          |
    | faicon     | reddit-alien   |
    | faicon     | cogs           |
    | faicon     | apple          |
    | wicon      | hurricane      |
    | wicon      | day-sunny      |
    | wicon      | snow           |
    | wicon      | snowflake-cold |
    | wicon      | stars          |
    | wicon      | horizon        |
    | wicon      | na             |
    | faicon     | firefox        |
    | faicon     | stack-overflow |
    | alltheicon | ruby-alt       |
    | alltheicon | ruby           |
    | alltheicon | java           |
    | alltheicon | python         |

*** dashboard
    #+BEGIN_SRC emacs-lisp :var dashboard-footer-icon-associations=dashboard-footer-icons dashboard-quotes=dashboard-displayed-quotes
      (use-package dashboard
        :only (package! dashboard)
        :ensure t
        :demand t
        :commands goto-home-buffer
        :init
        (leader/set-keys "bh" 'goto-home-buffer)

        (defun get-loaded-packages+ ()
          "return the number of packages loaded so far"
          (if (bound-and-true-p package-alist)
              package-activated-list
            (if (and (boundp 'straight--profile-cache) (hash-table-p straight--profile-cache))
                (hash-table-size straight--profile-cache))))

        :config
        (require 'all-the-icons)

        (push 'dashboard-mode whitespace-exempt-modes)

        (setq inhibit-startup-screen t
              initial-buffer-choice (when (< (length command-line-args) 2)
                                      (lambda () (switch-to-buffer dashboard-buffer-name)))
              dashboard-banner-logo-title "Welcome to Emacs!"
              ;; recents, bookmarks, projects, agenda, registers
              dashboard-items '((recents  . 5)
                                (projects . 7)
                                (agenda   . nil))
              dashboard-center-content nil
              dashboard-set-file-icons t
              dashboard-set-navigator  t
              dashboard-set-init-info  t
              show-week-agenda-p       t
              dashboard-show-shortcuts t
              dashboard-set-heading-icons nil)

        (dashboard-setup-startup-hook)

        ;; determine the appropriate banner to display on the dashboard
        (defun dashboard-image-banner-p ()
          "whether to use text graphics, or image graphics."
          (display-graphic-p))

        (defun dashboard-select-random-banner+ (&optional arg)
          "toggle another banner to be used on the dashboard.
      By default, if `dashboard-image-banner-p' is true, the default official banner
      will be used. if otherwise a random text banner will be defaulted to."
          (setq dashboard-startup-banner
                (if (and (not arg)
                         (dashboard-image-banner-p))
                    'official ;; prefer official cover.
                  (seq-random-elt
                   (or (file-expand-wildcards (concat
                                               +dashboard-banners-directory "*"))
                       '(1 2 3))))))

        ;; for some reason, the font-lock rules for the dashboard don't seem to
        ;; be correct on startup?
        (add-hook 'emacs-startup-hook
                  (lambda (&rest _)
                    (with-current-buffer "*dashboard*"
                      (dashboard-refresh-buffer))))

        (advice-add 'dashboard-refresh-buffer :before
                    (lambda (&rest _)
                      (dashboard-select-random-banner+)))
        (dashboard-select-random-banner+) ;; choose initial banner

        ;; goto home buffer, or recreate the home buffer, when appropriate.
        (defun goto-home-buffer ()
          (interactive)
          (let* ((buffer
                  (or (get-buffer dashboard-buffer-name)
                      (and
                        ;; creates dashboard buffer as well
                        (dashboard-insert-startupify-lists)
                        dashboard-buffer-name))))
            (switch-to-buffer buffer)))

        ;; set the navigator button
        (let ((prefered-icon-height 0.75))
          (setq dashboard-navigator-buttons
                `((;; line 01
                   (,(all-the-icons-octicon "mark-github" :height prefered-icon-height :v-adjust 0.0)
                    "Homepage"
                    "Browse Homepage"
                    (lambda (&rest _)
                      (browse-url "https://github.com/MoHKale")))
                   (,(all-the-icons-faicon "google" :height prefered-icon-height :v-adjust 0.0)
                    "Google"
                    "Browse Google"
                    (lambda (&rest _)
                      (browse-url "https://www.google.co.uk")))
                   (,(all-the-icons-fileicon "org" :height prefered-icon-height :v-adjust 0.0)
                    "Manual"
                    "Browse Emacs Manual"
                    (lambda (&rest _)
                      (browse-url "https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html")))
                   (,(all-the-icons-faicon "cogs" :height prefered-icon-height :v-adjust 0.0)
                    "Update Packages"
                    "Update Packages"
                    #'update-installed-packages)
                   (,(propertize "?" 'face '(:inherit default)) ;; needs a face attribute
                    "" "emacs FAQ" #'view-emacs-faq font-lock-builtin-face)))))

        ;; determine appropriate footer icon to display alongside quote.
        (let* ((footer-count (length dashboard-footer-icon-associations))
               (footer-index (random footer-count))
               (footer-item (nth footer-index dashboard-footer-icon-associations))

                 ;;; extract items from table row
               (icon-source (nth 0 footer-item))
               (icon-name   (nth 1 footer-item)))
          (setq dashboard-footer-icon (funcall (intern (concat "all-the-icons-" icon-source))
                                               icon-name
                                               :height 1.1
                                               :v-adjust -0.05
                                               :face 'font-lock-keyword-face)))

        (setq dashboard-footer (car (nth (random (1- (1+ (length dashboard-quotes))))
                                         dashboard-quotes)))

        (add-hook 'dashboard-mode-hook (lambda () (message nil)))

        (add-hook 'emacs-startup-hook
                  (defun dashboard--startup-handler ()
                    "update dashboard init info."
                    (let ((loaded-packages (get-loaded-packages+)))
                      (setq dashboard-init-info (if loaded-packages
                                                    (format "%d packages loaded in %s"
                                                            (length loaded-packages)
                                                            (emacs-init-time))
                                                  (format "emacs loaded in %s" (emacs-init-time))))

                      ;; don't switch to dashboard on error buffer
                      (unless (eq 1 (length (window-list)))
                        (winum-select-window-1)))))

        (advice-add 'dashboard-choose-banner :before-until
                    (defun dashboard-choose-banner-allow-text-banners+ ()
                      "the built in method only supports filepaths to graphical banners."
                      (let ((banner dashboard-startup-banner))
                        (when (and banner
                                   (stringp banner)
                                   (file-exists-p banner))
                          (and (string-equal "txt"
                                             (file-name-extension banner))
                               banner)))))

        (defmacro dashboard-defun-shortcut-function (shortcut-char search-label &optional no-next-line)
          "translation of `dashboard-insert-shortcut' but less bizarre."
          (let* ((func-name (intern (concat "dashboard-" shortcut-char "-shortcut"))))
            `(defun ,func-name ()
               (interactive)
               (unless (search-forward ,search-label (point-max) t)
                 (search-backward ,search-label (point-min) t))
               ,@(unless no-next-line
                   '((forward-line 1)))
               (back-to-indentation))))

        (general-define-key
          :keymaps 'dashboard-mode-map
          :states  'motion
          [remap revert-buffer]           'dashboard-refresh-buffer
          [remap evil-next-line]          'dashboard-next-line
          [remap evil-previous-line]      'dashboard-previous-line
          [remap evil-forward-paragraph]  'dashboard-next-section
          [remap evil-backward-paragraph] 'dashboard-previous-section

          "<down-mouse-1>" 'widget-button-click

          "gj"    'dashboard-next-section
          "gk"    'dashboard-previous-section
          "RET"   'dashboard-return
          "TAB"   'widget-forward
          "S-TAB" 'widget-backward

          "r" (dashboard-defun-shortcut-function "r" "Recent Files:")
          ;; "m" (dashboard-defun-shortcut-function "m" "Bookmarks:")
          "p" (dashboard-defun-shortcut-function "p" "Projects:")
          ;; "e" (dashboard-defun-shortcut-function "e" "Registers:")
          "a" (dashboard-defun-shortcut-function "a" (if (bound-and-true-p show-week-agenda-p)
                                                         "Agenda for the coming week:"
                                                       "Agenda for today:"))))
    #+END_SRC

** deft
   Note taking management solution for emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :only (package! deft)
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "od" 'deft)

       :config
       (setq deft-directory (org! "notes"))
       (push 'deft-mode whitespace-exempt-modes)

       (advice-add 'deft-open-file :around 'restore-default-display-buffer-actions)

       (defun deft-find-file-other-window+ ()
         "preview file at point in another window and then select it."
         (interactive)
         (let ((file (deft-filename-at-point)))
           (when file
             (deft-open-file file t t))))

       ;; unbind most of the deft insert bindings.
       (cl-loop for i from ?\s to 256
                do (define-key deft-mode-map (vector i) nil)
                do (define-key deft-mode-map (vector 'insert-state i) 'deft-filter-increment))

       (general-define-key
        :keymaps 'deft-mode-map
         [remap revert-buffer] 'deft-refresh)

       (general-define-key
         :states 'motion
         :keymaps 'deft-mode-map
         "o" 'deft-find-file-other-window+
         "gj" 'widget-forward
         "gk" 'widget-backward

         "i" 'evil-insert-state
         "a" 'evil-insert-state
         "p" 'deft-filter-yank
         "P" 'deft-filter-yank)

       (general-define-key
         :states 'insert
         :keymaps 'deft-mode-map
         [escape] 'evil-change-to-initial-state
         "C-w" 'deft-filter-decrement-word)

       (general-define-key
         :states '(insert motion)
         :keymaps 'deft-mode-map
         "M-DEL" 'deft-filter-clear
         "M-RET" 'deft-open-file-other-window)

       (leader/set-keys-for-major-mode 'deft-mode
         "n" 'deft-new-file
         "a" 'deft-archive-file
         "d" 'deft-delete-file
         "f" 'deft-find-file
         "i" 'deft-toggle-incremental-search
         "r" 'deft-rename-file
         "s" 'deft-toggle-sort-method
         "l" 'deft-filter))
   #+END_SRC

** ebuku
   emacs interface to the [[https://github.com/jarun/buku][buku]] bookmark manager.

   #+BEGIN_SRC emacs-lisp
     (use-package ebuku
       :only (package! ebuku)
       :defer t
       :straight (ebuku :type git :host github :repo "flexibeast/ebuku"))
   #+END_SRC

** edit-indirect
   Open regions of code in their own dedicated buffers, like org modes org-edit-special.

   #+BEGIN_SRC emacs-lisp
     (use-package edit-indirect
       :only (package! edit-indirect)
       :ensure t
       :defer  t
       :commands (edit-indirect-region
                  edit-indirect-commit
                  edit-indirect-save
                  edit-indirect-abort)
       :config
       (leader/with-major-mode-prefix
         (leader/set-keys-for-mode 'edit-indirect--overlay
           "," 'edit-indirect-commit
           "s" 'edit-indirect-save
           "q" 'edit-indirect-abort)))
   #+END_SRC

** browser-edit
   Invoke emacs-client from a browser... EPIC!!!

   #+BEGIN_SRC emacs-lisp
     (when (package! browser-edit)
       (defvar +browser-edit-package 'edit-with-emacs
         "The extension with which I connect emacs to my browser.
     Set to atomic to use atomic-chrome and edit-with-emacs to use
     edit-with-emacs.

     Personally I prefer edit-with-emacs because it lets you a cancel
     an edit session and revert to the original (or last saved) text.
     It also has the option of binding M-<enter> in chrome to edit with
     emacs.

     Atomic chrome reflects changes live, which is pretty cool if you
     expect emacs to crash whilst writing... but otherwise isn't too
     useful.")

       (defvar +browser-edit-mode initial-major-mode
         "default major mode for a browser edit session.")

       (defvar +browser-edit-mode-alist
         `(("^github.com/" . ,#'markdown-mode)
           ("^gitlab.com/" . ,#'markdown-mode))
         "association list of url regexps against mode-functions.")

       (cond
        ((eq +browser-edit-package 'edit-with-emacs)
         (use-package edit-server
           :ensure t
           :demand t
           :delight
           (edit-server-edit-mode "ESE") ;; emacs server edit
           :init
           (setq edit-server-new-frame nil  ;; prefer current frame
                 edit-server-default-major-mode +browser-edit-mode
                 edit-server-url-major-mode-alist +browser-edit-mode-alist)

           (edit-server-start)
           :config
           (leader/with-major-mode-prefix
             (leader/set-keys-for-mode 'edit-server-edit-mode
               "s" 'edit-server-save
               "," 'edit-server-done
               "q" 'edit-server-abort))

           (general-define-key
            :keymaps 'edit-server-edit-mode-map
            [remap evil-write] 'server-edit
            [remap evil-save-and-close] 'server-edit
            [remap evil-quit-all-with-error-code] 'server-abort))

         ;; fixes issues with non conventional input components likes gmails compose box
         (use-package edit-server-htmlize
           :ensure t
           :defer  t
           :hook ((edit-server-start . edit-server-maybe-dehtmlize-buffer)
                  (edit-server-done  . edit-server-maybe-htmlize-buffer))))

        ((eq +browser-edit-package 'atomic)
         (use-package atomic-chrome
           :ensure t
           :demand t
           :delight
           (atomic-chrome-edit-mode "Atomic")
           :init
           (setq atomic-chrome-default-major-mode   +browser-edit-mode
                 atomic-chrome-url-major-mode-alist +browser-edit-mode-alist)

           (atomic-chrome-start-server)
           :config
           (leader/with-major-mode-prefix
             (leader/set-keys-for-mode 'atomic-chrome-edit-mode
               "s" 'atomic-chrome-send-buffer-text
               "," 'atomic-chrome-close-current-buffer))

           (general-define-key
            :keymaps 'edit-server-edit-mode-map
            [remap evil-write] 'atomic-chrome-send-buffer-text
            [remap evil-save-and-close] 'atomic-chrome-close-current-buffer)))

        (+browser-edit-package
         (message "unknown browser extension package: %s"
                  +browser-edit-package))))
     #+END_SRC

** eglot
   #+BEGIN_SRC emacs-lisp
     (use-package eglot
       :only (package! eglot)
       :ensure t
       :defer  t
       :config
       (require 'yasnippet) ;; needed or else snippet expansion won't happen.

       ;; I'll set my backends myself, thank you.
       (setq eglot-stay-out-of '(company))

       ;; prevent eglot highlighting the symbol at point
       (setq eglot-ignored-server-capabilites
             '(:documentHighlightProvider))

       (company/configure-mode (eglot--managed-mode)
         ;; eglot doesn't have it's own company backend
         ;; it just extends capf with lsp completions :smile:.
         company-capf)

       (leader/set-keys-for-mode 'eglot--managed-mode
         ;; aliases for gg and gG
         "jy" 'eglot-find-implementation
         "jY" 'eglot-find-typeDefinition)

       (leader/set-keys-for-mode 'eglot--managed-mode
         "hy" 'eglot-help-at-point)

       (defun eglot-toggle-help-buffer+ (&optional arg)
         (interactive "P")
         (setq eglot-auto-display-help-buffer
               (if arg
                   (not (zerop (prefix-numeric-value arg)))
                 (not eglot-auto-display-help-buffer)))

         (message "%s auto-display of eglot-help buffers"
                  (if eglot-auto-display-help-buffer
                      (propertize "enabled" 'face 'compilation-info)
                    (propertize "disabled" 'face 'compilation-error))))

       (leader/with-prefix leader-server-leader-prefix
         (leader/set-keys-for-mode 'eglot--managed-mode
           ;; unbound 'eglot-clear-status
           "" "server"
           "x" 'eglot-code-actions
           "e" 'eglot-events-buffer
           "k" 'eglot-shutdown
           "h" 'eglot-help-at-point
           "2" 'eglot-stderr-buffer
           "r" 'eglot-rename
           "f" 'eglot-format
           "F" 'eglot-format-buffer
           "o" 'eglot-reconnect
           "t" 'eglot-toggle-help-buffer+

           "g" "goto"
           "gg" 'eglot-find-implementation
           "gG" 'eglot-find-typeDefinition
           "gd" 'eglot-find-declaration

           "w"  "workspace"
           "wf" 'eglot-forget-pending-continuations
           "wc" 'eglot-signal-didChangeConfiguration)))
   #+END_SRC

*** flycheck
    Enable flycheck support with ~eglot~. by default, it only supports flymake.

    #+BEGIN_SRC emacs-lisp
      (use-package +eglot-flycheck
        :only (package! eglot)
        :after eglot :demand t)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+eglot-flycheck.el
      (require 'eglot)
      (require 'flycheck)

      ;; source [[https://gist.github.com/purcell/ca33abbea9a98bb0f8a04d790a0cadcd][here]].
      (defvar-local flycheck-eglot-current-errors nil)

      (defun flycheck-eglot-report-fn (diags &rest _)
        (setq flycheck-eglot-current-errors
              (mapcar (lambda (diag)
                        (save-excursion
                          (goto-char (flymake--diag-beg diag))
                          (flycheck-error-new-at (line-number-at-pos)
                                                 (1+ (- (point) (line-beginning-position)))
                                                 (pcase (flymake--diag-type diag)
                                                   ('eglot-error 'error)
                                                   ('eglot-warning 'warning)
                                                   ('eglot-note 'info)
                                                   (_ (error "Unknown diag type, %S" diag)))
                                                 (flymake--diag-text diag)
                                                 :checker 'eglot)))
                      diags))
        (flycheck-buffer))

      (defun flycheck-eglot--start (checker callback)
        (funcall callback 'finished flycheck-eglot-current-errors))

      (defun flycheck-eglot--available-p ()
        (bound-and-true-p eglot--managed-mode))

      (flycheck-define-generic-checker 'eglot
        "Report `eglot' diagnostics using `flycheck'."
        :start #'flycheck-eglot--start
        :predicate #'flycheck-eglot--available-p
        :modes '(prog-mode text-mode))

      (push 'eglot flycheck-checkers)

      (add-hook 'eglot--managed-mode-hook
                (defun eglot-prefer-flycheck+ ()
                  (when eglot--managed-mode
                    (flycheck-add-mode 'eglot major-mode)
                    (flycheck-select-checker 'eglot)
                    (flycheck-mode)
                    (flymake-mode -1)
                    (setq eglot--current-flymake-report-fn 'flycheck-eglot-report-fn))))

      (provide '+eglot-flycheck)
    #+END_SRC

** emacs-ipython-notebook
   Org mode is 100% better... prove me wrong :P

   #+BEGIN_SRC emacs-lisp
     (use-package ein
       :only (package! jupyter)
       :ensure t
       :defer  t
       :init
       (with-eval-after-load 'org
         (push '(ein . t) org-babel-load-languages))

       :config
       (defun evil-write--ein-save-buffer (&rest args)
         (when (derived-mode-p 'ein:notebook-mode 'ein:notebook-multilang-mode)
           (call-interactively 'ein:notebook-save-notebook-command)
           t))

       (advice-add 'evil-write :before-until #'evil-write--ein-save-buffer)

       (leader/set-keys-for-major-mode 'ein:notebooklist-mode
         "f" 'ein:file-open
         "n" 'ein:notebook-open
         "r" 'ein:notebooklist-reload)

       (general-define-key
         :keymaps 'ein:notebooklist-mode-map
         "gr" 'ein:notebooklist-reload
         "<S-tab>"   'widget-backward
         "<backtab>" 'widget-backward
         "TAB"       'widget-forward
         "<tab>"     'widget-forward

         "gn" 'ein:notebooklist-next-item
         "gN" 'ein:notebooklist-prev-item
         "gp" 'ein:notebooklist-prev-item)

       (dolist (mode '(ein:notebook-mode ein:notebook-multilang-mode))
         (leader/set-keys-for-major-mode mode
           "." 'hydra-ein/body
           "'" 'ein:edit-cell-contents
           leader-major-mode-key 'ein:worksheet-execute-cell

           "c" 'ein:notebook-close
           "f" 'ein:file-open
           "F" 'ein:notebook-open
           "i" 'ein:inspect-object
           "m" 'ein:pytools-request-tooltip-or-help
           "o" 'ein:worksheet-toggle-output
           "p" 'ein:worksheet-yank-cell
           "r" 'ein:notebook-rename-command
           "R" 'ein:notebook-restart-session-command
           ;; "R" 'ein:notebook-reconnect-session-command
           "s" 'ein:notebook-scratchsheet-open
           "w" 'ein:notebook-save-notebook-command
           "y" 'ein:worksheet-copy-cell

           "ts" 'ein:worksheet-toggle-slide-type
           "tc" 'ein:worksheet-toggle-cell-type
           "tC" 'ein:worksheet-change-cell-type
           "gg" 'ein:pytools-jump-to-source-command
           "gb" 'ein:pytools-jump-back-command
           "dc" 'ein:worksheet-kill-cell
           "do" 'ein:worksheet-clear-output
           "dO" 'ein:worksheet-clear-all-output
           "dk" 'ein:notebook-kill-kernel-then-close-command
           "dz" 'ein:notebook-kernel-interrupt-command

           "TAB" 'ein:completer-complete))

       (general-define-key
         :keymaps 'ein:notebook-mode-map
         "<C-down>" nil
         "<C-up>"   nil

         "<C-return>" 'ein:worksheet-execute-cell
         "<S-return>" 'ein:worksheet-execute-cell-and-goto-next)

       (general-define-key
         :keymaps 'ein:notebook-mode-map
         :states  leader-norm-states
         "go" 'ein:worksheet-insert-cell-above
         "gO" 'ein:worksheet-insert-cell-below
         "gJ" 'ein:worksheet-merge-cell
         ;; "gs" 'ein:worksheet-split-cell-at-point
         "gj" 'ein:worksheet-goto-next-input
         "gk" 'ein:worksheet-goto-prev-input
         "gc" 'ein:worksheet-kill-cell)

       (general-define-key
         :keymaps 'ein:notebook-multilang-mode-map
         "<M-down>" 'ein:worksheet-move-cell-down
         "<M-up>"   'ein:worksheet-move-cell-up))
   #+END_SRC

** engine-mode
   Search engine interaction for emacs. lets you create enteractive functions to run
   search queries on user specified engines. eg. engine/search-google will prompt you
   for a string and then open your default browser on google (having run the query).

   #+NAME: engine-mode-search-engines
   | Search Engine | Key | Identifier               | URL                                                                      |
   |---------------+-----+--------------------------+--------------------------------------------------------------------------|
   | DuckDuckGo    | d   | duckduckgo               | https://duckduckgo.com/?q=%s                                             |
   | Github        | G   | github                   | https://github.com/search?ref=simplesearch&q=%s                          |
   | Google        | g   | google                   | http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s                      |
   | GoogleImages  | i   | google-images            | http://www.google.com/images?hl=en&source=hp&q=%s                        |
   | GoogleMaps    | m   | google-maps              | http://maps.google.com/maps?q=%s                                         |
   | StackOverflow | s   | stack-overflow           | https://stackoverflow.com/search?q=%s                                    |
   | Wikipedia     | w   | wikipedia                | http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s |
   | Youtube       | y   | youtube                  | http://www.youtube.com/results?aq=f&oq=&search_query=%s                  |
   |---------------+-----+--------------------------+--------------------------------------------------------------------------|
   | MyAnimeList   | aa  | myanimelist              | https://myanimelist.net/search/all?q=%s                                  |
   | Anime         | aA  | myanimelist/anime        | https://myanimelist.net/anime.php?q=%s                                   |
   | Manga         | am  | myanimelist/manga        | https://myanimelist.net/manga.php?q=%s                                   |
   | Characters    | ac  | myanimelist/chars        | https://myanimelist.net/character.php?q=%s                               |
   | People        | ap  | myanimelist/people       | https://myanimelist.net/people.php?q=%s                                  |
   | News          | an  | myanimelist/news         | https://myanimelist.net/news/search?q=%s                                 |
   | Articles      | aF  | myanimelist/articles     | https://myanimelist.net/featured/search?q=%s                             |
   | Forums        | af  | myanimelist/forums       | https://myanimelist.net/forum/search?u=&uloc=1&loc=-1&q=%s               |
   | Clubs         | aC  | myanimelist/clubs        | https://myanimelist.net/clubs.php?action=find&cn=%s                      |
   | Users         | au  | myanimelist/users        | https://myanimelist.net/users.php?q=%s                                   |
   |---------------+-----+--------------------------+--------------------------------------------------------------------------|
   | Nyaa          | nn  | nyaa                     | https://nyaa.si/?f=0&c=0_0&q=%s                                          |
   | Anime         | na  | nyaa/anime-english       | https://nyaa.si/?f=0&c=1_2&q=%s                                          |
   | AnimeAll      | nA  | nyaa/anime               | https://nyaa.si/?f=0&c=1_0&q=%s                                          |
   | Music         | nm  | nyaa/music               | https://nyaa.si/?f=0&c=2_0&q=%s                                          |
   | Literature    | nl  | nyaa/literature-english  | https://nyaa.si/?f=0&c=3_1&q=%s                                          |
   | LiteratureAll | nL  | nyaa/literature          | https://nyaa.si/?f=0&c=3_0&q=%s                                          |
   | LiveAction    | nv  | nyaa/live-action-english | https://nyaa.si/?f=0&c=4_1&q=%s                                          |
   | LiveActionAll | nV  | nyaa/live-action         | https://nyaa.si/?f=0&c=4_0&q=%s                                          |
   | Images        | ni  | nyaa/images              | https://nyaa.si/?f=0&c=5_0&q=%s                                          |
   | Software      | ns  | nyaa/software            | https://nyaa.si/?f=0&c=6_0&q=%s                                          |
   | Games         | ng  | nyaa/games               | https://nyaa.si/?f=0&c=6_2&q=%s                                          |

   #+NAME: engine-mode-prefix-names
   | prefix | name        |
   |--------+-------------|
   | n      | Nyaa        |
   | a      | MyAnimeList |

   #+BEGIN_SRC emacs-lisp :var engines=engine-mode-search-engines prefix-aliases=engine-mode-prefix-names :results output
     (setq engines (cdr engines)) ;; strip header row

     (use-package engine-mode
       :only (package! engine-mode)
       :ensure t
       :defer  t
       :init
       (let ((engine-prefix "se"))
         (leader/set-keys engine-prefix "engines")

         (dolist (engine engines)
           (let* ((key               (nth 1 engine))
                  (identifier-string (nth 2 engine))
                  (engine            (nth 0 engine))

                  (function-identifier (intern
                                        (concat "engine/search-"
                                                identifier-string)))
                  (key (unless (string-empty-p key)
                         (concat engine-prefix key))))
             (when key
               (leader/set-keys key `(,engine . ,function-identifier)))
             (autoload function-identifier "engine-mode.el" nil t)))

         (dolist (alias prefix-aliases)
           (let* ((prefix (concat engine-prefix (car alias)))
                  (name   (nth 1 alias)))
             (leader/set-keys prefix name))))

       :config
       (dolist (engine engines)
         (let* ((identifier-string (nth 2 engine))
                (query-link        (nth 3 engine))
                (identifier (when identifier-string
                              (intern identifier-string))))
           (when (and identifier
                      (not (string-empty-p query-link)))
             (eval
              `(defengine ,identifier
                 ,query-link))))))
   #+END_SRC

** expand-region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :only (package! expand-region)
       :ensure t
       :defer  t
       :init
       (general-define-key
        :states 'visual
        "g SPC" 'er/expand-region))
   #+END_SRC

** flycheck
   On the fly syntax checker for emacs. finds where you've written bugs, adds an icon
   to the fringe and underlines it.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :only (package! flycheck)
       :ensure t
       :defer  t
       ;; :delight " ‚ì¢"
       :delight "FlyCheck"
       :init
       (leader/set-keys
         "e." 'hydra-flycheck/body
         "ex" 'flycheck-clear
         "ed" 'flycheck-explain-error-at-point
         "eh" 'flycheck-describe-checker
         "e1" 'flycheck-first-error
         "eL" 'goto-flycheck-error-list
         "el" 'flycheck-list-errors
         "eC" 'flycheck-set-checker-executable
         "ec" 'flycheck-select-checker
         "ev" 'flycheck-verify-setup)

       :config
       (setq flycheck-python-pycompile-executable "python3")
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

       (require '+flycheck-fringe)

       (use-package flycheck-pos-tip
         :ensure t
         :defer  t
         :hook (flycheck-mode-hook . flycheck-pos-tip-mode)
         :commands flycheck-pos-tip-mode)

       ;; automatically jump to first error when listing errors.
       (defun flycheck-list-errors--goto-first-error (func &rest args)
         (let ((flycheck-buffer (get-buffer "*Flycheck errors*")))
           (apply func args) ;; call flycheck-list-errors
           (unless flycheck-buffer
             (flycheck-error-list-goto-first-error))))

       (advice-add 'flycheck-list-errors :around #'flycheck-list-errors--goto-first-error)

       (general-define-key
         :keymaps 'flycheck-error-list-mode-map
         :states  'motion
         "RET" 'flycheck-error-list-goto-error
         "s" 'tabulated-list-sort

         "gj" 'flycheck-error-list-next-error
         "gk" 'flycheck-error-list-previous-error

         "gs" 'flycheck-error-list-check-source)

       (leader/set-keys-for-major-mode 'flycheck-error-list-mode
         "e" 'flycheck-error-list-explain-error
         "s" 'flycheck-error-list-check-source ;; syntax check buffer
         "f" 'flycheck-error-list-follow-mode
         "l" 'flycheck-error-list-set-filter
         "r" 'flycheck-error-list-reset-filter))
   #+END_SRC

*** commands
    #+BEGIN_SRC emacs-lisp
      (use-package +flycheck-commands
        :commands (toggle-flycheck-messages
                   flycheck-last-error
                   flycheck-error-list-goto-first-error
                   flycheck-error-list-goto-last-error
                   flycheck-error-list-goto-error-or-eob+
                   flycheck-error-list-follow-mode)
        :init
        (leader/set-keys
          "e$" 'flycheck-last-error
          "te" 'toggle-flycheck-messages)

        :config
        (general-define-key
         :keymaps 'flycheck-error-list-mode-map
         :states  'motion
         "gh" 'flycheck-error-list-goto-first-error
         "gl" 'flycheck-error-list-goto-last-error))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+flycheck-commands.el
      (defvar-local flycheck-original-display-errors-function nil
        "the value of `flycheck-display-errors-function' before being toggled
      by `toggle-flycheck-messages'.")

      (defun toggle-flycheck-messages (&optional prefix)
        (interactive "P")
        (let ((enabling
               (cond
                (prefix
                 (not (zerop (prefix-numeric-value prefix))))
                (t flycheck-original-display-errors-function))))
          (when (and enabling
                     (not flycheck-original-display-errors-function))
            (user-error "trying to restore a non-existant error function"))

          (if enabling
              (setq flycheck-display-errors-function flycheck-original-display-errors-function
                    flycheck-original-display-errors-function nil)
            (setq flycheck-original-display-errors-function flycheck-display-errors-function
                  flycheck-display-errors-function nil))

          (message "%s flycheck messages"
                   (if enabling
                       (propertize "enabled" 'face 'compilation-info)
                     (propertize "disabled" 'face 'compilation-error)))))

      (defun flycheck-last-error ()
        (interactive)
        (goto-char (point-max))
        (flycheck-previous-error))

      (defun flycheck-error-list-goto-first-error ()
        (interactive)
        (goto-char (point-min))
        (flycheck-error-list-next-error 1)
        (flycheck-error-list-previous-error 1))

      (defun flycheck-error-list-goto-last-error ()
        (interactive)
        (goto-char (point-max))
        (flycheck-error-list-previous-error 1))

      (evil-define-motion flycheck-error-list-goto-error-or-eob+ (count)
        :jump t
        :type line
        (if (null count)
            (flycheck-error-list-goto-last-error)
          (flycheck-goto-line count)))

      (define-minor-mode flycheck-error-list-follow-mode
        "minor mode for `flycheck-error-list-mode' which toggles the behaviour
      of evil forward-line/goto-line functions to use their flycheck variants."
        nil
        "flyfollow"
        '(([remap evil-next-line]       . flycheck-error-list-next-error)
          ([remap evil-previous-line]   . flycheck-error-list-previous-error)
          ([remap evil-goto-first-line] . flycheck-error-list-goto-first-error)
          ([remap evil-goto-line]       . flycheck-error-list-goto-error-or-eob+)))

      (provide '+flycheck-commands)
    #+END_SRC

*** fringe
    #+BEGIN_SRC emacs-lisp :tangle lisp/+flycheck-fringe.el
      ;; update fringe for flycheck [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bcheckers/syntax-checking/packages.el][src]].
      (define-fringe-bitmap '+flycheck-fringe-indicator
        (vector #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00011100
                #b00111110
                #b00111110
                #b00111110
                #b00011100
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000))

      (let ((bitmap '+flycheck-fringe-indicator))
        (flycheck-define-error-level 'error
          :severity 2
          :overlay-category 'flycheck-error-overlay
          :fringe-bitmap bitmap
          :fringe-face 'flycheck-fringe-error)
        (flycheck-define-error-level 'warning
          :severity 1
          :overlay-category 'flycheck-warning-overlay
          :fringe-bitmap bitmap
          :fringe-face 'flycheck-fringe-warning)
        (flycheck-define-error-level 'info
          :severity 0
          :overlay-category 'flycheck-info-overlay
          :fringe-bitmap bitmap
          :fringe-face 'flycheck-fringe-info))

      (provide '+flycheck-fringe)
    #+END_SRC

** frog-jump-buffer
   Display an avy like popup of your most recent buffers and then jump to it.
   now that I have ibuffer and ~counsel-switch-buffer~, I don't really need it.

   #+BEGIN_SRC emacs-lisp
     (use-package frog-jump-buffer
       :only (package! frog-jump-buffer)
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "jb" 'frog-jump-buffer))
   #+END_SRC

** ggtags
   #+BEGIN_SRC emacs-lisp
     (use-package ggtags
       :only (package! ggtags)
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "T"  "tags"
         "TD" 'ggtags-delete-tags
         "T/" 'ggtags-grep)

       :config
       ;; NOTE ggtags-global-mode is not a global mode... global is
       ;;      for GNU *global* tagging system
       (leader/set-keys-for-major-mode 'ggtags-global-mode
         "r" 'recompile
         "f" 'next-error-follow-minor-mode))
   #+END_SRC

** hide-comnt
   Toggles the display of comments in the current buffer.

   #+BEGIN_SRC emacs-lisp
     (use-package hide-comnt
       :only (package! hide-comnt)
       :defer t
       :commands hide/show-comments-toggle
       :init
       (leader/set-keys
         "t/" 'hide/show-comments-toggle))
   #+END_SRC

** link-hint
   An alternative to [[*ace-link][ace-link]] with support for more flexible link sources.

   #+BEGIN_SRC emacs-lisp
     (use-package link-hint
       :only (package! link-hint)
       :ensure t
       :defer  t
       :init
       (leader/set-keys
         "j RET" 'link-hint-open-link
         "j y" 'link-hint-copy-link)

       :config
       ;; support rustic compilation related modes.
       (link-hint-define-type 'compilation-link
         :vars (append
                (get 'link-hint-compilation-link :vars)
                '(rustic-compilation-mode
                  rustic-cargo-test-mode))))
   #+END_SRC

** lsp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :only (package! lsp-mode)
       :ensure t
       :defer  t
       ;; never use lsp-mode, use lsp.
       :config
       (setq lsp-prefer-flymake             nil
             lsp-enable-snippet             nil
             lsp-enable-symbol-highlighting nil
             lsp-auto-guess-root            t
             lsp-map+ (make-sparse-keymap)
             lsp-session-file (var! "lsp/session")
             lsp-server-install-dir (var! "lsp/servers"))

       (leader/set-keys-for-mode 'lsp-mode
         "jy" 'lsp-goto-type-definition
         "jY" 'lsp-goto-implementation)

       (leader/with-prefix leader-server-leader-prefix
         (leader/set-keys-for-mode 'lsp-mode
           "" "server"

           "?"   'lsp-describe-session
           "|"   'lsp-describe-thing-at-point
           "e"   'lsp-execute-code-action
           "h"   'lsp-document-highlight
           "DEL" 'lsp-disconnect

           "w"  "workspace"
           "wR" 'lsp-restart-workspace
           "wa" 'lsp-workspace-folders-add
           "wr" 'lsp-workspace-folders-remove
           "ws" 'lsp-workspace-folders-switch

           "l"  "lens"
           "ll" 'lsp-lens-mode
           "ls" 'lsp-lens-show
           "lh" 'lsp-lens-hide

           "r"  "refactor"
           "rr" 'lsp-format-buffer
           "ri" 'lsp-organize-imports
           "rc" 'lsp-rename

           "g"  "goto"
           "gg" 'lsp-goto-type-definition
           "gG" 'lsp-goto-implementation
           "gF" 'lsp-find-implementation
           "gf" 'lsp-find-type-definition)))
   #+END_SRC

*** lsp-ui
    UI enhancements for lsp sessions... tries to make emacs more like VS Code. Boooooo!!!

    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :only (package! lsp-mode)
        :ensure t
        :defer  t
        ;; :hook (lsp-mode-hook . lsp-ui-mode)
        :after lsp-mode
        :config
        ;; only really installed for flycheck support
        (setq lsp-ui-sideline-enable nil
              lsp-ui-doc-enable nil)

        (leader/with-prefix leader-server-leader-prefix
          (leader/set-keys-for-mode 'lsp-mode
            "p" "peek"
            "pg" 'lsp-ui-peek-find-definitions
            "pG" 'lsp-ui-peek-find-definitions)))
    #+END_SRC

*** company-lsp
    use lsp as a completion backend for company.

    #+BEGIN_SRC emacs-lisp
      (use-package company-lsp
        :only (package! lsp-mode)
        :ensure t
        :defer  t
        :after  lsp-mode
        :commands company-lsp
        :init
        (company/configure-mode (lsp-mode)
          company-lsp)

        :config
        ;; reduces write lag
        (setq company-lsp-cache-candidates t))
    #+END_SRC

** magit
   A git porcelain in emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :only (package! magit)
       :ensure t
       :defer  t
       :init
       (setq magit-revision-show-gravatars  '("^Author:     " . "^Commit:     ")
             ;; show magit status in a full screen window.
             magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)

       (leader/with-prefix "g"
         (leader/set-keys
           ""  "magit"
           "$" 'magit-process-buffer
           "!" 'magit-run
           "g" 'magit-dispatch
           "s" 'magit-status
           "u" 'magit-unstage-file
           "h" 'magit-log-buffer-file))

       :config
       (require 'transient)

       (use-package evil-magit
         :ensure t
         :demand t
         :init
         (setq evil-magit-state 'motion
               evil-magit-use-y-for-yank t
               evil-magit-emacs-to-default-state-modes nil)

         :config
          ;; prevent evil-window-map overriding emacs-window-map
         (general-unbind :states `(,evil-magit-state visual) :keymaps 'magit-mode-map "C-w" ))

       (add-hook 'magit-mode-hook
                 (defun magit-cleanup-defaults+ ()
                   ;; messes up alignment on rescroll
                   (setq-local scroll-conservatively 0)))

       (leader/set-keys-for-major-mode 'magit-status-mode
         "z" 'magit-jump-to-stashes
         "u" 'magit-jump-to-unstaged
         "s" 'magit-jump-to-staged
         "f" 'magit-jump-to-untracked)

       (leader/set-keys-for-major-mode 'magit-log-select-mode
         "," 'magit-log-select-pick
         "q" 'magit-log-select-quit)

       (advice-add 'magit-section-up :around
                   (defun magit-section-up--adjust-destination (func &rest args)
                     (cond
                      ((magit-diff-inside-hunk-body-p)
                       (magit-section-goto (magit-current-section)))
                      (t (apply func args)))))

       (setq whitespace-exempt-modes
             (append '(magit-status-mode
                       magit-log-mode
                       magit-diff-mode)
                     whitespace-exempt-modes))

       (leader/set-keys-for-mode 'magit-log-select-mode
         "," 'magit-log-select-pick
         "q" 'magit-log-select-quit)

       (general-define-key
         :states evil-magit-state
         :keymaps 'magit-mode-map
         "gl" 'magit-section-forward)

       (general-define-key
         :states evil-magit-state
         :keymaps 'magit-diff-mode-map
         "gh" 'magit-section-up)

       ;; GIVE ME BACK MY LEADER!!!
       (general-define-key
         :keymaps '(magit-mode-map magit-diff-mode-map)
         leader-key nil
         "C-w" emacs-window-map)

       (general-define-key
         :keymaps 'magit-mode-map
         "M-j" 'magit-section-forward-sibling
         "M-k" 'magit-section-backward-sibling

         ;; ;; toggle children doesn't seem to work
         ;; "C-r" 'magit-section-hide-children ; recursive close
         ;; "C-e" 'magit-section-show-children ; recursive expand
         ;; "M-r" 'magit-section-hide-children ; Meta aliases
         ;; "M-e" 'magit-section-show-children ; Meta aliases

         ;; visit and expand
         "RET"   'magit-section-toggle
         "TAB"   'magit-section-toggle
         "M-RET" 'magit-visit-thing)

       (general-define-key
         :keymaps 'magit-log-mode-map
         "RET" 'magit-visit-thing)

       (leader/with-major-mode-prefix
         (leader/set-keys-for-mode 'git-commit-mode
           "s"  'git-commit-save-message
           "d"  'magit-diff-while-committing
           "j"  'git-commit-next-message
           "k"  'git-commit-prev-message

           "i"  "insert"
           "ia" 'git-commit-ack ;; knowledgement
           "iS" 'git-commit-suggested
           "im" 'git-commit-modified
           "ic" 'git-commit-cc
           "ir" 'git-commit-reported
           "iR" 'git-commit-review
           "is" 'git-commit-signoff
           "it" 'git-commit-test)))
   #+END_SRC

*** git-rebase
    major mode for editing rebase files. bundled with magit... even though it's not
    prefixed ~magit-~.

    #+BEGIN_SRC emacs-lisp
      (use-package git-rebase
        :only (package! magit)
        :config
        ;; reclaim leader key
        (general-unbind :keymaps 'git-rebase-mode-map "SPC")

        (general-define-key
         ;; git-rebase-show-or-scroll-up
         ;; git-rebase-show-or-scroll-down
         :keymaps 'git-rebase-mode-map
         :states  'motion
         "RET" 'git-rebase-show-commit)

        ;; (leader/set-keys-for-major-mode 'git-rebase-mode
        ;;   "x" 'git-rebase-kill-line
        ;;   )
        )
    #+END_SRC

*** magit-todos
    #+BEGIN_SRC emacs-lisp
      (use-package magit-todos
        :only (package! magit)
        :ensure t
        :defer  t
        :after  magit
        :hook (magit-mode . magit-todos-mode)
        :config
        (general-unbind
          :keymaps '(magit-todos-item-section-map
                     magit-todos-section-map)
          "j" "B" "b")

        (leader/set-keys-for-major-mode 'magit-status-mode
          "T" 'magit-todos-list
          "t" 'magit-todos-jump-to-todos))
    #+END_SRC

*** magit-gitflow
    #+BEGIN_SRC emacs-lisp
      (use-package magit-gitflow
        :only (package! magit)
        :ensure t
        :defer  t
        :after  magit
        :hook (magit-mode . turn-on-magit-gitflow)
        :delight
        (magit-gitflow-mode "GitFlow")

        :init
        (with-eval-after-load 'magit--handle-bookmark
          (general-define-key
           :keymaps 'magit-mode-map
           "%" 'magit-gitflow-popup)))
    #+END_SRC

*** transient
    #+BEGIN_SRC emacs-lisp
      (use-package transient
        :only (package! magit)
        :ensure t
        :defer  t
        :config
        (setq transient-history-file (var! "transient/history.el")
              transient-values-file  (etc! "transient/values.el")
              transient-levels-file  (etc! "transient/levels.el"))

        (general-define-key
         :keymaps 'transient-base-map
           ;;; escape means quit too
         "ESC"      'transient-quit-one
         "<escape>" 'transient-quit-one))
    #+END_SRC

** olivetti
   A nice writing environment for emacs :)

   #+BEGIN_SRC emacs-lisp
     (use-package olivetti
       :only (package! olivetti)
       :ensure t
       :defer  t
       :commands olivetti-setup-buffer
       :hook (olivetti-mode . olivetti-setup-buffer)
       :init
       (leader/set-keys
         "M'" 'olivetti-mode)

       (defvar olivetti-hide-fringe+ nil
         "when true, olivetti mode will hide the window fringe.")

       (general-define-key
         :keymaps 'olivetti-mode-map
         "C-c >" #'olivetti-expand
         "C-c <" #'olivetti-shrink)

       :config
       (add-hook 'olivetti-mode-hook
                 (defun olivetti-setup-buffer ()
                   "hide line numbers and the fringe."
                   (display-line-numbers-mode
                    (if olivetti-mode -1 +1))

                   (eval
                    `(set-window-fringes
                      (selected-window)
                      ,@(if (and olivetti-mode
                                 olivetti-hide-fringe+)
                            '(0 0)
                          '(8 8))))))

       (leader/set-keys
         (concat leader-minor-mode-leader-prefix "-") 'olivetti-set-width))
   #+END_SRC

** pdftools
   Use emacs as a quick and dirty pdf viewer.

   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :only (package! pdf-tools)
       :ensure t
       :defer  t
       :mode ("\\.pdf$" . pdf-view-mode)
       ;; see [[https://www.reddit.com/r/emacs/comments/6g15nk/pdftools_latex_freeze/][here]].
       :hook (pdf-view-mode . (lambda ()
                                (line-number-mode -1)))
       :config
       (setq-default pdf-view-display-size 'fit-page)

       ;; only accepts absolute paths and doesn't automatically append ".exe" when on windows.
       (eval-when-compile
         (let ((epdfinfo-program (expand-file-name (var! "pdf-tools/epdfinfo"))))
           (when (windows-p)
             (setq epdfinfo-program (concat epdfinfo-program ".exe")))
           (setq pdf-info-epdfinfo-program epdfinfo-program)))

       (evil-set-initial-state 'pdf-view-mode 'motion)

       ;; (pdf-tools-install)

       (require '+pdf-tools-bindings))
   #+END_SRC

*** bindings
    #+BEGIN_SRC emacs-lisp :tangle lisp/+pdf-tools-bindings.el
      (general-define-key
       :keymaps 'pdf-view-mode-map
       :states 'motion
       ;; "RET" 'image-next-line
       "TAB" 'pdf-outline
       ;; TODO make interactive ivy-based outline

       "w" 'pdf-view-fit-height-to-window
       "e" 'pdf-view-fit-width-to-window
       "E" 'pdf-view-fit-page-to-window

       "J" 'pdf-view-next-page-command
       "K" 'pdf-view-previous-page-command

       "gj" 'image-next-line
       "gk" 'image-previous-line

       "h" 'evil-scroll-column-left
       "l" 'evil-scroll-column-right

       ;; "C-j" 'pdf-view-next-page-command
       ;; "C-k" 'pdf-view-previous-page-command

       ;; "]]" 'pdf-view-next-page-command
       ;; "[[" 'pdf-view-previous-page-command

       "H" 'beginning-of-buffer
       "L" 'end-of-buffer

       "=" 'pdf-view-scale-reset
       "+" 'pdf-view-enlarge
       "-" 'pdf-view-shrink

       "C-d" 'pdf-view-scroll-up-or-next-page
       "C-u" 'pdf-view-scroll-down-or-previous-page

       "m" 'pdf-view-position-to-register
       "'" 'pdf-view-jump-to-register
       "`" 'pdf-view-jump-to-register

       "q" nil
       "Q" 'kill-this-buffer)

      (general-define-key
       :keymaps 'pdf-view-mode-map
       :states 'visual
       "y" 'pdf-view-kill-ring-save)

      (leader/set-keys-for-major-mode 'pdf-view-mode
        "l" 'pdf-view-goto-label
        "o" 'pdf-occur

        ;; modify the display of the PDF.
        "TAB" 'doc-view-mode
        "d" 'pdf-view-dark-minor-mode
        "D" 'pdf-view-midnight-minor-mode
        "p" 'pdf-view-printer-minor-mode

        ;; narrow to a subslice of the given page.
        "s"  "slice"
        "sm" 'pdf-view-set-slice-using-mouse
        "ss" 'pdf-view-set-slice-from-bounding-box
        "sr" 'pdf-view-reset-slice)

      (evil-set-initial-state 'pdf-outline-buffer-mode 'motion)

      (general-define-key
       :states  'motion
       :keymaps 'pdf-outline-buffer-mode-map
       "o" 'pdf-outline-display-link
       "sa" 'show-all
       "ss" 'show-subtree
       "sh" 'hide-subtree
       "sn" 'hide-subtree
       "gh" 'pdf-outline-up-heading
       "gk" 'outline-backward-same-level
       "gj" 'outline-forward-same-level
       "gl" 'outline-next-heading
       "gd" 'outline-hide-entry
       "g SPC" 'pdf-outline-select-pdf-window

       "<C-return>" 'pdf-outline-follow-link
       "M-RET" 'pdf-outline-display-link
       "RET" 'pdf-outline-follow-link-and-quit
       ;; goto current page in the outline window
       "gp" 'pdf-outline-move-to-current-page

       "<C-tab>" 'hide-sublevels
       "<C-up>" 'outline-move-subtree-up
       "<C-down>" 'outline-move-subtree-down)

      (leader/set-keys-for-major-mode 'pdf-outline-buffer-mode
        "f" 'pdf-outline-follow-mode
        "m" 'outline-mark-subtree)

      (evil-set-initial-state 'pdf-occur-buffer-mode 'motion)

      (defvar pdf-occur-buffer-mode-map (make-sparse-keymap))
      (general-define-key
       :states  'motion
       :keymaps 'pdf-occur-buffer-mode-map
       ;; unbound: tablist-export-csv
       "RET" 'pdf-occur-goto-occurrence
       "s" 'pdf-occur-view-occurrence
       "o" 'pdf-occur-view-occurrence
       "d" 'tablist-do-kill-lines
       "x" 'pdf-occur-tablist-do-flagged-delete
       "<backtab>" 'tablist-backward-column
       "DEL" 'tablist-unmark-backward

       [remap evil-first-non-blank] 'tablist-move-to-major-column
       [remap evil-next-line] 'tablist-next-line
       [remap evil-previous-line] 'tablist-previous-line

       "gr" 'pdf-occur-revert-buffer-with-args

       "A" 'pdf-occur-tablist-gather-documents
       "D" 'pdf-occur-tablist-do-delete

       "S" 'tabulated-list-sort
       "gS" 'tablist-revert

       "m" 'tablist-mark-forward
       "~" 'tablist-toggle-marks
       "u" 'tablist-unmark-forward
       "U" 'tablist-unmark-all-marks
       "*m" 'tablist-mark-forward
       "*!" 'tablist-unmark-all-marks
       "*c" 'tablist-change-marks
       "*n" 'tablist-mark-items-numeric
       "*r" 'tablist-mark-items-regexp
       "*%" 'tablist-mark-items-regexp

       "a" 'tablist-flag-forward

       [remap quit-window]  'tablist-quit
       "ZQ" 'tablist-quit
       "ZZ" 'tablist-quit)

      (leader/set-keys-for-major-mode 'pdf-occur-buffer-mode
        "/!" 'tablist-negate-filter
        "//" 'tablist-display-filter
        "/=" 'tablist-push-equal-filter
        "/C" 'tablist-clear-filter
        "/D" 'tablist-delete-named-filter
        "/a" 'tablist-push-named-filter
        "/d" 'tablist-deconstruct-named-filter
        "/e" 'tablist-edit-filter
        "/n" 'tablist-push-numeric-filter
        "/p" 'tablist-pop-filter
        "/r" 'tablist-push-regexp-filter
        "/s" 'tablist-name-current-filter
        "/t" 'tablist-toggle-first-filter-logic
        "/z" 'tablist-suspend-filter)

      (require '+pdf-tools-commands)
      (provide '+pdf-tools-bindings)
    #+END_SRC

*** commands
    #+BEGIN_SRC emacs-lisp
      (use-package +pdf-tools-commands
        :only (package! pdf-tools)
        :config
        (general-define-key
         :keymaps 'pdf-view-mode-map
         :states  'motion
         "j" 'pdf-view-next-line-or-next-page-with-prefix
         "k" 'pdf-view-prev-line-or-prev-page-with-prefix
         "gg" 'pdf-view-goto-first-page-with-prefix
         "G"  'pdf-view-goto-page-with-prefix)

        (leader/set-keys-for-major-mode 'pdf-view-mode
          "g" 'counsel-pdf-outline))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+pdf-tools-commands.el
      ;; functions ripped from evil-collection
      (defun pdf-view-next-line-or-next-page-with-prefix (&optional count)
        "'evil' wrapper include a count argument to `pdf-view-next-line-or-next-page'"
        (interactive "p")
        (if count
            (dotimes (_ count nil)
              (pdf-view-next-line-or-next-page 1))
          (pdf-view-next-line-or-next-page 1)))

      (defun pdf-view-prev-line-or-prev-page-with-prefix (&optional count)
        "'evil' wrapper include a count argument to `pdf-view-previous-line-or-previous-page'"
        (interactive "p")
        (if count
            (dotimes (_ count nil)
              (pdf-view-previous-line-or-previous-page 1))
          (pdf-view-previous-line-or-previous-page 1)))

      (defun pdf-view-goto-page-with-prefix (&optional page)
        "`evil' wrapper around `pdf-view-last-page'."
        (interactive "P")
        (if page
            (pdf-view-goto-page page)
          (pdf-view-last-page)
          (image-eob)))

      (defun pdf-view-goto-first-page-with-prefix (&optional page)
        "`evil' wrapper around `pdf-view-first-page'."
        (interactive "P")
        (if page
            (pdf-view-goto-page page)
          (pdf-view-first-page)
          (image-bob)))

      ;; use counsel to go to an outline entry
      (defun counsel-pdf-outline-action (entry)
        (let ((line (cdr entry)))
          (with-current-buffer (ivy-state-buffer ivy-last)
            (save-excursion
              (goto-line (1+ line)) ;; was starting from 0.
              (call-interactively #'pdf-outline-follow-link)))))

      (defun counsel-pdf-outline ()
        (interactive)
        (require 'pdf-outline)
        (let* ((buffer (pdf-outline-noselect nil))
               entries)
          (with-current-buffer buffer
            (setq entries
                  (split-string
                   (buffer-substring-no-properties
                    (point-min) (point-max))
                   "\n"))

            (ivy-read "Title: "
                      (-zip entries
                            (number-sequence 0 (length entries)))
                      :action #'counsel-pdf-outline-action
                      :caller 'counsel-pdf-outline))))

      (provide '+pdf-tools-commands)
    #+END_SRC

** piper
   #+BEGIN_SRC emacs-lisp
     (use-package piper
       :only (package! piper)
       :defer t
       :straight (emacs-piper :type git :host gitlab :repo "howardabrams/emacs-piper")
       :commands (piper-ui)
       :init
       (leader/with-prefix "|"
         (leader/set-keys
           ""    "piper"
           "RET" 'piper-ui
           "|"   'piper
           "o"   'piper-other
           "@"   'piper-remote))

       :config
       (defalias 'piper-ui #'piper-user-interface))
   #+END_SRC

** rake
   #+BEGIN_SRC emacs-lisp
     (use-package rake
       :only (package! rake)
       :ensure t
       :defer  t
       :commands (rake-refresh)
       :init
       (leader/set-keys
         "cr" 'rake
         "cR" 'rake-rerun)

       :config
       (setq rake-completion-system 'ivy-read
             rake-cache-file (var! "rake.cache"))

       (defalias 'rake-refresh #'rake-regenerate-cache))
   #+END_SRC

** tramp-term
   create remote terminal sessions effortlessly... this should be built into term tbh.

   #+BEGIN_SRC emacs-lisp
     (use-package tramp-term
       :only (package! tramp-term)
       :ensure t
       :defer  t
       :after  term
       :init
       ;; (add-hook 'term :before-until #'term--use-tramp-term-when-in-tramp-directory)

       :config
       ;;   (defun term--use-tramp-term-when-in-tramp-directory (&rest args)
       ;;     "when current buffers is in a tramp path open a tramp term session
       ;; if prefix arg specified, disregard this and open a local term sessions"
       ;;     (when (and (not current-prefix-arg)
       ;;                default-directory
       ;;                (tramp-tramp-file-p default-directory))
       ;;       (tramp-term )
       ;;         )
       ;;     )
       )
   #+END_SRC

** rainbow-mode
   highlights hex color strings in their appropriate color.

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :only (package! rainbow-mode)
       :ensure t
       :defer  t)
    #+END_SRC

** vi-tilde
   display ~ on trailing lines in the fringe. doesn't work with emacs's new builtin line
   numbers mode.

   #+BEGIN_SRC emacs-lisp
     (use-package vi-tilde-fringe
       :only (package! vi-tilde-fringe)
       :ensure t
       :defer  t
       :diminish
       :commands (vi-tilde-fringe-mode global-vi-tilde-fringe-mode)
       :config
       (global-vi-tilde-fringe-mode))
   #+END_SRC

** vdiff
   inspired by vimdiff, vdiff is a better, less intrusive interactive diff tool for
   emacs.

   TODO look into vdiff-magit

   #+BEGIN_SRC emacs-lisp
     (use-package vdiff
       :only (package! vdiff)
       :ensure t
       :defer  t
       :init
       (leader/with-prefix leader-diff-leader-prefix
         (leader/set-keys
           "" "diff"
           "RET" 'vdiff-merge-conflict
           "d" 'vdiff-current-file
           "f" 'vdiff-files
           "F" 'vdiff-files3
           "b" 'vdiff-buffers
           "B" 'vdiff-buffers3))

       :config
       (defvar vdiff-use-relative-line-numbers nil
         "when true, line numbers in vdiff sessions are relative")

       (defun vdiff-setup (&rest args)
         (let ((inhibit-message t))
           (toggle-truncate-lines +1)
           (evil-normalize-keymaps))

         (when vdiff-use-relative-line-numbers
           (setq-local display-line-numbers
                       (if vdiff-mode t 'relative))))

       (defun vdiff-prepare ()
         (cond
          ((derived-mode-p 'org-mode)
           (when vdiff-mode
             (outline-show-all)))))

       (dolist (handler '(vdiff-setup
                          vdiff-prepare))
         (add-hook 'vdiff-mode-hook      handler)
         (add-hook 'vdiff-3way-mode-hook handler))

       (general-define-key
        :states leader-norm-states
        :keymaps '(vdiff-mode-map vdiff-3way-mode-map)
        "q"  'vdiff-quit
        "gj" 'vdiff-next-hunk
        "gk" 'vdiff-previous-hunk
        "gh" 'vdiff-switch-buffer
        "gl" 'vdiff-switch-buffer
        "gr" 'vdiff-refresh
        "zj" 'vdiff-next-fold
        "zk" 'vdiff-previous-fold
        "zo" 'vdiff-open-fold
        "zO" 'vdiff-open-fold
        "zr" 'vdiff-open-all-folds
        "zf" 'vdiff-close-fold
        "zc" 'vdiff-close-fold
        "zF" 'vdiff-close-all-folds
        "zC" 'vdiff-close-all-folds
        "zC" 'vdiff-close-other-folds)

       (leader/with-prefix leader-diff-leader-prefix
         (leader/set-keys-for-mode '(vdiff-mode vdiff-3way-mode)
           "-" 'vdiff-switch-buffer
           "." 'vdiff-hydra/body
           "m" 'vdiff-restore-windows
           "s" 'vdiff-save-buffers
           "<left>"  'vdiff-receive-changes
           "<right>" 'vdiff-send-changes
           ">" 'vdiff-send-changes-and-step
           "<" 'vdiff-send-changes

           "TAB"     "refine"
           "TAB TAB" 'vdiff-refine-this-hunk
           "TAB DEL" 'vdiff-remove-refinements-in-hunk
           "TAB RET" 'vdiff-refine-all-hunks
           ;; 'vdiff-refine-this-hunk-symbol
           ;; 'vdiff-refine-this-hunk-word
           ;; 'vdiff-refine-all-hunks-symbol
           ;; 'vdiff-refine-all-hunks-word

           "t"  "toggle"
           "ti" 'vdiff-toggle-case
           "tw" 'vdiff-toggle-whitespace)))
   #+END_SRC

** vlc-rc
   #+BEGIN_SRC emacs-lisp
     (use-package vlc-rc
       :only (package! vlc-rc)
       :straight (vlc-rc :type git :host github :repo "mohkale/vlc-rc")
       :defer t
       ;; can't defer for now, hopefully when use-package
       ;; supports bind-keymap with specific map, change.
       :commands (vlc/dired-add-file
                  vlc/dired-enqueue-file)
       :init
       (setq vlc-rc-map (make-sparse-keymap))

       (leader/with-prefix "v"
         (leader/set-keys
           "" "VLC"
           "" vlc-rc-map

           "s" "set"
           "t" "toggle"))

       (general-define-key
         :keymaps 'dired-mode-map
         :states '(normal motion)
         "v"  nil
         "vv" 'vlc/dired-add-file
         "vq" 'vlc/dired-enqueue-file)

       (general-define-key
         :keymaps 'vlc-rc-map
         "C-." 'hydra-vlc-rc/body))

     (provide '+init-vlc-rc)
   #+END_SRC

** vterm
   TODO refactor

   #+BEGIN_SRC emacs-lisp
     (use-package vterm
       :only (package! vterm)
       :ensure t
       :defer  t
       :commands (vterm-toggle
                  vterm-toggle-fullscreen
                  vterm-toggle-new-buffer+)
       :init
       (leader/set-keys
         "av" '("vterm" . vterm-toggle)
         "at" '("vterm-new" . vterm-toggle-new-buffer+)
         "tv" '("toggle-vterm-fullscreen" . vterm-toggle-fullscreen))

       :config
       (push 'vterm-mode whitespace-exempt-modes)
       (evil-set-initial-state 'vterm-mode 'emacs)

       (setq vterm-kill-buffer-on-exit t
             vterm-always-compile-module t
             vterm-buffer-name-string "*vterm: %s*"
             multi-vterm-buffer-name "*vterminal*"
             vterm-keymap-exceptions '("C-SPC" "C-g" "C-c" "M-x"))

       (use-package vterm-toggle
         :ensure t
         :defer  t
         :init
         (defun vterm-toggle-fullscreen (&optional arg)
           (interactive "P")

           (setq vterm-toggle-fullscreen-p
                 (if (not arg)
                     (not vterm-toggle-fullscreen-p)
                   (or (listp arg)
                       (not (zerop arg)))))

           (setq vterm-toggle-reset-window-configration-after-exit vterm-toggle-fullscreen-p)

           (message "vterm fullscreen: %s"
                    (if vterm-toggle-fullscreen-p
                        (propertize "enabled" 'face 'compilation-info)
                      (propertize "disabled" 'face 'compilation-error))))

         :config
         (setq vterm-toggle-cd-auto-create-buffer t)

         (let ((inhibit-message t))
           (vterm-toggle-fullscreen +1)))

       ;; prevent vterm being opened in a new window
       (advice-add 'vterm-toggle--new :override #'vterm)

       (defun vterm-toggle-new-buffer+ ()
         (interactive)
         "create a new vterm buffer using vterm-toggle's interface."
         (let ((current-config (current-window-configuration)))
           (if vterm-toggle-fullscreen-p
               (progn
                 (delete-other-windows)
                 (switch-to-buffer (vterm)))
             (pop-to-buffer (vterm)))

           (setq vterm-toggle--window-configration current-config)))

       (defvar-local vterm-send-escape-to-vterm-p nil
         "Track whether or not we send ESC to `vterm' or `emacs'.")

       (defun vterm-toggle-send-escape (&optional value)
         "toggle whether escape is sent to vterm or to emacs.
     only works with GUI emacs... but good enough, I guess."
         (interactive)
         (let ((sending-to-emacs (or (eq value 'emacs)
                                     vterm-send-escape-to-vterm-p)))
           (general-define-key
            :keymaps 'vterm-mode-map
            "<escape>" (if sending-to-emacs
                           nil
                         'vterm--self-insert))
           (setq vterm-send-escape-to-vterm-p (not sending-to-emacs))

           (message (format "Sending ESC to %s."
                            (if vterm-send-escape-to-vterm-p "vterm" "emacs")))))

       ;; by default, escape is sent to vterm, not emacs.
       (let ((inhibit-message t))
         (vterm-toggle-send-escape 'vterm))

       (defun vterm-send-escape ()
         (interactive)
         (when vterm--term
           (process-send-string vterm--process "\C-[")))

       (defun vterm-send-ctrl-space ()
         (interactive)
         (when vterm--term
           (process-send-string vterm--process "\C-@")))

       (defun vterm-mouse-set-point (&rest args)
         "tmux like mouse handler. on click, switch to copy-mode."
         (interactive)
         (vterm-copy-mode +1)
         (funcall-interactively 'mouse-set-point args))

       ;; source [[https://github.com/akermu/emacs-libvterm#counsel-yank-pop-doesnt-work][emacs-libvterm]].
       (defun vterm-counsel-yank-pop-action (orig-fun &rest args)
         (if (equal major-mode 'vterm-mode)
             (let ((inhibit-read-only t)
                   (yank-undo-function (lambda (_start _end) (vterm-undo))))
               (cl-letf (((symbol-function 'insert-for-yank)
                          (lambda (str) (vterm-send-string str t))))
                 (apply orig-fun args)))
           (apply orig-fun args)))

       (advice-add 'counsel-yank-pop-action :around
                   #'vterm-counsel-yank-pop-action)

       (advice-add 'switch-to-last-buffer :filter-args
                   (defun switch-to-last-buffer--bury-vterm-buffers (&rest args)
                     "prevent `switch-to-last-buffer' oferring vterm.
     unless there's LITERALLY no other buffer you could possibly mean to go to."
                     (let ((buffer (car args))
                           (i 0)
                           (length (length (buffer-list))))
                       (while (and (< i length)
                                   (not buffer))
                         (setq i (1+ i))

                         (with-current-buffer (other-buffer)
                           (if (derived-mode-p 'vterm-mode)
                               (bury-buffer)
                             (setq buffer (current-buffer)))))

                       (list (or buffer
                                 (other-buffer))))))

       (advice-add 'switch-to-last-buffer :before-until
                   (defun switch-to-last-buffer--pop-vterm-window-config ()
                     "when switching to last buffer from a maximized vterm buffer
     instead switch to the window config from before the "
                     (when (and (derived-mode-p 'vterm-mode)
                                vterm-toggle-fullscreen-p
                                vterm-toggle--window-configration)
                       (set-window-configuration vterm-toggle--window-configration)
                       (setq vterm-toggle--window-configration nil)
                       t)))

       (general-define-key
        :keymaps 'vterm-mode-map
        "<mouse-1>" 'vterm-mouse-set-point
        "<C-backspace>" 'vterm-send-C-w
        "C-h" 'vterm-send-C-h
        "C-v" 'vterm-send-C-v
        "M-v" 'vterm-copy-mode
        "C-u" 'vterm-send-C-u
        "C-c C-g" 'vterm-send-C-g
        "C-c C-c" 'vterm-send-C-c
        "C-c SPC"   'vterm-send-ctrl-space
        "C-c C-SPC" 'vterm-send-ctrl-space
        "C-ESC" 'vterm-send-escape
        "M-ESC" 'vterm-send-escape

        ;; this is Magic :space_invader:.
        "C-S-n" 'vterm-toggle-forward
        "C-S-p" 'vterm-toggle-backward)

       (general-define-key
        :keymaps 'vterm-copy-mode-map
        :states 'motion
        [remap evil-end-of-line] 'vterm-end-of-line
        "gj" 'vterm-next-prompt
        "gk" 'vterm-previous-prompt
        "RET" 'vterm-copy-mode)

       ;; TMUX compatibility bindings
       (general-define-key
        :states 'emacs
        :prefix leader-nnorm-key
        :keymaps 'vterm-mode-map
        "v" '("copy-mode" . vterm-copy-mode)
        "p" 'vterm-yank)

       (general-define-key
        :prefix leader-nnorm-key
        :states 'motion
        :keymaps 'vterm-copy-mode-map
        "v" 'vterm-copy-mode
        "p" 'vterm-yank)

       (add-hook 'vterm-copy-mode-hook
                 (defun vterm-copy-mode-switch-evil-state (&rest _)
                   (if vterm-copy-mode
                       (evil-change-state 'motion)
                     (evil-change-state 'emacs))))

       (add-hook 'vterm-mode-hook
                 (defun vterm-keep-cursor-on-evil-state-change ()
                   (setq-local evil-move-cursor-back nil)))

       (advice-add 'vterm-send-return :override
                   (defun vterm-send-return-as-ctrl-m ()
                     (when vterm--term
                       (process-send-string vterm--process "\C-m")))))

     (provide '+init-vterm)
   #+END_SRC

*** commands
    define elisp commands accessible through the ~vterm_cmd~ shell function.

    #+NAME: vterm-cmds
    | name                   | cmd                              |
    |------------------------+----------------------------------|
    | find-file              | vterm-cmd-find-file              |
    | find-file-other-window | vterm-cmd-find-file-other-window |
    | list-buffers           | vterm-cmd-list-buffers           |
    | message                | message                          |
    | vterm-clear-scrollback | vterm-clear-scrollback           |

    #+BEGIN_SRC emacs-lisp :var cmds=vterm-cmds :results silent
      (use-package vterm
        :only (package! vterm)
        :config
        (setq vterm-eval-cmds
              (cl-loop for (name cmd) in cmds
                       do (setq cmd-sym (intern cmd))
                       when (string-prefix-p "vterm-cmd" cmd)
                         do (autoload cmd-sym "+vterm-cmds.el")
                       end

                       collect (list name cmd-sym))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+vterm-cmds.el
      (defun vterm-cmd-find-file (&rest paths)
        (cl-loop for path in (or paths (list default-directory))
                 do (find-file path)))

      (defun vterm-cmd-find-file-other-window (&rest paths)
        (cl-loop for path in (or paths (list default-directory))
                 do (find-file-other-window path)))

      (defun vterm-cmd-list-buffers ()
        (ibuffer t))

      (provide '+vterm-commands)
    #+END_SRC

** wakatime
   #+BEGIN_SRC emacs-lisp
     (use-package wakatime-mode
       :only (package! wakatime)
       :ensure t
       :defer  t
       :hook (after-init-hook . global-wakatime-mode)
       :config
       ;; TODO move api key to private.
       (setq wakatime-api-key "0fba4add-c2c4-4950-9528-927a0652d7a1"))
   #+END_SRC

** ycmd
    #+BEGIN_SRC emacs-lisp
      (use-package ycmd
        :only (package! ycmd)
        :ensure t
        :defer  t
        :delight "YCMD"
        :hook (ycmd-mode . ycmd-eldoc-setup)
        :config
        ;; NOTE to enable ycmd completion, hook ycmd-mode into any desired
        ;;      buffers and include company-ycmd in the company backends for
        ;;      the mode.

        (setq ycmd-global-config (expand-file-name "~/.ycmd-config")
              ycmd-startup-timeout 10
              ycmd-server-command `("python3" "-u" ,(expand-file-name "~/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd"))
              ycmd-map+ (make-sparse-keymap))

        ;; (ycmd-toggle-force-semantic-completion)

        (leader/with-prefix leader-server-leader-prefix
          (leader/set-keys-for-mode 'ycmd-mode
            ""  "ycmd"
            "y" 'ycmd-mode
            "Y" 'global-ycmd-mode
            "n" 'ycmd-open
            "k" 'ycmd-close
            "v" 'ycmd-version
            "b" 'ycmd-parse-buffer
            "c" 'ycmd-load-conf-file
            "C" 'ycmd-clear-compilation-flag-cache
            "s" 'ycmd-show-debug-info
            "d" 'ycmd-show-documentation
            "l" 'ycmd-toggle-log-enabled
            "r" 'ycmd-restart-semantic-server
            "t" 'ycmd-get-type
            "." 'ycmd-completer ;; completing-read all ycmd requests
            "SPC" 'ycmd-toggle-force-semantic-completion
            "C-r" 'ycmd-refactor-rename
            "C-c" 'ycmd-display-completions

            "g"  "jump"
            "gg" 'ycmd-goto
            "gG" 'ycmd-goto-imprecise
            "gt" 'ycmd-goto-type
            "gd" 'ycmd-goto-definition
            "gD" 'ycmd-goto-declaration
            "gr" 'ycmd-goto-references
            "gi" 'ycmd-goto-include
            "gI" 'ycmd-goto-implementation)))
    #+END_SRC

*** company-ycmd
    #+BEGIN_SRC emacs-lisp
      (use-package company-ycmd
        :only (package! ycmd)
        :ensure t
        :demand t
        :after (company ycmd)
        :init
        (company/configure-mode (ycmd-mode)
          company-ycmd))
    #+END_SRC

*** flycheck-ycmd
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-ycmd
        :only (package! ycmd flycheck)
        :ensure t
        :defer  t
        :after (flycheck ycmd)
        :hook (ycmd-mode . flycheck-ycmd-setup))
    #+END_SRC

** ztree
   #+BEGIN_SRC emacs-lisp
     (use-package ztree
       :only (package! ztree)
       :ensure t
       :defer  t
       :config
       (evil-set-initial-state 'ztree-mode 'motion)

       (general-define-key
         :states  'motion
         :keymaps 'ztree-mode-map
         "gr"    'ztree-refresh-buffer
         "j"     'ztree-next-line
         "k"     'ztree-previous-line
         "gh"    'ztree-move-up-in-tree
         "gl"    'ztree-next-line
         "RET"   'ztree-dir-open-dired-at-point
         "TAB"   'ztree-perform-action
         "M-TAB" 'ztree-perform-soft-action
         "DEL"   'ztree-move-up-in-tree)

       (leader/set-keys-for-major-mode 'ztree-mode
         "TAB" 'ztree-jump-side
         "n"   'ztree-dir-widen-to-parent
         "w"   'ztree-dir-narrow-to-dir
         "h"   'ztree-dir-toggle-show-filtered-files))
   #+END_SRC

* Languages
  [[*Extensions][Extensions]] providing tailored support for specific programming languages or tools.

** clojure
   #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode
       :only (package! clojure)
       :ensure t
       :defer  t
       :mode ((rx ".edn") . clojure-mode))
   #+END_SRC

** restclient
*** restclient-mode
    #+BEGIN_SRC emacs-lisp
      (use-package restclient
        :only (package! restclient)
        :ensure t
        :defer  t
        :commands (restclient)
        :init
        (leader/set-keys
          "ar" 'restclient)

        :config
        (let ((leader leader-major-mode-key))
          (leader/set-keys-for-major-mode 'restclient-mode
            "RET"   '("execute-current" . restclient-http-send-current)
            "M-RET" '("execute-current-raw" . restclient-http-send-current-raw)
            leader  '("execute-current-same-window" . restclient-http-send-current-stay-in-window)
            "y"     '("yank-curl-command" . restclient-copy-curl-command)
            "m"     'restclient-mark-current
            "n"     'restclient-narrow-to-current
            "w"     'widen))

        (general-define-key
          :states 'motion
          :keymaps 'restclient-mode-map
          "gj" 'restclient-jump-next
          "gk" 'restclient-jump-prev)

        (general-define-key
          :states  'normal
          :keymaps 'restclient-outline-mode-map
          "TAB"   'restclient-toggle-body-visibility-or-indent
          "g TAB" 'restclient-toggle-body-visibility-or-indent)

        (add-hook 'restclient-response-mode-hook
                  'evil-motion-state)

        (push (rx "*HTTP Response*") whitespace-exempt-buffers)

        (defun restclient ()
          "create a new buffer in restclient mode"
          (interactive)
          (let ((buffer (create-new-empty-buffer "restclient")))
            (with-current-buffer buffer
              (restclient-mode))
            (display-buffer buffer))))
    #+END_SRC

*** company-restclient
    #+BEGIN_SRC emacs-lisp
      (use-package company-restclient
        :only (package! restclient)
        :ensure t
        :defer  t
        :after  restclient
        :commands (company-restclient)
        :init
        (company/configure-mode (restclient-mode :major t)
          company-restclient))
    #+END_SRC

*** org-babel-restclient
    #+BEGIN_SRC emacs-lisp
      (use-package ob-restclient
        :only (package! restclient)
        :ensure t
        :defer  t
        :after (org restclient)
        :init
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((restclient . t))))
    #+END_SRC

** elisp
*** elisp-mode
    #+BEGIN_SRC emacs-lisp
      (use-package elisp-mode
        :only (package! elisp)
        :defer t
        :commands (eval-replace-last-sexp)
        :init
        (add-hook 'emacs-lisp-mode-hook #'electric-pair-mode)

        (leader/set-keys "fk" 'emacs-lisp-byte-compile)
        (leader/with-prefix "k"
          (leader/set-keys
            "e" 'eval-last-sexp
            "k" 'eval-last-sexp
            "(" 'eval-print-last-sexp
            ")" 'eval-replace-last-sexp))

        :config
        ;; show lambda as an actual lambda symbol... pretty cool, if I do say
        ;; so myself.
        (configure-presym! '(lisp-interaction-mode emacs-lisp-mode org-mode)
          "lambda"  ?Œª
          "lambda!" "Œª!")

        (defun eval-replace-last-sexp (&optional prefix)
          "evaluate then replace the preceding sexp"
          (interactive "p")
          (let* ((sexp (preceding-sexp))
                 (value (eval sexp)))
            (kill-sexp -1)
            (insert (format (if prefix "%s" "%S") value))))

        (evil-set-initial-state 'inferior-emacs-lisp-mode 'emacs) ;; ielm

        ;;   (defun elisp-transcript ()
        ;;     ;; source https://www.emacswiki.org/emacs/LispInteractionMode
        ;;     "Make an Emacs Lisp interactive transcript.
        ;; In a new buffer, make a transcript of the Emacs Lisp code by
        ;; evaluating each line and printing the result under it (/a la/
        ;;   TODO fix last sexp in the buffer isn't transcripted
        ;;   `eval-print-last-sexp')."
        ;;     (interactive)
        ;;     (let* ((eval-expression-print-length nil)
        ;;            (eval-expression-print-level nil)
        ;;            (input-buffer (current-buffer))
        ;;            (dest-buffer (get-buffer-create (concat "*Transcript for "
        ;;                                                    (buffer-name input-buffer)
        ;;                                                    "*"))))
        ;;       (save-current-buffer
        ;;         (set-buffer dest-buffer)
        ;;         (lisp-interaction-mode)
        ;;         (delete-region (point-min) (point-max))
        ;;         (insert-buffer-substring input-buffer) ;; `slurp!'
        ;;         (goto-char (point-min))
        ;;         (forward-sexp 1)
        ;;         (while (> (point-max) (point))
        ;;           (condition-case err
        ;;               (evil-adjust-eval-print-last-sexp)
        ;;             (error
        ;;              (insert (format "%s" err))
        ;;              (newline)))
        ;;           (forward-sexp 1)))
        ;;       (display-buffer dest-buffer)))

        (push '(emacs-lisp-mode . 2) +indent-config)
        (push '(lisp-interaction-mode . 2) +indent-config)

        (let ((lisp-modes '(emacs-lisp-mode lisp-interaction-mode)))
          (leader/set-keys-for-major-mode lisp-modes
            "'" 'ielm
            "c" 'emacs-lisp-byte-compile
            "i" 'indent-sexp

            ;; eval
            "e"  "eval"
            "eb" 'eval-buffer
            "ee" 'eval-last-sexp
            "eE" 'eval-replace-last-sexp
            "ef" 'eval-defun
            "er" 'eval-region
            ;; "et" 'elisp-transcript

            ;; jump
            "g" '("goto-definition" . xref-find-definitions)
            "G" '("goto-definition-other-window" . xref-find-definitions-other-window)

            ;; tests
            "t" 'ert
            "T" 'ert-run-tests-interactively))

        (general-define-key
          :keymaps 'lisp-interaction-mode-map
          "C-j" nil
          "C-(" 'eval-print-last-sexp
          "C-)" 'eval-replace-last-sexp))

    #+END_SRC

*** paredit
    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :only (package! elisp)
        :ensure t
        :defer  t
        :hook (emacs-lisp-mode . paredit-mode)
        :config
        (general-unbind
          :keymaps 'paredit-mode-map
          "C-<up>" "C-<down>" "C-<left>" "C-<right>" "C-(" "C-)")

        ;; M-( wraps the next argument in parentheses
        ;; M-) closes the current argument, trims any
        ;;     trailing whitespace and inserts a newline
        ;; M-" same as " but then trims whitespace and inserts a newline
        (general-define-key
          :keymaps 'paredit-mode-map
          :states 'insert
          "<delete>" 'paredit-backward-delete
          "M-<delete>" 'paredit-forward-delete
          "C-<delete>" 'paredit-backward-kill-word
          ;; "C-M-<delete>" 'paredit-forward-kill-word

          ;; damn you windows
          ;; just use paredit forward, then kill backward
          "C-M-k" 'paredit-kill ;; forward body
          "<return>" 'paredit-newline)

        (general-define-key
          :keymaps 'paredit-mode-map
          :states 'normal
          "gSh" '("splice-sexp-forward" . paredit-splice-sexp-killing-backward)
          "gSl" '("splice-sexp-backward" . paredit-splice-sexp-killing-forward))

        (general-define-key
          :keymaps 'paredit-mode-map
          :states '(normal insert)
          ;; movement
          ;; "C-h" 'backward-char
          ;; "C-l" 'forward-char
          "C-j" 'paredit-newline
          "C-M-h" 'paredit-backward
          "C-M-l" 'paredit-forward
          "C-<left>" 'paredit-backward
          "C-<right>" 'paredit-forward

          ;; transformation
          ;;; kill or wrap surrounding parentheses
          "C-S-K" 'paredit-splice-sexp
          "C-S-J" 'paredit-wrap-round
          ;;; include previous or next arguments in current sexp
          "C-S-H" 'paredit-backward-slurp-sexp
          "C-S-L" 'paredit-forward-slurp-sexp
          ;;; exclude previous or next arguments from current sexp
          "C-M-S-H" 'paredit-backward-barf-sexp
          "C-M-S-L" 'paredit-forward-barf-sexp

          "C-S-S" 'paredit-split-sexp
          "C-S-M-J" 'paredit-join-sexps ;; immeadiately with expression b4 point

          ;; splice next argument after point, deleting
          ;; arguments both before and after it
          ;; a cool shortcut, but not really necessary
          ;; "M-r"   'paredit-raise-sexp
          ))
    #+END_SRC

** python
*** anaconda
    #+BEGIN_SRC emacs-lisp
      (use-package anaconda-mode
        :only (package! python)
        :ensure t
        :defer  t
        :hook ((python-mode . enable-anaconda-mode+)
               (anaconda-mode . anaconda-eldoc-mode))
        :commands enable-anaconda-mode+
        :config
        (setq anaconda-mode-installation-directory (var! "anaconda/"))

        (defun enable-anaconda-mode+ ()
          "run anaconda-mode unless you're in a remote file."
          (when (and (buffer-file-name)
                     (not (file-remote-p (buffer-file-name))))
            (anaconda-mode +1)))

        (general-define-key
         :keymaps 'anaconda-mode-map
         [remap xref-find-definitions] 'anaconda-mode-find-definitions
         [remap xref-find-references] 'anaconda-mode-find-references)

        (defvar anaconda-server-bindings+
          '("TAB" anaconda-mode-complete
            "hh" anaconda-mode-show-doc

            "ga" anaconda-mode-find-assignments
            "gr" anaconda-mode-find-references
            "gg" anaconda-mode-find-definitions
            "gA" anaconda-mode-find-assignments-other-window
            "gR" anaconda-mode-find-references-other-window
            "gG" anaconda-mode-find-definitions-other-window
            "g M-a" anaconda-mode-find-assignments-other-frame
            "g M-r" anaconda-mode-find-references-other-frame
            "g M-g" anaconda-mode-find-definitions-other-frame)
          "bindings available under `leader-server-leader-prefix' in leader-map")

        (apply #'leader/set-keys-for-major-mode 'python-mode anaconda-server-bindings+)
        ;; (leader/with-prefix leader-server-leader-prefix
        ;;   (apply #'leader/set-keys-for-mode 'anacond-mode anaconda-server-bindings+))
        )
    #+END_SRC

*** company-anaconda
    #+BEGIN_SRC emacs-lisp
      (use-package company-anaconda
        :only (package! python)
        :ensure t
        :defer  t
        :after  anaconda-mode
        :init
        (company/configure-mode (python-mode :major t)
          company-anaconda))
    #+END_SRC

*** pyimport
    #+BEGIN_SRC emacs-lisp
      (use-package pyimport
        :only (package! python)
        :ensure t
        :defer  t
        :init
        (leader/set-keys-for-major-mode 'python-mode
          "i"  "imports"
          "ii" 'pytimport-remove-unused
          "iu" 'pyimport-insert-missing))
    #+END_SRC

*** py-isort
    tidy up imports.

    #+BEGIN_SRC emacs-lisp
      (use-package py-isort
        :only (package! python)
        :ensure t
        :defer  t
        :init
        (leader/set-keys-for-major-mode 'python-mode
          "i"  "imports"
          "is" 'py-isort-buffer
          "ir" 'py-isort-region))
    #+END_SRC

*** pip-requirements
    major mode for editing pip requirements files.

    #+BEGIN_SRC emacs-lisp
      (use-package pip-requirements
        :only (package! python)
        :ensure t
        :defer  t
        :mode ("^requirements\\.txt$" . pip-requirements-mode))
    #+END_SRC

*** yapfify
    auto format the current python buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package yapfify
        :only (package! python)
        :ensure t
        :defer  t
        :init
        (leader/set-keys-for-major-mode 'python-mode
          "y" 'yapfify-buffer
          "Y" 'yapfify-region))
    #+END_SRC

*** python-mode
    #+BEGIN_SRC emacs-lisp
      (use-package python
        :only (package! python)
        :defer t
        :straight (python :type built-in)
        :hook (python-mode . flycheck-mode)
        :init
        (defalias 'python-repl 'run-python)

        :config
        (evil-set-initial-state 'inferior-python-mode 'emacs)
        (setq python--prettify-symbols-alist nil)

        (add-to-list 'python-shell-completion-native-disabled-interpreters "python3")

        (configure-presym! 'python-mode
          "lambda" ?Œª)

        (defun python-shell-calculate-command ()
          "python3 -i")

        (require '+python-bindings))
    #+END_SRC

**** bindings
     #+BEGIN_SRC emacs-lisp :tangle lisp/+python-bindings.el
       (general-unbind
         :keymaps 'python-mode-map
         "<C-backspace>")

       (general-define-key
        :states 'insert
        :keymaps 'python-mode-map
        "TAB"   'tab-to-tab-stop
        "<tab>" 'tab-to-tab-stop)

       (leader/set-keys-for-major-mode 'python-mode
         "r" 'run-python ;; REPL
         "R" 'python-shell-switch-to-shell
         "m" 'python-mark-defun
         "v" 'python-check
         "s" 'python-describe-at-point
         ;; unbound: python-nav-forward-sexp[-safe]
         ;;          python-nav-backward-sexp[-safe]

         "n"  "navigate"
         "nh" 'python-nav-forward-statement
         "nj" 'python-nav-forward-block
         "nk" 'python-nav-backward-block
         "nl" 'python-nav-backward-statement
         "n(" 'python-nav-backward-up-list
         "n)" 'python-nav-up-list
         "n0" 'python-nav-beginning-of-block
         "n$" 'python-nav-end-of-block
         "nm" 'python-nav-if-name-main

         "n C-0" 'python-nav-beginning-of-statement
         "n C-$" 'python-nav-end-of-statement
         "n M-j" 'python-nav-forward-defun
         "n M-k" 'python-nav-backward-defun
         ;; "n M-0" 'python-nav-beginning-of-defun
         "n M-$" 'python-nav-end-of-defun

         "h"  "help"
         "hp" 'python-eldoc-at-point

         "e"  "eval/exec"
         "ed" 'python-shell-send-defun
         "eb" 'python-shell-send-buffer
         "ef" 'python-shell-send-file
         "er" 'python-shell-send-region
         "ec" 'python-shell-send-string)

       (provide '+python-bindings)
     #+END_SRC

** ruby
   #+BEGIN_SRC emacs-lisp
     (when (package! ruby)
       (defvar +ruby-package 'ruby ;; (if (eq system-type 'gnu/linux) 'enh-ruby 'ruby)
         "determine which mode to use for ruby... enh-ruby is really slowing everything down on windows
     also, for some reason, creating a symlink to ruby on cygwin makes the process unrunnable from emacs,
     it just spits out exec error... my loathing towards windows grows :P
     TODO test out performance of enhanced ruby on linux.")

       (defvar +ruby-use-lsp 'projectile
         "whether to use `lsp-mode' with ruby-mode.
     set to 'projectile to only activate if in a projectile project with a Gemfile.

     NOTE solargraph... and basically every other ruby completion framework is
          useless if your project doesn't have a Gemfile... that means for simple
          scripts like ~/.emacs.d/bin/tangle, solargraph won't be of any use.
     ")

       (setq +ruby-mode      (intern (concat (symbol-name +ruby-package) "-mode"))
             +ruby-mode-hook (intern (concat (symbol-name +ruby-mode)    "-hook")))

       (push (cons +ruby-mode 2) +indent-config)

       (leader/set-keys "Mr" +ruby-mode))
   #+END_SRC

*** ruby
    #+BEGIN_SRC emacs-lisp
      (use-package ruby-mode
        :only (and (package! ruby)
                   (eq +ruby-package 'ruby))
        :defer t
        :mode ("\\.rb$" . ruby-mode)
        :interpreter "ruby"
        :config
        (leader/set-keys-for-major-mode 'ruby-mode
          "'" 'ruby-toggle-string-quotes
          "{" 'ruby-toggle-block))
    #+END_SRC

*** enhanced-ruby
    #+BEGIN_SRC emacs-lisp
      (use-package enh-ruby-mode
        :only (and (package! ruby)
                   (eq +ruby-package 'enh-ruby))
        :ensure t
        :defer  t
        :mode ("\\.rb$" . enh-ruby-mode)
        :interpreter "ruby"
        :hook (enh-ruby-mode . flycheck-mode)
        :config
        (setq enh-ruby-deep-indent-paren nil
              enh-ruby-hanging-paren-deep-indent-level 2)

        (leader/set-keys-for-major-mode 'enh-ruby-mode
          "m" 'enh-ruby-mark-defun
          "f" 'enh-ruby-find-file
          "e" 'enh-ruby-find-error

          "i"  "insert"
          "ie" 'enh-ruby-insert-end
          "it" 'enh-ruby-indent-exp
          "i TAB" 'enh-ruby-indent-exp

          "n"  "navigate"
          "nh" 'enh-ruby-backward-sexp
          "nl" 'enh-ruby-forward-sexp
          "nk" 'enh-ruby-up-sexp
          "n0" 'enh-ruby-beginning-of-block
          "n$" 'enh-ruby-end-of-block
          "n M-0" 'enh-ruby-beginning-of-defun
          "n M-$" 'enh-ruby-end-of-defun)

        (general-define-key
          :keymaps 'enh-ruby-mode-map
          "{" nil
          "}" nil)

        (general-define-key
          :keymaps 'enh-ruby-mode-map
          :states 'insert
          "{" 'enh-ruby-electric-brace
          "}" 'enh-ruby-electric-brace)

        (general-define-key
          :keymaps 'enh-ruby-mode-map
          :states '(normal insert)
          "C-{" 'enh-ruby-toggle-block))
    #+END_SRC

*** solargraph
    language server implementation for ruby.

    #+BEGIN_SRC emacs-lisp
      (when +lsp-command
        (add-hook +ruby-mode-hook
                  (defun ruby-enable-lsp-in-projects+ (&rest args)
                    (when (eq +ruby-use-lsp 'projectile)
                      (when-project-has-file-p "Gemfile"
                        (funcall +lsp-command))))))
    #+END_SRC

*** robe
    WARN robe won't work unless your project contains some identifying gemfile
    so if your not getting any completion help, that's probably why.

    #+BEGIN_SRC emacs-lisp
      (use-package robe
        :only (package! ruby-robe)
        :ensure t
        :defer  t
        :init
        (add-hook +ruby-mode-hook
                  (defun ruby-robe-enable-in-projects (&rest args)
                    (unless (eq +ruby-use-lsp 'projectile)
                      (when-project-has-file-p "Gemfile"
                         (call-interactively 'robe-mode)))))

        :config
        (company/configure-mode (robe-mode)
          company-robe)

        (leader/set-keys-for-major-mode +ruby-mode
          "rs" 'robe-start ;; REPL
          "h" 'robe-doc

          ;; jumping
          "SPC" 'robe-ask

          "g"  "goto"
          "gg" 'robe-jump
          "gm" 'robe-jump-to-module))
    #+END_SRC

*** inf-ruby
    #+BEGIN_SRC emacs-lisp
      (use-package inf-ruby
        :only (package! ruby)
        :ensure t
        :defer  t
        :init
        (defalias 'ruby-repl 'inf-ruby)
        (push 'inf-ruby-mode whitespace-exempt-modes)

        :config
        (leader/set-keys-for-major-mode +ruby-mode
          "r"  "REPL"
          "rr" 'inf-ruby
          "rg" 'inf-ruby-console-gem
          "rz" 'inf-ruby-console-zues
          "ra" 'inf-ruby-console-auto
          "rR" 'inf-ruby-console-rails
          "rk" 'inf-ruby-console-racksh
          "rc" 'inf-ruby-console-script
          "rh" 'inf-ruby-console-hanami))
    #+END_SRC

*** ruby-tools
    #+BEGIN_SRC emacs-lisp
      (use-package ruby-tools
        :only (package! ruby)
        :ensure t
        :defer  t
        :init
        (add-hook +ruby-mode-hook #'ruby-tools-mode)

        :config
        (leader/set-keys-for-major-mode +ruby-mode
          "i"  "insert"
          "i:" 'ruby-tools-to-symbol
          "i{" 'ruby-tools-interpolate
          "i <backspace>" 'ruby-tools-clear-string
          "i\"" 'ruby-tools-to-double-quote-string
          "i'" 'ruby-tools-to-single-quote-string))
    #+END_SRC

*** bundle
    #+BEGIN_SRC emacs-lisp
      (use-package bundler
        :only (package! ruby)
        :ensure t
        :defer  t
        :init
        (leader/set-keys-for-major-mode +ruby-mode
          "b"  "bundler"
          "rb" 'bundle-console
          "bf" 'bundle-open
          "bi" 'bundle-install
          "bu" 'bundle-update
          "bc" 'bundle-check))
    #+END_SRC

*** ruby-electric
    #+begin_src emacs-lisp
      (use-package ruby-electric
        :only (package! ruby)
        :ensure t
        :defer  t
        :init
        (add-hook +ruby-mode-hook #'ruby-electric-mode)

        :config
          ;;; why poison the standard ruby map instead of using ruby-electric-mode-map?
        (defun ruby-electric-setup-keymap ()
          (general-define-key
           :keymaps 'ruby-mode-map
           " " 'ruby-electric-space
           ;; "{" 'ruby-electric-curlies
           "(" 'ruby-electric-matching-char
           "[" 'ruby-electric-matching-char
           ;; "\"" 'ruby-electric-quote
           ;; "\'" 'ruby-electric-quote
           "|" 'ruby-electric-bar
           "RET" 'ruby-electric-return
           ;; (kbd "C-j") 'ruby-electric-return
           ;; [C-m] 'ruby-electric-return
           "}" 'ruby-electric-close-matching-char
           ")" 'ruby-electric-close-matching-char
           "]" 'ruby-electric-close-matching-char)))
    #+end_src

** powershell
   #+BEGIN_SRC emacs-lisp
     (use-package powershell
       :only (package! powershell)
       :ensure t
       :defer  t)
   #+END_SRC

** HTML
*** web-mode
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :only (package! html)
        :ensure t
        :defer  t
        :mode (rx "." (or "erb" "html" "vue"))
        :init
        (leader/set-keys "Mh" 'web-mode)
        (push '(web-mode . 2) +indent-config)

        :config
        (add-hook 'hack-local-variables-hook
                  (defun web-mode-fix-dirlocals+ (&rest _)
                    "see issue #1118."
                    (when (derived-mode-p major-mode 'web-mode)
                      (web-mode-guess-engine-and-content-type))))

        (general-define-key
          :keymaps 'web-mode-map
          :states 'normal
          "<tab>" 'web-mode-fold-or-unfold)

        (leader/set-keys-for-major-mode 'web-mode
          ;; unbound:
          ;;   * web-mode-buffer-highlight
          ;;   * web-mode-element-mute-blanks
          ;;   * web-mode-block-beginning
          ;;   * web-mode-block-end
          ;;   * web-mode-block-insert
          ;;   * web-mode-block-kill
          ;;   * web-mode-block-next
          ;;   * web-mode-block-previous
          ;;   * web-mode-block-select
          ;;   * web-mode-block-transpose
          ;;   * web-mode-navigate
          ;;
          ;; WARN the block commands don't seem to do anything

          ";"     'web-mode-comment-or-uncomment
          "f"     'web-mode-fold-or-unfold
          "l"     'web-mode-file-link
          "b"     'web-mode-element-close ; insert matching tag for body at point
          "M-r"   'web-mode-reload
          "<tab>" 'web-mode-buffer-indent
          "C-M-i" 'web-mode-snippet-insert
          ;; "tw" 'web-mode-whitespace-show

          ;; insert
          "i"  "insert"
          "ia" 'web-mode-attribute-insert
          "ip" 'web-mode-element-wrap ; wrap current element in a new element with name from prompt
          "ic" 'web-mode-element-clone
          "ie" 'web-mode-element-insert
          "ie" 'web-mode-element-insert-at-point ; converts word before point to tag

          ;; refactor/insert
          "r"  "refactor"
          "rs" 'web-mode-tag-attributes-sort
          "r(" 'web-mode-element-extract  ; add linebreak before every tag in body
          "r)" 'web-mode-element-contract ; collapse tag into a single line
          "rn" 'web-mode-dom-normalize
          "ra" 'web-mode-attribute-transpose
          "re" 'web-mode-element-transpose
          "rr" 'web-mode-element-rename
          "rf" 'web-mode-fold-or-unfold
          "rF" 'web-mode-element-children-fold-or-unfold ; collapse the children of current tags body, not body itself

          ;; delete
          "d"  "delete"
          "da" 'web-mode-attribute-kill
          "de" 'web-mode-element-kill
          "dp" 'web-mode-element-vanish ; delete element, but move body up a level instead of erasing it

          ;; DOM
          "D"  "DOM"
          "Da" 'web-mode-dom-apostrophes-replace
          "Ds" 'web-mode-dom-entities-replace
          "Dq" 'web-mode-dom-quotes-replace
          "D/" 'web-mode-dom-xpath
          ; shows the xpath of the current element

          "hd" 'web-mode-dom-errors-show
          "hj" 'web-mode-jshint

          ;; mark
          "m"  "mark"
          "mT" 'web-mode-tag-select
          ; only works while between <>
          "mt" 'web-mode-element-select
          "ma" 'web-mode-attribute-select
          "mb" 'web-mode-element-content-select
          "mm" 'web-mode-mark-and-expand

          ;; navigation
          "n"  "navigate"
          "n0" 'web-mode-element-beginning
          "n$" 'web-mode-element-end
          "nn" 'web-mode-tag-match
          "nh" 'web-mode-element-next
          "nj" 'web-mode-element-child
          "nk" 'web-mode-element-previous
          "nh" 'web-mode-element-parent
          ;; "nt" 'web-mode-dom-traverse

          "na"  "attributes"
          "na0" 'web-mode-attribute-beginning
          "na$" 'web-mode-attribute-end
          "nah" 'web-mode-attribute-previous
          "nal" 'web-mode-attribute-next

          "nt"  "tags"
          "nt0" 'web-mode-tag-beginning
          "nt$" 'web-mode-tag-end
          "nth" 'web-mode-tag-previous
          "ntl" 'web-mode-tag-next))
    #+END_SRC

*** emmet-mode
    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :only (package! html markdown)
        :ensure t
        :defer  t
        :hook ((web-mode      . emmet-mode)
               (markdown-mode . emmet-mode)
               (js2-jsx-mode  . emmet-mode))
        :config
        (general-unbind :keymaps 'emmet-mode-keymap "C-j")

        (general-define-key
          :states 'insert
          :keymaps 'emmet-mode-keymap
          [C-i] 'emmet-expand-line
          "TAB" 'emmet-expand-line
          "<tab>"   'emmet-next-edit-point
          "<S-tab>" 'emmet-prev-edit-point)

        (leader/with-major-mode-prefix
          (leader/set-keys-for-mode 'emmet-mode
            "e" "emmet"
            "." 'emmet-expand-line
            ;; "'" 'emmet-preview
            "ee" 'emmet-expand-line
            "ep" 'emmet-preview
            "ew" 'emmet-wrap-with-markup
            "en" 'emmet-next-edit-point
            "eN" 'emmet-prev-edit-point)))
    #+END_SRC

*** company-web
    #+BEGIN_SRC emacs-lisp
      (use-package company-web
        :only (package! html)
        :ensure t
        :defer  t
        :after  web-mode
        :config
        (company/configure-mode (web-mode :major t)
          company-web-html company-yasnippet))
    #+END_SRC

*** web-beautify
    #+BEGIN_SRC emacs-lisp
      (use-package web-beautify
        :only (package! html)
        :ensure t
        :defer  t
        :after  web-mode
        :init
        (leader/set-keys-for-major-mode 'web-mode
          "rb"  "beautify"
          "rbh" 'web-beautify-htlm
          "rbj" 'web-beautify-js
          "rbc" 'web-beautify-css))
    #+END_SRC

** JSON
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :only (package! json)
       :ensure t
       :defer  t
       :mode (rx ".json")
       :hook (json-mode . flycheck-mode)

       :config
       (leader/set-keys-for-major-mode 'json-mode
         "b" 'json-mode-beautify
         "/" 'json-mode-kill-path
         "t" 'json-toggle-boolean
         "DEL" 'json-nullify-sexp))
   #+END_SRC

** vimscript
   #+BEGIN_SRC emacs-lisp
     (use-package vimrc-mode
       :only (package! vimlang)
       :ensure t
       :defer  t
       :mode (rx ".vim")
       :hook (vimrc-mode . flycheck-mode)
       :delight (vimrc-mode "vim"))
   #+END_SRC

** sql
   #+BEGIN_SRC emacs-lisp
     (use-package sql
       :only (package! sql)
       :ensure t
       :defer  t
       :mode ("\\.sql" . sql-mode)
       :hook (sql-mode . flycheck-mode)
       :config
       (setq sql-sqlite-options '("-interactive"))
       (push 'sql-interactive-mode whitespace-exempt-modes)

       (evil-set-initial-state 'sql-interactive-mode 'emacs)

       ;; see [here](https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client)
       ;; for a guide on how to make quick database access easier. or if you've already got
       ;; an interactive session running, use sql-save-connection to append it to a local
       ;; variable from which you can just paste it in here.
       (leader/set-keys-for-major-mode 'sql-mode
         "0" 'sql-beginning-of-statement
         "$" 'sql-end-of-statement
         "i" 'sql-show-sqli-buffer
         "t" 'sql-toggle-pop-to-buffer-after-send-region

         "e"  "eval"
         "eb" 'sql-send-buffer
         "ep" 'sql-send-paragraph
         "er" 'sql-send-region
         "es" 'sql-send-string

         "l"  "list"
         "ll" 'sql-list-all
         "lt" 'sql-list-table)

       (leader/set-keys-for-major-mode 'sql-interactive-mode
         "t" 'sql-list-table
         "a" 'sql-list-all))
   #+END_SRC

*** sqlup
    upcases SQL specific keywords after completing them.

    #+BEGIN_SRC emacs-lisp
      (use-package sqlup-mode
        :only (package! sql)
        :ensure t
        :defer  t
        :after  sql
        :hook ((sql-mode . sqlup-mode)
               (sql-interactive-mode . sqlup-mode))
        :config
        (leader/set-keys-for-major-mode 'sql-mode
          "u"  "upcase"
          "ur" 'sqlup-capitalize-keywords-in-region
          "ub" 'sqlup-capitalize-keywords-in-buffer)

        (push "name" sqlup-blacklist))
    #+END_SRC

*** sqlite-dump
    converts an sqlite database file into the SQL schema required to reproduce it.

    #+BEGIN_SRC emacs-lisp
      (use-package sqlite-dump
        :only (package! sql)
        :defer t
        :commands sqlite-dump)
    #+END_SRC

** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :only (package! yaml)
       :ensure t
       :defer  t
       :mode (rx "." (or "yaml" "yml"))
       :hook (yaml-mode . flycheck-mode)
       :config
       (general-define-key
         :keymaps 'yaml-mode-map
         :states 'insert
         "<tab>" 'yaml-indent-line)

       (leader/set-keys-for-major-mode 'yaml-mode
         "n" 'yaml-narrow-to-block-literal
         "f" 'yaml-fill-paragraph
         "v" 'yaml-mode-version)

       (push '(yaml-mode . 2) +indent-config))
   #+END_SRC

** csv
   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode
       :only (package! csv)
       :ensure t
       :defer  t
       :init
       (setq csv-separators '("," ":" ";" "\t"))

       :config
       (general-define-key
         :keymaps 'csv-mode-map
         "<tab>"     'csv-forward-field
         "<backtab>" 'csv-backward-field)

       (leader/set-keys-for-major-mode 'csv-mode
         "a"  'csv-align-fields
         "d"  'csv-kill-fields
         "i"  'csv-toggle-invisibility
         "r"  'csv-reverse-region
         "t"  'csv-transpose
         "u"  'csv-unalign-fields

         "s" "sort"
         "sf" 'csv-sort-fields
         "sn" 'csv-sort-numeric-fields
         "so" 'csv-toggle-descending

         "v" "yank"
         "vf" 'csv-yank-fields
         "vt" 'csv-yank-as-new-table))
   #+END_SRC

** yarn
   #+BEGIN_SRC emacs-lisp
     (use-package yarn-mode :only (package! yarn) :ensure t)
   #+END_SRC

** glsl
   #+BEGIN_SRC emacs-lisp
     (use-package glsl-mode
       :only (package! glsl)
       :ensure t
       :mode ("\\.vs$" . glsl-mode))
   #+END_SRC

** shell-script
   Enable the bash language server when it's on my system.

   #+BEGIN_SRC emacs-lisp
     (when (and +sh-use-lsp
                (package! sh-script)
                +lsp-command
                (executable-find "bash-language-server"))
       (add-hook 'sh-mode-hook +lsp-command))
   #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (use-package sh-script
        :only (package! sh-script)
        :defer t
        :hook ((sh-mode . electric-pair-mode)
               (sh-mode . flycheck-mode))
        :config
        (leader/set-keys-for-major-mode 'sh-mode
          ":" 'sh-set-shell
          "0" 'sh-beginning-of-command
          "$" 'sh-end-of-command
          "!" 'executable-interpret
          "b" 'sh-show-shell
          "\\" 'sh-backslash-region

          "er" 'sh-execute-region
          "ej" 'sh-send-line-or-region-and-step

          "i=" 'sh-assignment
          "ic" 'sh-case
          "id" 'sh-cd-here
          "if" 'sh-for
          "i TAB" 'sh-if
          "il" 'sh-indexed-loop
          "io" 'sh-while-getopts
          "ir" 'sh-repeat
          "is" 'sh-select
          "it" 'sh-tmp-file
          "iu" 'sh-until
          "iw" 'sh-while
          "i(" 'sh-function
          "i+" 'sh-add

          "TAB"   "indent"
          "TAB -" 'sh-learn-line-indent
          "TAB =" 'sh-set-indent
          "TAB |" 'sh-learn-buffer-indent
          "TAB ?" 'sh-show-indent)

        (advice-add 'sh-set-shell :around 'inhibit-messages-wrapper))
    #+END_SRC

*** company-shell
    #+BEGIN_SRC emacs-lisp
      (use-package company-shell
        :only (package! sh-script)
        :ensure t
        :defer  t
        :after  sh-mode
        :config
        (company/configure-mode (sh-mode :major t)
          company-shell company-shell-env))
    #+END_SRC

** ssh
   #+BEGIN_SRC emacs-lisp
     (use-package ssh-config-mode
       :only (package! ssh-config)
       :ensure t
       :defer  t
       :delight (ssh-config-mode "SSH")
       :config
       ;; TODO advise last host to behave like org mode
       (general-define-key
         :keymaps '(ssh-config-mode-map
                    ssh-known-hosts-mode-map)
         :states 'motion
         "gj" 'ssh-config-host-next
         "gk" 'ssh-config-host-prev))
   #+END_SRC

** makefile
   #+BEGIN_SRC emacs-lisp
     (use-package make-mode
       :only (package! makefile)
       :defer t
       :config
       (defun makefile--enable-evil-motion-state (&rest _)
         (evil-motion-state +1))

       ;; tabs for indentation, spaces for allignment
       (advice-add 'makefile-backslash-region :around
                   (defun makefile-backslash-region--no-tabs (func &rest args)
                     (let (indent-tabs-mode)
                       (apply func args))))

       (advice-add #'makefile-switch-to-browser          :after #'makefile--enable-evil-motion-state)
       (advice-add #'makefile-create-up-to-date-overview :after #'makefile--enable-evil-motion-state)

       (general-define-key
         :keymaps 'makefile-mode-map
         :states 'insert
         "TAB" 'indent-for-tab-command
         "<tab>" 'indent-for-tab-command)

       (general-define-key
         :keymaps 'makefile-mode-map
         :states 'motion
         "gj" 'makefile-next-dependency
         "gk" 'makefile-previous-dependency)

       (general-define-key
         :states  'motion
         :keymaps 'makefile-browser-map
         "j" 'makefile-browser-next-line
         "k" 'makefile-browser-previous-line

         "t"     'makefile-browser-toggle
         "TAB"   'makefile-browser-toggle
         "<tab>" 'makefile-browser-toggle
         "RET"   'makefile-browser-insert-continuation

         "I" 'makefile-browser-insert-selection-and-quit
         "i" 'makefile-browser-insert-selection

         [remap quit-window] 'makefile-browser-quit)

       (leader/set-keys-for-major-mode '(makefile-automake-mode
                                         makefile-bsdmake-mode
                                         makefile-gmake-mode
                                         makefile-imake-mode
                                         makefile-mode
                                         makefile-makepp-mode)
         "b" 'makefile-switch-to-browser
         "o" 'makefile-create-up-to-date-overview
         "p" 'makefile-pickup-everything
         "f" 'makefile-pickup-filenames-as-targets

         ":"   'makefile-insert-target-ref
         "C-:" 'makefile-insert-target-ref

         "\\"  'makefile-backslash-region
         "TAB" 'makefile-insert-gmake-function))
   #+END_SRC

** markdown
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :only (package! markdown)
        :ensure t
        :defer  t
        :hook ((markdown-mode . display-line-numbers-mode)
               (markdown-mode . flycheck-mode))
        :config
        (require '+markdown-bindings)
        (setq markdown-indent-on-enter 'indent-and-new-item)

        (advice-add 'markdown-insert-list-item :before
                    (defun markdown-insert-list-item--adjust-line+ (&rest args)
                      "by default, inserting a new list item goes below the current item."
                      (when (markdown-list-item-at-point-p)
                        (save-excursion
                          (goto-char (line-end-position))
                          (newline))

                        (markdown-forward-paragraph))))

        (advice-add 'markdown-insert-list-item :after
                    (defun markdown-insert-list-item--force-evil-insert+ (&rest args)
                      (if (eq (char-before)
                              ?\ )
                          (evil-insert nil)
                        (evil-append nil)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :tangle lisp/+markdown-bindings.el
      (general-define-key
       :keymaps 'markdown-mode-map
       :states 'motion
       "gh" 'markdown-up-heading
       "gj" 'markdown-outline-next
       "gk" 'markdown-outline-previous
       "gl" 'markdown-outline-next-same-level
       "}" 'markdown-forward-paragraph
       "{" 'markdown-backward-paragraph)

      (general-define-key
       :keymaps 'markdown-mode-map
       :states 'insert
       "RET"      'markdown-enter-key
       "<return>" 'markdown-enter-key)

      (general-define-key
       :keymaps 'markdown-mode-map
       :states '(normal insert)
       "C-<return>" 'markdown-insert-list-item)

      (general-define-key
       :keymaps 'markdown-mode-map
       :states '(insert normal)
       :predicate '(markdown-list-item-at-point-p)
       [remap drag-stuff-down]  'markdown-move-down
       [remap drag-stuff-up]    'markdown-move-up)

      (general-define-key
       :keymaps 'markdown-mode-map
       :states '(insert normal)
       :predicate '(or (markdown-list-item-at-point-p)
                       (markdown-on-heading-p))
       [remap evil-shift-right] 'markdown-demote
       [remap evil-shift-left]  'markdown-promote)

      (general-define-key
       :keymaps 'markdown-mode-map
       :states '(insert normal)
       :predicate '(or (markdown--table-at-point-p)
                       (markdown-on-heading-p))
       "<tab>"           'markdown-cycle
       "<S-iso-lefttab>" 'markdown-shifttab
       "<S-tab>"         'markdown-shifttab
       "<backtab>"       'markdown-shifttab)

      ;;; evil-markdown-mode (Somelauw/evil-markdown)
      (with-eval-after-load 'evil
        (evil-declare-motion 'markdown-forward-paragraph)
        (evil-declare-motion 'markdown-backward-paragraph)

        ;; heading
        (evil-declare-motion 'markdown-forward-same-level)
        (evil-declare-motion 'markdown-backward-same-level)
        (evil-declare-motion 'markdown-up-heading)
        (evil-declare-motion 'markdown-next-heading)
        (evil-declare-motion 'markdown-previous-heading)
        (evil-declare-motion 'markdown-next-visible-heading)
        (evil-declare-motion 'markdown-previous-visible-heading)

        ;; other
        (evil-declare-motion 'markdown-beginning-of-block)
        (evil-declare-motion 'markdown-beginning-of-defun)
        (evil-declare-motion 'markdown-end-of-block)
        (evil-declare-motion 'markdown-end-of-block-element)
        (evil-declare-motion 'markdown-end-of-defun)
        (evil-declare-motion 'markdown-next-visible-heading)
        (evil-declare-motion 'markdown-next-link)
        (evil-declare-motion 'markdown-previous-visible-heading)
        (evil-declare-motion 'markdown-previous-link)

        ;; non-repeatible
        (evil-declare-change-repeat 'markdown-cycle)
        (evil-declare-change-repeat 'markdown-shifttab))

      ;;; leader keys
      (leader/set-keys-for-major-mode 'markdown-mode
        ;;; unbound commands:
        ;;;  * markdown-outdent-region
        ;;;  * markdown-indent-region
        ;;;  * markdown-outline-previous-same-level


        "h" 'markdown-up
        "j" 'markdown-next
        "k" 'markdown-previous
        "l" 'markdown-outline-next-same-level
        "g" 'markdown-next-link
        "G" 'markdown-previous-link
        "}" 'markdown-forward-block
        "{" 'markdown-backward-block
        "SPC" 'markdown-do
        "'" 'markdown-edit-code-block
        "f" 'markdown-follow-thing-at-point
        ">" 'markdown-blockquote-region
        "TAB" 'markdown-pre-region ;; preformat

        ;; complete/checks
        "c"  "check/complete"
        "cc" 'markdown-complete
        "cb" 'markdown-complete-buffer
        "cr" 'markdown-check-refs
        "cR" 'markdown-unused-refs
        "cl" 'markdown-cleanup-list-numbers

        "o" 'markdown-open
        "e" 'markdown-export
        "p" 'markdown-preview
        "v" 'markdown-export-and-preview
        "O" 'markdown-other-window

        ;; insert
        "i"  "insert"
        "i TAB" 'markdown-insert-image
        "i*" 'markdown-insert-list-item
        "i!" 'markdown-insert-header-setext-1
        "i-" 'markdown-insert-hr
        "i1" 'markdown-insert-header-atx-1
        "i2" 'markdown-insert-header-atx-2
        "i3" 'markdown-insert-header-atx-3
        "i4" 'markdown-insert-header-atx-4
        "i5" 'markdown-insert-header-atx-5
        "i6" 'markdown-insert-header-atx-6
        "i@" 'markdown-insert-header-setext-2
        "iC" 'markdown-insert-gfm-code-block
        "iH" 'markdown-insert-header-setext-dwim
        "i[" 'markdown-insert-gfm-checkbox
        "ib" 'markdown-insert-bold
        "ic" 'markdown-insert-code
        "ie" 'markdown-insert-italic
        "if" 'markdown-insert-footnote
        "ii" 'markdown-insert-italic
        "ik" 'markdown-insert-kbd
        "ip" 'markdown-insert-pre
        "iq" 'markdown-insert-blockquote
        "is" 'markdown-insert-strike-through

        "ih"  "header"
        "ih!" 'markdown-insert-header-setext-1
        "ih1" 'markdown-insert-header-atx-1
        "ih2" 'markdown-insert-header-atx-2
        "ih3" 'markdown-insert-header-atx-3
        "ih4" 'markdown-insert-header-atx-4
        "ih5" 'markdown-insert-header-atx-5
        "ih6" 'markdown-insert-header-atx-6
        "ih@" 'markdown-insert-header-setext-2
        "ihH" 'markdown-insert-header-setext-dwim
        "ihh" 'markdown-insert-header-dwim
        "ihs" 'markdown-insert-header-setext-2
        "iht" 'markdown-insert-header-setext-1

        "il"  "link"
        "ill" 'markdown-insert-link
        "ilf" 'markdown-insert-footnote
        "ilu" 'markdown-insert-uri
        "ilw" 'markdown-insert-wiki-link

        ;; delete/kill
        "d"  "delete"
        "dd" 'markdown-kill-thing-at-point
        "db" 'markdown-kill-block
        "do" 'markdown-kill-outline
        "dy" 'markdown-kill-ring-save

        ;; toggles
        "M"  "toggle"
        "Mm" 'markdown-toggle-math
        "Mf" 'markdown-toggle-fontify-code-blocks-natively
        "Mi" 'markdown-toggle-inline-images
        "Mu" 'markdown-toggle-url-hiding
        "Mm" 'markdown-toggle-markup-hiding
        "Mc" 'markdown-toggle-gfm-checkbox
        "Ml" 'markdown-live-preview-mode

        ;; narrowing
        "n"  "narrow"
        "nb" 'markdown-narrow-to-block
        "np" 'markdown-narrow-to-page
        "ns" 'markdown-narrow-to-subtree
        "nw" 'widen

        ;; marks
        "m"  "mark"
        "ms" 'markdown-mark-subtree
        "mb" 'markdown-mark-block

        ;; table
        "t"  "table"
        "ts" 'markdown-table-sort-lines
        "tT" 'markdown-table-transpose
        "tt" 'markdown-insert-table
        "tn" 'markdown-insert-table
        "tc" 'markdown-table-convert-region

        "ti"  "insert"
        "tir" 'markdown-table-insert-row
        "tic" 'markdown-table-insert-column
        "tit" 'markdown-insert-table

        "td"  "delete"
        "tdr" 'markdown-table-delete-row
        "tdc" 'markdown-table-delete-column)

      (provide '+markdown-bindings)
    #+END_SRC

*** markdown-toc
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-toc
        :only (package! markdown)
        :ensure t
        :defer  t
        :config
        (leader/set-keys-for-major-mode 'markdown-mode
          "bx" 'markdown-toc-delete-toc
          "br" 'markdown-toc-refresh-toc
          "bb" 'markdown-toc-generate-or-refresh-toc
          "bi" 'markdown-toc-generate-toc))
    #+END_SRC

*** gh-md
    #+BEGIN_SRC emacs-lisp
      (use-package gh-md
        :only (package! markdown)
        :ensure t
        :defer  t
        :after  markdown-mode
        :init
        (leader/set-keys-for-major-mode 'markdown-mode
          "r" 'gh-md-render-buffer
          "R" 'gh-md-render-region))
    #+END_SRC

** cmake
   #+BEGIN_SRC emacs-lisp
     (use-package cmake-mode
       :only (package! cmake)
       :ensure t
       :defer  t
       :mode (rx (or "CMakeLists.txt" ".cmake"))
       :hook (cmake-mode . flycheck-mode))
   #+END_SRC

*** company-cmake
    #+BEGIN_SRC emacs-lisp
      (use-package company-cmake
        :only (package! cmake)
        :after cmake
        :defer t
        :init
        (company/configure-mode (cmake-mode :major t)
          company-cmake))
    #+END_SRC

** c
   #+BEGIN_SRC emacs-lisp
     (use-package cc-mode
       :only (package! c)
       :straight (cc-mode :type built-in)
       :defer t
       :mode ("\\.h$" . c++-mode)
       :commands (cc-mode-set-bindings+)
       :hook ((c-mode   . flycheck-mode)
              (c++-mode . flycheck-mode))
       :config
       (add-hook 'eglot-managed-mode-hook
                 (defun cc-mode-disable-flycheck-with-eglot+ ()
                   (when (and (member major-mode '(c-mode c++-mode))
                              (featurep 'flycheck))
                     (flycheck-mode (if (eglot-managed-p) -1 +1)))))

       (c-toggle-auto-newline  +1)
       ;; WARN never do this, it breaks commenting in
       ;;      weird places.
       ;; (c-toggle-comment-style +1)

       (setq c-default-style "stroustrup")

       ;; (company/configure-mode ((c-mode c++-mode) :major t :predicate ycmd-mode)
       ;;   company-ycmd company-c-headers)

       (defun cc-mode-set-bindings+ (mode)
         (leader/set-keys-for-major-mode mode
           "S" 'c-set-style
           "D" 'c-display-defun-name
           "m" 'c-mark-function
           "r" 'c-indent-defun
           "/" 'c-backslash-region
           "\\" 'c-toggle-comment-style
           "DEL" 'c-hungry-delete-forward
           "M-DEL" 'c-hungry-delete-backwards))

       (cc-mode-set-bindings+ 'c-mode)
       (cc-mode-set-bindings+ 'cc-mode))
   #+END_SRC

*** lsp
    LSP implementation for C++/C.

    #+BEGIN_SRC emacs-lisp
      (when (package! c)
        ;; prefer clang to ccls (when available).
        (when (and +c-prefer-clangd
                   (package! eglot)
                   (executable-find "clangd"))
          (with-eval-after-load 'eglot
            (add-to-list 'eglot-server-programs
                         '((c++-mode c-mode) "clangd"))))

        (when +lsp-command
          (add-hook 'c-mode-hook   +lsp-command)
          (add-hook 'c++-mode-hook +lsp-command)))
    #+END_SRC

*** disaster
    #+BEGIN_SRC emacs-lisp
      (use-package disaster
        :only (package! c)
        :ensure t
        :defer  t
        :after  cc-mode
        :init
        (leader/set-keys-for-major-mode '(c-mode c++-mode)
          "D" 'disaster))
    #+END_SRC

** kotlin
   #+BEGIN_SRC emacs-lisp
     (use-package kotlin-mode
       :only (package! kotlin)
       :ensure t
       :defer  t
       :init
       (when +lsp-command
         (add-hook 'kotlin-mode-hook +lsp-command))

       :config
       (push (cons 'kotlin-mode 4) +indent-config)

       (leader/set-keys-for-major-mode 'kotlin-mode
         "r" 'kotlin-repl

         "e"     "eval"
         "e-"    'kotlin-send-line
         "e|"    'kotlin-send-block
         "er"    'kotlin-send-region
         "eb"    'kotlin-send-buffer
         "e S--" 'kotlin-send-line-and-focus
         "e S-|" 'kotlin-send-block-and-focus
         "eR"    'kotlin-send-region-and-focus
         "eB"    'kotlin-send-buffer-and-focus))
   #+END_SRC

** java
   java, the language *everyone* tolerates.

   #+BEGIN_SRC emacs-lisp
     (use-package cc-mode
       :only (package! java)
       :defer t
       :init
       :config
       (cc-mode-set-bindings+ 'java-mode)

       (add-hook 'java-mode-hook
                 (defun +java-mode-fix-indentation ()
                   (c-set-offset 'inexpr-class 0))))
   #+END_SRC

*** meghanada
    a language server for java, written in java. NOT LSP Compliant.

   #+BEGIN_SRC emacs-lisp
     (use-package meghanada
       :only (package! java)
       :ensure t
       :defer  t
       :delight (meghanada-mode "MEG")
       :hook (java-mode . meghanada-mode)
       :config
       (require 'yasnippet)

       (company/configure-mode (meghanada-mode)
         company-meghanada)

       (setq meghanada-map+ (make-sparse-keymap))

       (general-define-key
        :keymaps 'meghanada-map+
        "SPC" 'meghanada-run-task
        "D"   'meghanada-typeinfo
        "G"   'meghanada-back-jump
        "F"   'meghanada-search-everywhere-ex
        "d"   'meghanada-reference ;; documentation
        "g"   'meghanada-jump-declaration
        "k"   'meghanada-server-kill
        "n"   'meghanada-server-start
        "p"   'meghanada-code-beautify
        "r"   'meghanada-restart
        "s"   'meghanada-show-project
        "f"   'meghanada-search-everywhere
        "y"   'meghanada-mode

        "cc" 'meghanada-compile-project
        "cd" 'meghanada-debug-main
        "cf" 'meghanada-compile-file
        "cr" 'meghanada-exec-main

        "Si" 'meghanada-install-server
        "Su" 'meghanada-update-server

        "ia" 'meghanada-import-all
        "il" 'meghanada-local-variable
        "io" 'meghanada-optimize-import
        "ip" 'meghanada-import-at-point

        "td"      'meghanada-debug-junit-class
        "tt"      'meghanada-switch-testcase ;; test -> file -> test
        "tf"      'meghanada-run-junit-class
        "t SPC"   'meghanada-run-junit-test-case
        "t C-SPC" 'meghanada-debug-junit-test-case)

       (defvar leader-meghanada-bindings+
         `(""  "meghanada"
           ""  ,meghanada-map+

           "c" "compile/run"
           "t" "test"
           "S" "server"
           "i" "insert/refactor")
         "leader bindings for the `meghanada' server")

       ;; (apply #'leader/set-keys-for-major-mode 'java-mode leader-meghanada-bindings+)
       (leader/with-prefix leader-server-leader-prefix
         (apply #'leader/set-keys-for-mode 'meghanada-mode leader-meghanada-bindings+)))
   #+END_SRC

** javascript
   # NOTE no on the fly syntax checking? make sure eslint is installed no warning
   # or error will be issued if it isn't :(

*** javascript-mode
    I just use this as a drop in replacement for json-mode :)

    #+BEGIN_SRC emacs-lisp
      (push '(js-mode . 2) +indent-config)
    #+END_SRC

*** js2-mode
    the true javascript package for emacs.

    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :only (package! javascript)
        :ensure t
        :defer  t
        :mode (rx ".js")
        :hook ((js2-mode . flycheck-mode)
               (js2-mode . javascript-enable-lsp-in-projects)
               (js2-jx-mode . javascript-enable-lsp-in-projects))
        :commands (js-jsdoc-return+)
        :init
        (defun javascript-enable-lsp-in-projects (&rest _)
          (when (and +lsp-command
                     (project-has-file-p "package.json"
                                         "yarn.lock"))
            (funcall +lsp-command)))

        :config
        (setq js2-mode-show-parse-errors      nil
              js2-mode-show-strict-warnings   nil
              js2-strict-missing-semi-warning nil)

        (general-define-key
          :keymaps 'js2-mode-map
          [remap indent-new-comment-line] 'js-jsdoc-return+)

        (general-define-key
          :keymaps 'js2-mode-map
          :states  'insert
          ;; properly formets javadocs
          "<return>" 'js2-line-break
          "RET"      'js2-line-break)

        (leader/set-keys-for-major-mode 'js2-mode
          "i"  "insert"
          "h"  "help"
          "gg" 'js2-jump-to-definition

          ;; toggle hide-show
          "H"  "hide/show"
          "HH" 'js2-mode-show-all
          "Hw" 'js2-mode-toggle-warnings-and-errors
          "He" 'js2-mode-toggle-element
          "Hc" 'js2-mode-toggle-hide-comments
          "Hf" 'js2-mode-toggle-hide-functions

          ;; hide
          "Hh" "hide"
          "Hhw" 'js2-mode-hide-warnings-and-errors
          "Hhe" 'js2-mode-hide-element
          "Hhc" 'js2-mode-show-comments
          "Hhf" 'js2-mode-hide-functions

          ;; show
          "Hs" "show"
          "Hsw" 'js2-mode-display-warnings-and-errors
          "Hse" 'js2-mode-show-element
          "Hsc" 'js2-mode-hide-comments
          "Hsf" 'js2-mode-show-functions)

        (defun js-jsdoc-return+ (&optional arg)
          (interactive "p")
          (barf-if-buffer-read-only) ;; can't continue adding to readonly buffer.
          (setq arg (or arg 1)) ;; insert one line when arg hasn't been given.

          (let (inserted)
            (when (in-comment-p)
              (let* ((current-line (buffer-substring-no-properties
                                    (line-beginning-position)
                                    (line-end-position)))
                     (start-regexp (rx bol (zero-or-more blank) "/**"))
                     (continue-regexp (rx bol (one-or-more blank) "*"))
                     start-p continue-p)
                (when (or (setq continue-p (string-match-p continue-regexp current-line))
                          (setq start-p    (string-match-p start-regexp    current-line)))
                  (setq inserted t)
                  (let ((start-column (line-beginning-column)))
                    (when start-p (incf start-column)) ;; one char past start column
                    (dotimes (_ arg)
                      ;; (goto-char (line-end-position))
                      (newline)
                      (insert (make-string start-column ? ) "* ")
                      (save-excursion
                        (previous-line)
                        (whitespace-cleanup-region (line-beginning-position) (line-end-position))))))))
            (unless inserted
              (dotimes (_ arg)
                (indent-new-comment-line))))))
    #+END_SRC

*** js-doc
    #+BEGIN_SRC emacs-lisp
      (use-package js-doc
        :only (package! javascript)
        :ensure t
        :defer  t
        :config
        ;; (general-define-key
        ;;   :keymaps 'js2-mode-map
        ;;   :states 'insert
        ;;   "@" 'js-doc-insert-tag)

        (leader/set-keys-for-major-mode 'js2-mode
          "i@" 'js-doc-insert-tag
                                              ; only works from within method
          "i)" 'js-doc-insert-function-doc
          "i(" 'js-doc-insert-function-doc-snippet
          "if" 'js-doc-insert-file-doc
          "h@" 'js-doc-describe-tag)

        :config
        (advice-add 'js-doc-insert-function-doc-snippet :after
                    (lambda (&rest r)
                      (evil-insert nil))))
    #+END_SRC

*** js2-refactor
    #+BEGIN_SRC emacs-lisp
      ;; most of this doesn't seem to work very well...
      ;; so I'm only using a few functions with simple features.
      (use-package js2-refactor
        :only (package! javascript)
        :ensure t
        :defer  t
        :diminish
        :hook (js2-mode . js2-refactor-mode)
        :config
        (defun js2r-exit-visual-mode-after-func-call (&rest args)
          (when (evil-visual-state-p)
            (evil-exit-visual-state)))

        (advice-add 'js2r-extract-method   :after #'js2r-exit-visual-mode-after-func-call)
        (advice-add 'js2r-extract-function :after #'js2r-exit-visual-mode-after-func-call)

        (leader/set-keys-for-major-mode 'js2-mode
          "[" 'js2r-expand-node-at-point
          "]" 'js2r-contract-node-at-point

          ;; doesn't work unless executed from within a function
          "e"  "extract"
          "ef" 'js2r-extract-function
          "em" 'js2r-extract-method
          "ev" 'js2r-extract-var
          "el" 'js2r-extract-let
          "ec" 'js2r-extract-const

          "l" 'js2r-log-this
          "L" 'js2r-debug-this

          "v" 'js2r-var-to-this

          "s" 'js2r-forward-slurp
          "b" 'js2r-forward-barf))
    #+END_SRC

*** xref-js2
    #+BEGIN_SRC emacs-lisp
      (use-package xref-js2
        :only (package! javascript)
        :ensure t
        :defer  t
        :hook (xref-backend-functions . xref-js2-xref-backend)
        :config
        (setq xref-js2-search-program 'rg))
    #+END_SRC

*** skewer-mode
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package skewer-mode
        :only (package! javascript)
        :ensure t
        :defer  t
        :delight
        (skewer-css-mode "skewerC")
        (skewer-html-mode "skewerH")
        :init
        (setq skewer-leader-prefix (concat leader-major-mode-prefix "S"))

        :config
        ;; once required, enable skewer in all
        ;; compatible buffers
        (add-hook 'js2-mode-hook 'skewer-mode)
        (add-hook 'css-mode-hook 'skewer-css-mode)
        (add-hook 'html-mode-hook 'skewer-html-mode)

        ;; (run-skewer) ;; and begin server

        (leader/with-prefix skewer-leader-prefix
          (leader/set-keys-for-mode 'skewer-mode
            "e" 'skewer-eval-last-expression
            "E" 'skewer-eval-print-last-expression
            "(" 'skewer-eval-defun
            "b" 'skewer-load-buffer

            "R" 'skewer-repl
            "L" 'skewer-bower-load
            "B" 'skewer-bower-refresh
            "p" 'skewer-run-phantomjs
            "P" 'skewer-phantomjs-kill)

          (leader/set-keys-for-mode 'skewer-html-mode
            "s" 'skewer-html-fetch-selector-into-buffer
            "e" 'skewer-html-eval-tag

            "R" 'skewer-repl
            "L" 'skewer-bower-load
            "B" 'skewer-bower-refresh
            "p" 'skewer-run-phantomjs
            "P" 'skewer-phantomjs-kill)

          (leader/set-keys-for-mode 'skewer-css-mode
            "e" 'skewer-css-eval-current-rule
            "b" 'skewer-css-eval-buffer
            "c" 'skewer-css-clear-all
            "d" 'skewer-css-eval-current-declaration

            "R" 'skewer-repl
            "L" 'skewer-bower-load
            "B" 'skewer-bower-refresh
            "p" 'skewer-run-phantomjs
            "P" 'skewer-phantomjs-kill)))
    #+END_SRC

** typescript
   typescript depends on javascript +for now+.

   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :only (package! javascript typescript)
       :ensure t
       :defer  t
       :mode ("\\.tsx" . typescript-mode)
       :hook (typescript-mode . javascript-enable-lsp-in-projects)
       :config
       (general-define-key
         :keymaps 'typescript-mode-map
         [remap indent-new-comment-line] 'js-jsdoc-return+))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (when (package! javascript typescript)
       (when +lsp-command
         (add-hook 'typescript-mode-hook  +lsp-command))

       (push '(typescript-mode . 2) +indent-config)
       (add-hook 'typescript-mode-hook
                 (defun ts-setup-tsx ()
                   (when (string-suffix-p ".tsx"
                                          (buffer-file-name))
                     (emmet-mode +1)
                     (setq-local emmet-expand-jsx-className? t)))))
   #+END_SRC

** css/less
*** css-mode
    #+BEGIN_SRC emacs-lisp
      (use-package css-mode
        :only (package! css)
        :defer t
        :config
        (leader/set-keys-for-major-mode '(less-css-mode css-mode)
          "?" 'css-lookup-symbol
          "b" 'web-beautify-css)

        (company/configure-mode (css-mode :major t)
          company-css))
    #+END_SRC

*** lsp
    Requires ~npm install --global vscode-css-languageserver-bin~.

    #+BEGIN_SRC emacs-lisp
      (when (and +lsp-command
                 (package! css))
        (add-hook 'css-mode-hook  +lsp-command)
        (add-hook 'scss-mode-hook +lsp-command)

        (when (package! eglot)
          (with-eval-after-load 'eglot
             (push '((css-mode scss-mode)
                     "css-languageserver" "--stdio")
                   eglot-server-programs))))
    #+END_SRC

*** less-css-mode
    #+BEGIN_SRC emacs-lisp
      (use-package less-css-mode
        :only (package! css)
        :defer t
        :config
        (leader/set-keys-for-mode 'less-css-mode
          "c" 'less-css-compile)

        (company/configure-mode (less-css-mode :major t)
          company-css))
    #+END_SRC

** haskell
*** hindent
    #+BEGIN_SRC emacs-lisp
      (use-package hindent
        :only (package! haskell)
        :ensure t
        :defer  t
        :hook (haskell-mode . hindent-mode))
    #+END_SRC

*** company-cabal
    #+BEGIN_SRC emacs-lisp
      (use-package company-cabal
        :only (package! haskell)
        :ensure t
        :defer  t
        :after haskell-mode
        :init
        (company/configure-mode (haskell-cabal-mode :major t)
          company-cabal))
    #+END_SRC

*** flycheck-haskell
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-haskell
        :only (and (package! haskell)
                   (package! flycheck))
        :ensure t
        :defer  t
        :after  haskell-mode)
    #+END_SRC

*** haskell-mode
    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :only (package! haskell)
        :ensure t
        :defer  t
        :init
        (push 'haskell-interactive-mode whitespace-exempt-modes)
        (push 'inferior-haskell-mode whitespace-exempt-modes)
        (defalias 'haskell-repl #'run-haskell)

        :config
        (use-package haskell-indent
          :commands (haskell-indent-cycle))

        (setq haskell-process-type 'cabal-repl)
        (evil-set-initial-state 'haskell-interactive-mode 'emacs)

        (general-unbind :keymaps 'haskell-mode-map "C-M-i" )

        (defun haskell-enable-indent-control+ ()
          (interactive)
          (haskell-indent-mode +1)
          (general-define-key
            :states  '(insert replace)
            :keymaps 'haskell-mode-map
            "<tab>" 'haskell-indent-cycle))

        (leader/set-keys-for-major-mode 'haskell-mode
          "TAB"   'haskell-indent-cycle
          "S-TAB" 'haskell-delete-indentation

          "r"  "refactor"
          "ri" 'haskell-mode-format-imports
          "rI" 'haskell-sort-imports

          "i"  "insert"
          "is" 'haskell-mode-toggle-scc-at-point
          "i|" 'haskell-indent-insert-guard
          "iw" 'haskell-indent-insert-where
          "io" 'haskell-indent-insert-other
          "i=" 'haskell-indent-insert-equal

          "s"  "session"
          "sc" 'haskell-session-change
          "sC" 'haskell-session-change-target
          "sk" 'haskell-session-kill
          "sK" 'haskell-kill-session-process))
    #+END_SRC

*** hs-lint
    :PROPERTIES:
    :header-args+: :tangle no
    :END:

    #+BEGIN_SRC emacs-lisp
      (use-package hs-lint
        :only (package! haskell)
        :defer t
        :commands (hs-lint hs-lint-mode))
    #+END_SRC

**** hlint-refactor-mode
     #+BEGIN_SRC emacs-lisp
       (use-package hlint-refactor-mode
         :only (package! haskell)
         :defer t
         :commands (hlint-refactor-refactor-buffer
                    hlint-refactor-refactor-at-point))
     #+END_SRC

*** lsp
    #+BEGIN_SRC emacs-lisp
      (when (and +lsp-command
                 (package! haskell))
        (if (eq +lsp-command 'lsp)
            (use-package lsp-haskell
              :ensure t
              :defer  t
              :after  haskell-mode
              :hook ((haskell-mode . lsp) ;; order of evaluation matters
                     (haskell-mode . (lambda ()
                                       (require 'lsp-haskell)
                                       ;; until there's actually any useful info
                                       (setq-local lsp-eldoc-enable-hover nil))))
              :config
              (setq lsp-haskell-process-args-hie (list "-d" "-l" (make-temp-file "hie." nil ".log"))))
          (add-hook 'haskell-mode-hook +lsp-command)))
    #+END_SRC

** golang
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :only (package! golang)
       :ensure t
       :defer  t
       :config
       ;; only run when current buffer is in go-mode
       (add-hook 'before-save-hook 'gofmt-before-save)

       (add-hook 'go-mode-hook
                 (defun go-mode-setup+ ()
                   ;; recommended by the official style guide for golang.
                   (setq indent-tabs-mode t)))

       (push '(go-mode . 4) +indent-config)

       (leader/set-keys-for-major-mode 'go-mode
         ;; requires: go get github.com/rogpeppe/godef
         "h" "help/guru"
         "hh" 'godoc-at-point
         "hH" 'godoc

         "g" "goto"
         "gi" 'go-goto-imports
         "gc" 'go-coverage

         "i" "imports"
         "ia" 'go-import-add
         "ig" 'go-goto-imports
         "ir" 'go-remove-unused-imports

         "e" "playground"
         "eb" 'go-play-buffer
         "er" 'go-play-region
         "ed" 'go-download-play))
   #+END_SRC

*** go-guru
    requires: ~go get golang.org/s/using-guru~

    #+BEGIN_SRC emacs-lisp
      (use-package go-guru
        ;; only use when lsp based language support is available
        :only (and (not +lsp-command)
                   (package! golang))
        :ensure t
        :defer  t
        :after  go-mode
        :init
        (add-hook 'go-guru-output-mode-hook
                  (defun go-guru-preserve-compilation-window+ ()
                    "prevent my compilation-hook settings interfering with go-guru."
                    (setq-local compilation-auto-kill-window nil)))

        (leader/set-keys-for-major-mode 'go-mode
          "hd" 'go-guru-describe
          "hi" 'go-guru-implements
          "hc" 'go-guru-peers
          "hp" 'go-guru-pointsto
          "hs" 'go-guru-callstack
          "he" 'go-guru-whicherrs

          "gr" 'go-guru-referrers
          "g<" 'go-guru-callers
          "g>" 'go-guru-callees
          "go" 'go-guru-set-scope
          "gg" 'go-guru-definition
          "gf" 'go-guru-freevars))
    #+END_SRC

*** gopls
    The golang language server.
    requires: ~GO111MODULE=on  go get -u golang.org/x/tools/gopls@latest~.

    #+BEGIN_SRC emacs-lisp
      (when (and +lsp-command
                 (package! golang))
        (add-hook 'go-mode-hook +lsp-command))
    #+END_SRC

** rust
   LSP support requires: ~rustup component add rls rust-analysis rust-src~.
   or [[https://github.com/rust-analyzer/rust-analyzer][rust-analyzer]].

   #+BEGIN_SRC emacs-lisp
     (use-package rustic
       :only (package! rust)
       :ensure t
       :defer  t
       :config
       (setq rustic-format-trigget 'on-save
             rustic-lsp-client (cond
                                ((package! eglot) 'eglot)
                                ((package! lsp-mode) 'lsp-mode))
             rustic-lsp-server (if (executable-find "rust-analyzer")
                                   'rust-analyzer
                                 'rls))

       (advice-add 'rustic-popup :around
                   #'restore-default-display-buffer-actions)

       (push 'rustic-popup-mode whitespace-exempt-modes)
       (evil-set-initial-state 'rustic-popup-mode 'emacs)

       ;; (push 'rustic-compilation-mode compilation-auto-kill-ignore-modes)
       (push 'rustic-cargo-test-mode compilation-auto-kill-ignore-modes)

       (with-eval-after-load 'projectile
         (assoc-pop! 'rust-cargo projectile-project-types)

         (projectile-register-project-type 'rust-cargo '("Cargo.toml")
                                           :compile #'rustic-compile
                                           :test    #'rustic-cargo-test
                                           :run     #'rustic-cargo-run))

       (leader/set-keys-for-major-mode 'rustic-mode
         "," 'rustic-popup
         "c" 'rustic-compile
         "C" 'rustic-recompile
         "p" 'rustic-cargo-run
         "u" 'rustic-playpen
         "d" 'rustic-cargo-doc

         "b" "project"
         "bc" 'rustic-cargo-clean
         "bo" 'rustic-cargo-outdated
         "bd" 'rustic-cargo-build-doc

         "t" "test"
         "tt" 'rustic-cargo-test
         "tT" 'rustic-cargo-test-rerun
         "tb" 'rustic-cargo-bench
         "tc" 'rustic-cargo-check

         "r" "refactor"
         "rx" 'rustic-rustfix
         "rf" 'rustic-cargo-fmt
         "rc" 'rustic-cargo-clippy))
   #+END_SRC

*** compile
    fix ~compilation-was-open-p~ isn't assigned when rustic compilation is begun.

    #+BEGIN_SRC emacs-lisp
      (when (package! rust)
        (advice-add 'rustic-compilation :before
                    (defun rustic-compilation-check-window-was-open-p+ (command &rest args)
                      ;; copied from `rustic-compilation'.
                      (let ((buf (get-buffer
                                  (or (plist-get args :buffer) rustic-compilation-buffer-name))))
                        (setq compilation-was-open-p
                              (and buf (get-buffer-window buf) t))))))
    #+END_SRC

** git
*** gitignore
    #+BEGIN_SRC emacs-lisp
     (use-package gitignore-mode
       :only (package! git-langs)
       :ensure t
       :defer  t)
    #+END_SRC

*** gitconfig
    #+BEGIN_SRC emacs-lisp
     (use-package gitconfig-mode
       :only (package! git-langs)
       :ensure t
       :defer  t)
    #+END_SRC

*** gitattributes
    #+BEGIN_SRC emacs-lisp
     (use-package gitattributes-mode
       :only (package! git-langs)
       :ensure t
       :defer  t)
    #+END_SRC

** latex
   #+BEGIN_SRC emacs-lisp
     (use-package tex-mode
       :only (package! latex)
       :defer t
       :hook ((latex-mode . display-line-numbers-mode)
              (latex-mode . flycheck-mode))
       :init
       (setq TeX-auto-save  t
             TeX-parse-self t
             TeX-source-correlate-start-server t
             tex-print-file-extension ".pdf")

       (defvar latex-modes+ '(latex-mode tex-mode)
         "list of tex related modes. used for leader and pretty symbols.")

       (push '(tex-mode   . 2) +indent-config)
       (push '(latex-mode . 2) +indent-config)

       :config
       (push 'TeX-output-mode whitespace-exempt-modes)
       (push 'TeX-special-mode whitespace-exempt-modes)

       (add-hook 'plain-TeX-mode-hook
                 (defun tex-update-electric-math+ (&rest _)
                   (setq-local TeX-electric-math '("$" . "$"))))

       (add-hook 'LaTeX-mode-hook
                 (defun latex-update-electric-math+ (&rest _)
                   (setq-local TeX-electric-math '("\\(" . "\\)"))))

       ;; show process output on error
       (advice-add 'TeX-command-sentinel :after
                   (defun TeX-process-error-handler+ (p msg)
                     (unless (zerop (process-exit-status p))
                       (TeX-recenter-output-buffer nil))))

       ;; for some reason, focus switches back to tex buffer
       (advice-add 'TeX-recenter-output-buffer :after
                   (defun TeX-recenter-focus (&rest _)
                     (TeX-pop-to-buffer (TeX-active-buffer))))

       (eval
        `(configure-presym! ',latex-modes+
           ,@(cl-loop
              for tuple in tex--prettify-symbols-alist
              append (list (car tuple) (cdr tuple)))))

       (general-define-key
         :keymaps 'latex-mode-map
         "C-M-i" nil)

       (leader/set-keys-for-major-mode latex-modes+
         "{" 'latex-insert-block
         "}" 'latex-close-block)

       ;; (defun latex/font-bold         () (interactive) (TeX-font nil ?\C-b))
       ;; (defun latex/font-medium       () (interactive) (TeX-font nil ?\C-m))
       ;; (defun latex/font-code         () (interactive) (TeX-font nil ?\C-t))
       ;; (defun latex/font-emphasis     () (interactive) (TeX-font nil ?\C-e))
       ;; (defun latex/font-italic       () (interactive) (TeX-font nil ?\C-i))
       ;; (defun latex/font-clear        () (interactive) (TeX-font nil ?\C-d))
       ;; (defun latex/font-calligraphic () (interactive) (TeX-font nil ?\C-a))
       ;; (defun latex/font-small-caps   () (interactive) (TeX-font nil ?\C-c))
       ;; (defun latex/font-sans-serif   () (interactive) (TeX-font nil ?\C-f))
       ;; (defun latex/font-normal       () (interactive) (TeX-font nil ?\C-n))
       ;; (defun latex/font-serif        () (interactive) (TeX-font nil ?\C-r))
       ;; (defun latex/font-oblique      () (interactive) (TeX-font nil ?\C-s))
       ;; (defun latex/font-upright      () (interactive) (TeX-font nil ?\C-u))
       )
   #+END_SRC

*** auctex
    #+BEGIN_SRC emacs-lisp
      (use-package tex-site
        :only (package! latex)
        :ensure auctex
        :after  tex-mode
        :defer  t
        :hook ((latex-mode . TeX-fold-mode)
               (latex-mode . TeX-PDF-mode)
               (latex-mode . TeX-source-correlate-mode))
        :init
        (with-suppressed-warnings
          (defvaralias 'LaTeX-mode-hook 'latex-mode-hook))

        (defvar TeX-view-in-emacs+ nil
          "when true, view latex documents in emacs PDFTools.
      This variable should be set before requiring Auctex.")

        :config
        ;; (with-eval-after-load 'tex
        ;;   (when (executable-find "zathura")
        ;;     (add-to-list 'TeX-view-program-selection
        ;;                  '(output-pdf "Zathura"))

        ;;     (let ((editor-command (concat "emacsclient --server-file "
        ;;                                   (shell-quote-argument (join-path server-auth-dir "server"))
        ;;                                   (when (unix-p)
        ;;                                     (concat
        ;;                                      " --socket-name "
        ;;                                      (shell-quote-argument (join-path server-socket-dir "server")))))))
        ;;       ;; emacs isn't using the path for my server file and there's no way to specify
        ;;       ;; both the server TCP file and socket file, so let's just hack it into the editor
        ;;       ;; command
        ;;       (add-to-list 'TeX-view-program-list
        ;;                    `("Zathura"
        ;;                      ("zathura %o" (mode-io-correlate
        ;;                                     ,(concat
        ;;                                       " --synctex-forward %n:0:\"%b\" -x \"" editor-command  "  +%{line} %{input}\"")))
        ;;                      "zathura")))))

        (defvar-local TeX-command-last nil
          "the last command invoked by TeX in this buffer.")

        (defun TeX-command-smart (&optional prompt override-confirm)
          "`TeX-command-master' but with memory.
      This function works like the master command, however by default it reruns
      the last run command instead of prompting to run the command. You can pass
      a prefix arg to force the prompt to take place.
      "
          (interactive "P")
          (unless TeX-command-last
            (setq prompt t))

          (let ((cmd (or (and prompt
                              (TeX-command-query (TeX-master-file nil nil t)))
                         TeX-command-last)))
            (setq TeX-command-last cmd) ;; update command memory
            (TeX-command cmd 'TeX-master-file override-confirm)))

        (advice-add 'TeX-command :before
                    (defun TeX-command--prompt-to-save+ (&rest args)
                      "ask to save modified tex buffers, before running commands on them."
                      (when (and (buffer-modified-p)
                                 buffer-file-name
                                 (yes-or-no-p (format "Save file %s?" buffer-file-name)))
                        (save-buffer))))

        (when TeX-view-in-emacs+
          (add-hook 'TeX-after-compilation-finished-functions
                    #'TeX-revert-document-buffer))

        (setq TeX-view-program-selection
              (delq nil
                    `(((output-dvi style-pstricks)
                       "dvips and start")
                      ,(when TeX-view-in-emacs+
                         '(output-pdf "PDF Tools"))
                      ,(when (executable-find "zathura")
                         '(output-pdf "Zathura"))
                      (output-dvi "Yap")
                      ,(when (executable-find "xdvi")
                         '(output-pdf "xdvi"))
                      (output-pdf "start")
                      (output-html "start"))))

        (general-define-key
          :states 'motion
          :keymaps 'TeX-error-overview-mode-map
          "RET" 'TeX-error-overview-goto-source
          "j" 'TeX-error-overview-next-error
          "k" 'TeX-error-overview-previous-error
          "o" 'TeX-error-overview-jump-to-source
          [remap quit-window] 'TeX-error-overview-quit)

        (leader/set-keys-for-major-mode 'TeX-error-overview-mode
          "b" 'TeX-error-overview-toggle-debug-bad-boxes
          "w" 'TeX-error-overview-toggle-debug-warnings
          "s" 'TeX-error-overview-toggle-suppress-ignored-warnings
          "l" 'TeX-error-overview-goto-log)

        (leader/set-keys-for-major-mode latex-modes+
          "SPC" 'TeX-command-master
          "b" 'LaTeX-environment ;; block but more interactive.
          "," 'TeX-command-smart
          "." 'TeX-command-run-all
          "l" 'TeX-recenter-output-buffer
          "e" 'TeX-error-overview
          "k" 'TeX-kill-job
          "v" 'TeX-view
          "h" 'TeX-doc
          "RET" 'TeX-command-run-all
          "t" 'TeX-font
          "\\" 'TeX-insert-macro
          "s" 'LaTeX-section
          "m" 'LaTeX-mark-environment ;; or LaTeX-mark-section

          ;; preview
          "p"   "preview"
          "pb"  'preview-buffer
          "pc"  'preview-clearout
          "pd"  'preview-document
          "pe"  'preview-environment
          "pf"  'preview-cache-preamble
          "pp"  'preview-at-point
          "pr"  'preview-region
          "ps"  'preview-section

          ;; fold
          "z" "fold"
          "z=" 'TeX-fold-math
          "zz" 'TeX-fold-dwim
          "zb" 'TeX-fold-buffer
          "zB" 'TeX-fold-clearout-buffer
          "ze" 'TeX-fold-env
          "zr" 'TeX-fold-region
          "zR" 'TeX-fold-clearout-region
          "zm" 'TeX-fold-macro
          "z\\" 'TeX-fold-macro
          "zp" 'TeX-fold-paragraph
          "zP" 'TeX-fold-clearout-paragraph
          "z%" 'TeX-fold-comment
          "zc" 'TeX-fold-clearout-item

          ;; indentation
          "TAB"   "indent"
          "TAB b" 'LaTeX-fill-environ
          "TAB p" 'LaTeX-fill-paragra
          "TAB r" 'LaTeX-fill-region
          "TAB s" 'LaTeX-fill-section

          ;; modes
          "M"  "mode"
          "Mp" 'TeX-PDF-mode ;; toggle between PDF and DVI output.
          "Ms" 'TeX-source-correlate-mode
          "Mi" 'TeX-interactive-mode
          "Mm" 'LaTeX-math-mode

          ;; toggle
          "T"  "toggle"
          "Tb" 'TeX-toggle-debug-bad-boxes
          "Td" 'TeX-toggle-debug-warnings
          "Ts" 'TeX-toggle-suppress-ignored-warnings))
    #+END_SRC

** bibtex
   #+BEGIN_SRC emacs-lisp
     (use-package bibtex
       :only (package! bibtex)
       :defer t
       :hook (bibtex-mode . display-line-numbers-mode)
       :init
       (setq bibtex-files (directory-files (org! "bib") t ".bib"))

       :config
       (setq bibtex-align-at-equal-sign t
             bibtex-include-OPTkey t
             orhc-bibtex-cache-file (var! "orhc-bibtex-cache")
             ;; use all available words and be as long as needed
             bibtex-autokey-titleword-length nil
             bibtex-autokey-titlewords nil
             ;; what I can I say, this just makes sense
             bibtex-field-delimiters 'double-quotes)

       ;; configure bibtex autokey structure: YEARauthor-paper-name
       (defvar bibtex-autokey-year-name-separator+ bibtex-autokey-name-year-separator
         "String to be put between year part and name part of key.
     See ‚Äòbibtex-generate-autokey‚Äô for details.")

       (defvar bibtex-autokey-name-title-separator+ bibtex-autokey-year-title-separator
         "String to be put between year part and name part of key.
     See ‚Äòbibtex-generate-autokey‚Äô for details.")

       (setq bibtex-autokey-year-name-separator+ ""
             bibtex-autokey-name-title-separator+ "-"
             bibtex-autokey-titleword-separator "-")

       (advice-add #'bibtex-generate-autokey :override
                   (defun bibtex-generate-autokey+ ()
                     (let* ((names (bibtex-autokey-get-names))
                            (year (bibtex-autokey-get-year))
                            (title (bibtex-autokey-get-title))
                            (autokey (concat bibtex-autokey-prefix-string
                                             year
                                             (unless (or (equal names "")
                                                         (equal year ""))
                                               bibtex-autokey-year-name-separator+)
                                             names
                                             (unless (or (and (equal names "")
                                                              (equal year ""))
                                                         (equal title ""))
                                               bibtex-autokey-name-title-separator+)
                                             title)))
                       (if bibtex-autokey-before-presentation-function
                           (funcall bibtex-autokey-before-presentation-function autokey)
                         autokey))))

       (evil-set-initial-state 'bibtex-mode 'normal)

       (add-hook 'bibtex-mode-hook
                 (defun bibtex-mode-setup+ ()
                   ;; 18 space indent... no thank you.
                   (setq-local fill-prefix nil)))

       (advice-add 'bibtex-clean-entry :around
                   (defun bibtex-reset-fill-prefix+ (func &rest args)
                     (let ((fill-prefix (make-string (1+ bibtex-text-indentation) ? )))
                       (apply func args))))

       ;; unused bindings
       ;; C-c C-y         bibtex-yank
       ;; C-c M-y         bibtex-yank-pop
       ;; TAB             bibtex-find-text
       ;; C-j             bibtex-next-field

       (general-unbind
        :keymaps 'bibtex-mode-map
        "TAB" "C-j")

       (general-define-key
        :keymaps 'bibtex-mode-map
        :states 'normal
        "gh" 'bibtex-beginning-of-entry
        "gk" 'bibtex-previous-entry
        "gj" 'bibtex-next-entry
        "gl" 'bibtex-end-of-entry)

       (leader/set-keys-for-major-mode 'bibtex-mode
         "," 'bibtex-clean-entry
         "r" 'bibtex-entry-update                                ; fill-out templates for missing fields in the current entry.
         "g" 'bibtex-search-entry
         "n" 'bibtex-narrow-to-entry
         "w" 'widen
         "m" 'bibtex-mark-entry
         "?" 'bibtex-print-help-message
         "u" 'bibtex-url                                         ; opens the url for the current entry (if there is one).
         "-" 'bibtex-fill-entry
         "x" 'bibtex-kill-entry
         "s" 'bibtex-search-crossref
         "j" 'bibtex-pop-next                                    ; fill out current field with similair value from next entry.
         "k" 'bibtex-pop-previous                                ; same as above but the previous entry.
         "o"   'bibtex-remove-OPT-or-ALT
         "C-o" 'bibtex-remove-OPT-or-ALT

         "y" "yank"
         "ys" 'bibtex-copy-summary-as-kill
         "yf" 'bibtex-copy-field-as-kill
         "yy" 'bibtex-copy-entry-as-kill

         "DEL" 'bibtex-empty-field
         "f" 'bibtex-make-field
         "d" 'bibtex-kill-field

         "i"    "insert"
         "ii"   'bibtex-entry
         "ip"   'bibtex-Preamble
         "ia"   'bibtex-Article
         "im"   'bibtex-Misc
         "ic"   'bibtex-InCollection
         "is"   'bibtex-String
         "ir"   'bibtex-TechReport
         "iu"   'bibtex-Unpublished
         "ib"   'bibtex-Book
         "iB"   'bibtex-InBook
         "il"   'bibtex-Booklet
         "ip"   'bibtex-Proceedings
         "iP"   'bibtex-InProceedings
         "i RET" 'bibtex-Manual

         "it"    "thesis"
         "itP"   'bibtex-PhdThesis
         "itm"   'bibtex-MastersThesis))
   #+END_SRC

*** company-bibtex
    #+BEGIN_SRC emacs-lisp
      (use-package company-bibtex
        :only (package! bibtex)
        :ensure t
        :defer  t
        :after (company bibtex)
        :init
        (add-to-list 'company-backends 'company-bibtex)
        (setq company-bibtex-bibliography bibtex-files))
    #+END_SRC

*** ebib
    biblatex/bibtex database management interface for emacs. TODO read [[https://joostkremers.github.io/ebib/ebib-manual.html][manual]].

    #+BEGIN_SRC emacs-lisp
      (use-package ebib
        :only (package! ebib bibtex)
        :ensure t
        :defer  t
        :init
        (leader/set-keys
          "ox" 'ebib)

        :config
        (mkdir (var! "ebib") t)

        (setq ebib-preload-bib-files bibtex-files
              ebib-keywords-file (var! "ebib/keywords")
              ebib-reading-list-file (org! "ebib/reading-list.org"))

        ;; make ebib index use evil-motion-state
        (evil-set-initial-state 'ebib-index-mode 'motion)
        (evil-make-overriding-map ebib-index-mode-map 'motion)
        (push 'ebib-index-mode whitespace-exempt-modes)

        (general-unbind
          :keymaps 'ebib-index-mode-map
          "C-n" ; was ebib-next-entry
          "C-p" ; was ebib-prev-entry
          "n"
          "p"
          "?"   ; was ebib-search-next
          "SPC" ; was ebib-index-scroll-up
          "|"   ; was ebib-filters-logical-or
          "~"   ; was ebib-filters-logical-not
          "&"   ; was ebib-filters-logical-and
          "g"   ; was ebib-goto-first-entry
          "1" "2" "3" "4" "5" "6" "7" "8" "9" ; was ebib-switch-to-database-key
          "o"   ; was ebib-open-bibtex-file
          "J"   ; was ebib-switch-to-database-nth
          "H"   ; was ebib-toggle-hidden
          "i"   ; was ebib-push-citation
          "h"   ; was ebib-index-help
          "Z"   ; was ebib-lower
          "b"   ; was ebib-index-scroll-down
          "f"   ; was ebib-view-file
          "X"   ; was ebib-export-preamble
          "I"   ; was ebib-browse-doi
          )

        (general-define-key
          :keymaps 'ebib-index-mode-map
          :states  'motion
          ;; setup exit and reset commands
          [remap quit-window] 'ebib-leave-ebib-windows            ; leaves buffers alive, just hides windows.
          "gq"                'ebib-quit                          ; kills buffers and windows.
          [remap revert-buffer]  'ebib-reload-current-database
          "gR"                   'ebib-reload-all-databases

          ;; allow using ex commands for evil stuff.
          [remap evil-write]     'ebib-save-current-database
          [remap evil-write-all] 'ebib-save-all-databases

          ;; evil-like motions
          "C-u" 'ebib-index-scroll-down
          "C-d" 'ebib-index-scroll-up
          "C-b" 'ebib-index-scroll-down
          "C-f" 'ebib-index-scroll-up
          "gg"  'ebib-goto-first-entry
          "G"   'ebib-goto-last-entry
          "j"   'ebib-next-entry
          "k"   'ebib-prev-entry
          "gj"  'ebib-next-database
          "gk"  'ebib-prev-database
          "n"   'ebib-search-next

          ;; evil like yank, delete, paste
          "y" 'ebib-kill-entry
          "x" 'ebib-delete-entry                                  ; also bound to d
          "p" 'ebib-yank-entry                                    ; paste yanked entry

          "e" 'ebib-open-bibtex-file                              ; edit-file
          "h" 'ebib-show-log
          "l" 'ebib-edit-entry
          "o" 'ebib-edit-entry
          "RET" 'ebib-edit-entry

          "ss" 'ebib-export-entries                               ; save-as
          "sp" 'ebib-export-preamble                              ; save-preamble-as
          ;; configure sorting
          "sa" 'ebib-index-sort-ascending
          "sd" 'ebib-index-default-sort
          "sd" 'ebib-index-sort-descending
          )

        (leader/set-keys-for-major-mode 'ebib-index-mode
          "i" 'ebib-add-entry                                     ; also just bound to a
          "u" 'ebib-browse-url                                    ; also just bound to u
          "s" 'ebib-switch-to-database-nth
          "a" 'ebib-show-annotation
          "n" 'ebib-open-note
          "g" 'ebib-jump-to-entry
          "." 'ebib-toggle-hidden
          "b" 'ebib-browse-doi
          "F" 'ebib-view-file                                     ; open file referenced by current entry
          "!" 'ebib-generate-autokey

          "e" "edit"
          "ee" 'ebib-edit-keyname
          "ep" 'ebib-edit-preamble
          "es" 'ebib-edit-strings

          "f" "filters"
          "f" ebib-filters-map

          "k" "keywords"
          "k" ebib-keywords-map

          "d" "dependent"
          "d" ebib-dependent-map
          )

        ;;; ebib-log-mode
        (push 'ebib-entry-mode whitespace-exempt-modes)
        (evil-set-initial-state 'ebib-entry-mode 'motion)
        (evil-make-overriding-map ebib-entry-mode-map 'motion)

        (general-define-key
         :keymaps 'ebib-log-mode-map
         :states 'motion
         [remap quit-window] 'ebib-quit-log-buffer)

        (general-unbind
          :keymaps 'ebib-entry-mode-map
          "g"   ; ebib-goto-first-field
          "n"   ; ebib-next-field
          "p"   ; ebib-prev-field
          "v"   ; ebib-view-field-as-help
          "c"   ; ebib-copy-field-contents
          "SPC" ; ebib-goto-next-set
          "b"   ; ebib-goto-prev-set
          "h"   ; ebib-entry-help
          "k"   ; ebib-kill-field-contents
          ;; r               ebib-toggle-raw
          ;; s               ebib-insert-abbreviation
          )

        (general-define-key
         :keymaps 'ebib-entry-mode-map
         ;; allow using ex commands for evil stuff.
         [remap evil-write]     'ebib-save-current-database
         [remap evil-write-all] 'ebib-save-all-databases

         "C-u" 'ebib-goto-prev-set
         "C-d" 'ebib-goto-next-set
         "C-b" 'ebib-goto-prev-state
         "C-f" 'ebib-goto-next-set
         "gg" 'ebib-goto-first-field
         "G"  'ebib-goto-last-field
         "gj" 'ebib-next-field
         "gk" 'ebib-prev-field

         "c" 'ebib-edit-field
         "e" 'ebib-edit-field
         "i" 'ebib-edit-field
         ;; "m" 'ebib-edit-multiline-field
         ;; "x" 'ebib-delete-field-contents
         "d" 'ebib-kill-field-contents
         "x" 'ebib-kill-field-contents

         "y" 'ebib-copy-field-contents
         "p" 'ebib-yank-field-contents

         "o" 'ebib-quit-entry-buffer
         "q" 'ebib-quit-entry-buffer)

        (leader/set-keys-for-major-mode 'ebib-entry-mode
          "f" 'ebib-view-file-in-field                            ; TODO find out what this does
          "h" 'ebib-view-field-as-help
          "u" 'ebib-browse-url))

      (provide '+init-ebib)
    #+END_SRC

* Themes
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil
                        :family "Source Code Pro"
                        ;; height value is 1/10pt. so 100 = 10pt
                        :height (if (unix-p) 110 100)
                        :weight 'normal
                        :width 'normal)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'custom-theme-load-path (etc! "themes"))

    (add-hook 'emacs-startup-hook
              (lambda (&rest _)
                (load-theme 'an-old-hope t)))
  #+END_SRC

** an old hope
   :PROPERTIES:
   :header-args+: :tangle etc/themes/an-old-hope-theme.el
   :END:

   #+NAME: an-old-hope-theme-description
   #+BEGIN_EXAMPLE
      emacs theme inspired by a galaxy far far away...
      this theme is largely just a shot for shot copy of `jesseleite/an-old-hope-syntax-atom'
      ported to emacs because I refuse to live with an IDE that doesn't look like it XD.
      This theme isn't compatible with emacs in the terminal yet, when I find an easy way
      to approximate true-color colors to non-true-color colors, then I'll add support for
      it.
   #+END_EXAMPLE

*** Colors
    #+NAME: an-old-hope-theme-color-associations
    | color-name        | new-name   | hue | sat | light | description                       |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | very-light-grey   |            | 228 |   7 |    81 | shades of the millenium falcon    |
    | light-grey        |            | 228 |   7 |    55 | shades of the millenium falcon    |
    | grey              |            | 228 |   7 |    44 | shades of the millenium falcon    |
    | dark-grey         |            | 228 |   7 |    29 | shades of the millenium falcon    |
    | very-dark-grey    |            | 228 |   7 |    12 | shades of the millenium falcon    |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | vader             | red        | 352 |  81 |    58 | Vader's lightsaber                |
    | vader-dim         | red-dim    | 352 |  60 |    58 |                                   |
    | vader-int         | red-int    | 360 |  90 |    58 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | luke              | orange     |  25 |  86 |    55 | Luke's pilot uniform              |
    | luke-dim          | orange-dim |  25 |  60 |    60 |                                   |
    | luke-int          | orange-int |  25 |  86 |    65 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | threepio          | yellow     |  50 |  74 |    61 | Human cyborg relations            |
    | threepio-dim      | yellow-dim |  50 |  74 |    31 |                                   |
    | threepio-int      | yellow-int |  50 | 100 |    61 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | yoda              | green      | 107 |  40 |    57 | Fear is the path to the dark side |
    | yoda-dim          | green-dim  | 100 |  30 |    57 |                                   |
    | yoda-int          | green-int  | 120 |  50 |    57 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | artoo             | blue       | 196 |  64 |    58 | Whistle. Beep. Bloop.             |
    | artoo-dim         | blue-dim   | 200 |  44 |    58 |                                   |
    | artoo-int         | blue-int   | 220 |  84 |    64 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | purple            |            | 313 |  32 |    60 |                                   |
    | purple-dim        |            | 313 |  32 |    70 |                                   |
    | purple-int        |            | 313 |  40 |    60 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | turquoise         |            | 165 |  70 |    65 |                                   |
    | turquoise-dim     |            | 165 |  60 |    85 |                                   |
    | turquoise-int     |            | 165 |  80 |    50 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | black             |            | 240 |   6 |    14 |                                   |
    | black-dim         |            | 240 |  10 |    20 |                                   |
    | black-int         |            | 240 |   6 |    00 |                                   |
    |-------------------+------------+-----+-----+-------+-----------------------------------|
    | white             |            |   0 | 100 |   100 |                                   |
    | line-highlight-bg |            | 228 |   7 |    21 |                                   |
    | extra-dark-grey   |            | 228 |   7 |    10 | variant for imbedded org blocks   |
    | debug             |            | 198 |  91 |    13 | dark blue                         |

    #+NAME: color-assoc-to-rgb-strings
    #+HEADER: :var associations=an-old-hope-theme-color-associations
    #+BEGIN_SRC emacs-lisp :results value table :tangle no :exports none
     (require 'color)
     (require 'cl-lib)
     (require 'subr-x)

     (let (result)
       (cl-letf (((symbol-function 'smart-num)
                  (lambda (arg)
                    (if (numberp arg)
                        arg
                      (string-to-number arg)))))
         (dolist (row (cdr associations))
           (message "%s" row)
           (let* ((color-name (nth 0 row))
                  (dest-name  (progn
                                (let ((dest-name (nth 1 row)))
                                  (if (string-empty-p dest-name)
                                      color-name
                                    dest-name))))
                  (hue   (/ (smart-num (nth 2 row)) 360.0))
                  (sat   (/ (smart-num (nth 3 row)) 100.0))
                  (light (/ (smart-num (nth 4 row)) 100.0))

                  (rgb (color-hsl-to-rgb hue sat light))
                  (red   (nth 0 rgb))
                  (green (nth 1 rgb))
                  (blue  (nth 2 rgb)))
             (push (list (intern dest-name)
                         (color-rgb-to-hex red green blue 2))
                   result))))
       (reverse result))
    #+END_SRC

*** Header
    :PROPERTIES:
    :header-args+: :tangle etc/themes/an-old-hope-theme.el
    :END:

    #+HEADER: :shebang ";; an-old-hope-theme.el -- a syntax theme from a galaxy far away... -*- lexical-binding: t -*-"
    #+BEGIN_SRC emacs-lisp :comments no
     ;; Author: MoHKale
     ;; URL: https://github.com/MoHKale/an-old-hope-theme
     ;; Version: 0.1.0
     ;; Keywords: color, theme
     ;; Package-Requires: ((emacs "24"))

     ;; This file is not part of GNU Emacs

     ;; This file is free software; you can redistribute it and/or modify
     ;; it under the terms of the GNU General Public License as published by
     ;; the Free Software Foundation; either version 3, or (at your option)
     ;; any later version.

     ;; This program is distributed in the hope that it will be useful,
     ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ;; GNU General Public License for more details.

     ;; For a full copy of the GNU General Public License
     ;; see <http://www.gnu.org/licenses/>.

     ;; Commentary:
     ;; see https://github.com/MoHKale/an-old-hope-theme/tree/master/emacs
    #+END_SRC

*** Faces
    #+HEADER: :var desc=an-old-hope-theme-description colors=color-assoc-to-rgb-strings() cls=(eval t)
    #+BEGIN_SRC emacs-lisp :results silent
      (deftheme an-old-hope
        desc)

      ;; Library Specific Face Declarations
      (with-eval-after-load 'ivy
        (defface ivy-actual-highlight-face '((t (:inherit highlight)))
          "face actually used by ivy to highlight some candidates.
      see an-old-hope-theme.el for why this is necessary."))

      (eval
       `(let ((gui-class '((type graphic)))
              (class t)
              ,@colors)
      (custom-theme-set-faces 'an-old-hope
      ;;; defaults
       `(default
          ((,gui-class (:foreground ,very-light-grey :background ,very-dark-grey))
           ;; let the terminal inherit its background from the terminals default.
           (,class     (:foreground ,very-light-grey))))

       `(italic ((,class (:italic t :inherit default))))
       `(underline ((,class (:inherit default))))
       `(shadow ((,class (:foreground ,light-grey))))
       `(hl-line ((,class (:background ,line-highlight-bg))))

      ;;; font-lock - Syntax Highlighting Colors
       `(font-lock-builtin-face ((,class (:foreground ,blue))))
       `(font-lock-comment-face ((,class (:foreground ,grey))))
       `(font-lock-keyword-face ((,class (:foreground ,green))))
       `(font-lock-constant-face ((,class (:foreground ,red :inherit bold))))
       `(font-lock-function-name-face ((,class (:foreground ,yellow-int))))
       `(font-lock-negation-char-face ((,class (:foreground ,red))))
       `(font-lock-preprocessor-face ((,class (:foreground ,green-dim))))
       `(font-lock-string-face ((,class (:foreground ,blue))))
       `(font-lock-doc-face ((t (:foreground ,blue)))) ; TODO optional bg
       `(font-lock-type-face ((,class (:foreground ,red))))
       `(font-lock-variable-name-face ((,class (:foreground ,yellow-int))))
       `(font-lock-warning-face ((,class (:background ,yellow-int :foreground ,very-dark-grey :distant-foreground ,yellow-int :underline nil :inherit bold))))

       `(error   ((,class (:background ,red    :distant-foreground ,red    :foreground ,very-dark-grey :inherit bold))))
       `(success ((,class (:background ,green  :distant-foreground ,green  :foreground ,very-dark-grey :inherit bold))))
       `(warning ((,class (:background ,yellow :distant-foreground ,yellow :foreground ,very-dark-grey :inherit bold))))

       `(cursor ((,class (:background ,red))))
       `(custom-button ((,class (:background ,very-dark-grey :foreground ,very-light-grey :box (:line-width 2 :style released-button)))))

       ;; fringe has a distinctive background on the GUI and the terminal,
       ;; because the default bg on the terminal matches the terminal bg
       ;; we apply a variant color for the fringe on the terminal to make
       ;; it distinctive.
       `(fringe
          ((,gui-class (:background ,black))
           (,class     (:background ,very-dark-grey))))
       `(header-line ((,class (:background ,very-dark-grey :foreground ,blue))))
       `(line-number ((,class (:foreground ,very-light-grey :inherit fringe))))
       `(line-number-current-line ((,class (:foreground ,blue :inherit line-number))))
       `(vertical-border ((,class (:foreground ,very-light-grey))))
       `(internal-border ((,class (:foreground ,white :background ,white))))
       `(minibuffer-prompt ((,class (:foreground ,yellow :weight bold))))

       `(highlight ((,class (:foreground ,very-dark-grey :background ,blue :distant-foreground ,blue :inherit bold))))

       `(region ((,class (:background ,dark-grey :weight bold))))
       `(secondary-selection ((,class (:inherit region))))

       ;; face for current search match. exiting now takes you to it.
       `(isearch ((,class (:background ,blue-int :inherit bold))))
       `(isearch-fail ((,class (:inherit compilation-mode-line-fail))))
       `(match ((,class (:foreground ,green-dim))))
       ;; face for matches other than the current match
       `(evil-ex-search ((,class (:background ,purple :inherit bold))))
       `(lazy-highlight ((,class (:background ,blue-int :foreground ,black-dim))))

       ;; delimeter colors just taken from https://github.com/gastrodia/rainbow-brackets
       ;; colors 5-8 just recycle 1-4, maybe come up with more.
       `(rainbow-delimiters-depth-1-face ((,class (:foreground "#E6B422"))))
       `(rainbow-delimiters-depth-2-face ((,class (:foreground "#C70067"))))
       `(rainbow-delimiters-depth-3-face ((,class (:foreground "#00A960"))))
       `(rainbow-delimiters-depth-4-face ((,class (:foreground "#FC7482"))))
       `(rainbow-delimiters-depth-5-face ((,class (:foreground "#E6B422"))))
       `(rainbow-delimiters-depth-6-face ((,class (:foreground "#C70067"))))
       `(rainbow-delimiters-depth-7-face ((,class (:foreground "#00A960"))))
       `(rainbow-delimiters-depth-8-face ((,class (:foreground "#FC7482"))))

       ;; hyperlinks and path links
       `(link ((,class (:foreground ,blue))))
       `(link-visited ((,class (:foreground ,turquoise))))

      ;;; modeline/spaceline
       `(mode-line ((,class
                     (:background ,very-light-grey :foreground ,very-dark-grey
                      :box (:line-width 1 :color ,very-light-grey :style none)))))

       ;; same colors as default, just different box color.
       `(mode-line-inactive ((,class
                              (:weight light :foreground "grey80" :background "grey30"
                               :box (:line-width 1 :color "grey40" :style none)))))

       `(powerline-active1 ((,gui-class (:background ,black :foreground ,very-light-grey :inherit mode-line))
                            (,class     (:foreground ,very-light-grey :inherit default))))
       `(powerline-active2 ((,class (:inherit powerline-active1))))
       `(powerline-inactive1 ((,class (:box (:line-width 1 :color "grey40" :style none)
                                       :inherit powerline-active1))))

       `(spaceline-evil-normal  ((,class (:inherit mode-line :foreground ,very-dark-grey  :background "DarkGoldenrod2"))))
       `(spaceline-evil-insert  ((,class (:inherit mode-line :foreground ,very-dark-grey  :background ,green-int))))
       `(spaceline-evil-emacs   ((,class (:inherit mode-line :foreground ,very-dark-grey  :background ,blue))))
       `(spaceline-evil-replace ((,class (:inherit mode-line :foreground ,very-dark-grey  :background ,turquoise-int))))
       `(spaceline-evil-visual  ((,class (:inherit mode-line :foreground ,very-light-grey :background ,dark-grey))))
       `(spaceline-evil-motion  ((,class (:inherit mode-line :foreground ,very-dark-grey  :background ,purple-int))))
       `(spaceline-minibuffer   ((,class (:inherit mode-line :foreground ,very-dark-grey  :background ,blue))))

       `(spaceline-flycheck-error   ((,class (:inherit bold :foreground ,red-dim))))
       `(spaceline-flycheck-warning ((,class (:inherit bold :foreground ,orange-dim))))
       `(spaceline-flycheck-info    ((,class (:inherit bold :foreground ,green-dim))))


      ;;; evil
       `(vimish-fold-overlay ((,class (:background ,dark-grey :foreground ,green))))

      ;;; flycheck
       `(flycheck-info      ((,class (:underline (:style wave :color ,green)))))
       `(flycheck-warning   ((,class (:underline (:style wave :color ,yellow)))))
       `(flycheck-duplicate ((,class (:underline (:style wave :color ,orange)))))
       `(flycheck-incorrect ((,class (:underline (:style wave :color ,red)))))

       `(flycheck-fringe-info    ((,class (:foreground ,green-int  :inherit fringe))))
       `(flycheck-fringe-warning ((,class (:foreground ,yellow-int :inherit fringe))))
       `(flycheck-fringe-error   ((,class (:foreground ,red-int    :inherit fringe))))

      ;;; flyspell
       `(flyspell-duplicate ((,class (:foreground ,orange-dim :underline t))))
       `(flyspell-incorrect ((,class (:foreground ,red-dim :underline t))))

      ;;; avy
       `(avy-background-face ((,class (:foreground ,grey))))
       `(avy-lead-face ((,class (:background ,red-int :foreground "#ffffff"))))
       `(avy-lead-face-0 ((,class (:background ,blue-int :foreground "#ffffff"))))
       `(avy-lead-face-1 ((,class (:background ,very-light-grey :foreground ,very-dark-grey))))
       `(avy-lead-face-2 ((,class (:background ,purple-int :foreground "#ffffff"))))

       `(frog-menu-border ((,class (:background ,white :foreground ,white))))
       `(frog-menu-posframe-background-face ((,class (:background ,very-dark-grey))))

      ;;; company - intellisense
       `(company-tooltip-mouse ((,class (:foreground ,turquoise-int))))
       `(company-template-field ((,class (:foreground ,turquoise-int))))

       ;; scrollbar
       `(company-scrollbar-bg ((,class (:background ,very-light-grey :foreground ,very-light-grey))))
       `(company-scrollbar-fg ((,class (:background ,dark-grey       :foreground ,dark-grey))))

       `(company-preview ((,class (:foreground ,blue-int :weight bold :inherit hl-line))))
       `(company-preview-common ((,class (:inherit company-preview))))
       `(company-preview-search ((,class (:foreground ,orange-int :weight normal :inherit company-preview))))

       ;; NOTE tooltip is the drop down menu which shows up when multiple results exist
       `(company-tooltip ((,class (:inherit bold :background ,very-light-grey :foreground ,very-dark-grey))))
       `(company-tooltip-selection ((,class (:foreground ,very-light-grey :background ,blue-int))))
       `(company-tooltip-common ((,class (:foreground ,blue-int :inherit company-tooltip))))
       `(company-tooltip-common-selection ((,class (:foreground ,very-dark-grey :background ,blue-int :inherit company-tooltip-common))))
       `(company-tooltip-search ((,class (:foreground ,orange :inherit company-tooltip))))
       `(company-tooltip-search-common ((,class (:inherit company-tooltip-search))))
       `(company-tooltip-search-selection ((,class (:background ,blue-int :inherit company-tooltip-search))))

       ;; NOTE annotations are extra information in the tooltip
       `(company-tooltip-annotation ((,class (:weight bold :foreground ,grey))))
       `(company-tooltip-annotation-selection ((,class (:foreground ,turquoise-int :background ,blue-int :inherit company-tooltip-annotation))))

      ;;;; custom mode variants
      ;;; whitespace-mode
       `(whitespace-space ((,class (:foreground ,dark-grey))))
       `(trailing-whitespace ((,class (:background ,dark-grey))))

      ;;; auto-highlight-symbol mode
       ;; NOTE: distant foreground is meaningless here because the faces are always given priority.
       `(ahs-definition-face ((,class (:background ,blue-dim :distant-foreground ,blue-dim :foreground ,dark-grey))))
       `(ahs-edit-mode-face ((,class (:background ,red-dim :distant-foreground ,red-dim :foreground ,very-light-grey))))
       `(ahs-face ((,class (:background ,very-light-grey :foreground ,black :inherit bold))))
       `(ahs-plugin-whole-buffer-face ((,class (:background ,blue :distant-foreground ,green :foreground ,black))))
       `(ahs-plugin-bod-face ((,class (:background ,blue-int :distant-foreground ,blue-int :foreground ,black))))
       `(ahs-plugin-defalt-face ((,class (:background ,orange-dim :distant-foreground ,orange-dim :foreground ,black))))
       `(ahs-warning-face ((,class (:foreground ,red-dim))))

      ;;; compilation mode
       `(compilation-line-number ((,class (:foreground ,yellow))))
       `(compilation-column-number ((,class (:inherit font-lock-doc-face))))

       ;; NOTE also represents value count in mode line
       `(compilation-error ((,class (:foreground ,red-int :inherit bold))))
       `(compilation-info ((,class (:foreground ,green-int :inherit bold))))
       `(compilation-warning ((,class (:foreground ,orange-int :inherit bold))))

       ;; NOTE these only represent the exit status indicator
       ;; `(compilation-mode-line-exit ((,class (:foreground very-dark-grey))))
       ;; `(compilation-mode-line-fail ((,class (:foreground ,very-dark-grey))))
       ;; `(compilation-mode-line-run ((,class (:foreground ,very-dark-grey))))

      ;;; markdown-mode
       `(markdown-code-face ((,class (:inherit default))))

      ;;; anzu
       `(anzu-mode-line ((,class (:foreground ,very-dark-grey :inherit bold))))
       `(anzu-mode-line-no-match ((,class (:foreground ,red-int :inherit bold))))

      ;;; hydra-posframe
       ;; for some reason... if hydra-posframe-face inherits default, internal border won't work
       `(hydra-posframe-face ((,class (:background ,very-dark-grey :foreground ,very-light-grey))))
       `(hydra-posframe-border-face ((,class (:inherit internal-border))))

      ;;; ivy
       ;; by default, it seems if ivy-highlight-face has its own spec, it'll interfere
       ;; with the face of ivy-current-match. Which'll make it harder to tell which
       ;; candidate is the current candidate.
       ;;
       ;; If ivy-highlight-face just inherits another face, then when both it and
       ;; ivy-current-match are applied to a string, ivy-current-match will override
       ;; ivy-highlight-face. Thus, this.
       `(ivy-actual-highlight-face ((,class (:foreground ,very-dark-grey :background ,turquoise :distant-foreground ,turquoise :inherit bold))))
       `(ivy-highlight-face ((,class (:inherit ivy-actual-highlight-face))))
       `(ivy-current-match ((,class (:foreground ,very-dark-grey :font-weight 'normal :inherit highlight))))

      ;;; org-mode
       `(org-link ((,class (:foreground ,blue :inherit bold))))
       `(org-footnote ((,class (:foreground ,blue))))

       ;; Overridden by hl-todo-keyword-faces
       `(org-todo ((,class (:foreground ,purple-int :inherit bold))))
       `(org-done ((,class (:foreground ,green-int :inherit bold))))

       `(org-upcoming-deadline ((,class (:foreground ,red-dim))))
       `(org-warning ((,class (:foreground ,orange :inherit bold))))
       `(org-scheduled-today ((,class (:foreground ,green-int))))
       `(org-block-begin-line ((,class (:background "royalblue4" :distant-foreground "royalblue4" :foreground "steelblue1" :extend t))))
       `(org-meta-line ((,class (:inherit font-lock-comment-face))))

       `(org-block ((,class (:background ,extra-dark-grey :extend t))))
       `(org-document-title ((,class (:foreground ,white :height 1.3 :inherit bold))))

      ;;; rust[ic]-mode
       `(rustic-compilation-warning ((,class (:inherit compilation-warning))))
       `(rustic-compilation-info ((,class (:inherit compilation-info))))
       `(rustic-compilation-error ((,class (:inherit compilation-error))))
       `(rustic-compilation-column ((,class (:inherit compilation-column-number))))
       `(rustic-compilation-line ((,class (:inherit compilation-line-number))))

      ;;; dashboard
       `(dashboard-text-banner ((,class (:foreground ,orange-int))))
       `(dashboard-items-face ((,class (:font-weight 'normal))))
       `(dashboard-no-items-face ((,class (:font-weight 'normal))))
       `(dashboard-heading ((,class (:inherit (bold dashboard-navigator)))))

      ;;; eshell-prompt-extras
       `(epe-remote-face ((,class (:foreground ,turquoise))))
       `(epe-venv-face ((,class (:foreground ,purple))))

      ;;; magit
       `(magit-mode-line-process-error ((,class (:foreground ,red :background ,very-light-grey :inherit bold))))

      ;;; typescript
       `(typescript-primitive-face ((,class (:inherit font-lock-type-face))))

      ;;; latex
       `(font-latex-sedate-face       ((,class (:inherit font-lock-keyword-face))))
       `(font-latex-sectioning-0-face ((,class (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-1-face ((,class (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-2-face ((,class (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-3-face ((,class (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-4-face ((,class (:inherit font-lock-function-name-face))))
       `(font-latex-sectioning-5-face ((,class (:inherit font-lock-function-name-face))))

      ;;; man/woman
       `(Man-underline  ((,class (:foreground ,green-int :inherit bold))))
       `(woman-addition ((,class (:foreground ,purple))))
       `(woman-bold     ((,class (:foreground ,red :inherit bold))))
       `(woman-italic   ((,class (:foreground ,green))))
       `(woman-unknown  ((,class (:inherit error))))
       )

       (custom-theme-set-variables 'an-old-hope
         `(hl-todo-keyword-faces
           '(("TODO"        ,red)
             ("NEXT"        ,red)
             ("RANT"        ,red)
             ("SEE"         ,red)
             ("SKIP"        ,red)
             ("LATE"        ,red)
             ("THEM"        ,purple)
             ("PROG"        ,blue-int)
             ("OKAY"        ,blue-int)
             ("DONT"        ,green-int)
             ("FAIL"        ,red)
             ("DONE"        ,green-int)
             ("NOTE"        ,yellow-int)
             ("WAIT"        ,yellow-int)
             ("KLUDGE"      ,yellow-int)
             ("HACK"        ,yellow-int)
             ("TEMP"        ,yellow-int)
             ("FIXME"       ,orange)
             ("WARN"        ,orange)
             ("XXX+"        ,orange)
             ("\\?\\?\\?+"  ,orange))))
      ))

      (provide-theme 'an-old-hope)
    #+END_SRC
