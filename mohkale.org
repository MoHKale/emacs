# -*- mode: org; encoding: utf-8 -*-
#+TITLE: mohkale.org

#+PROPERTY: header-args    :tangle yes

* Spacemacs
** Layouts
*** Image Dired
A layout to use spacemacs like an image viewer. Layout will be setup with image thumbnails in a left aligned window and the actual image will be shown in the right window.

#+begin_src emacs-lisp :tangle yes
  (defvar dired-slideshow|thumbnail-column-count 2
    "number of columns of thumbnails shown on each row")

  (defvar dired-slideshow|dedicate-image-windows t
    "whether to dedicate thumbnail and display windows")

  ;; NOTE keep setq because defvar doesn't work for repeated calls
  ;; (setq dired-slideshow|thumbnail-column-count 3)
  ;; (setq dired-slideshow|dedicate-image-windows t)

  (spacemacs|define-custom-layout "@dired-slideshow"
    :binding "s"
    :body
    (kill-all-windows-and-return-to-home) ; splitting issues with layout

    (let* ((thumbnails-buffer-name "*image-dired*")
            (display-buffer-name "*image-dired-display-image*")

            ;; only load when buffer doesn't exist and user allows it
            (load-directory (and (not (get-buffer thumbnails-buffer-name))
                                (y-or-n-p "would you like to load an image directory")))

            (thumbnails-buffer (get-buffer-create thumbnails-buffer-name))
            (display-buffer (get-buffer-create display-buffer-name)))
      (split-window-right) ; left window is for thumbnails, right for display

      (let* ((thumbnails-window (selected-window))
              (display-window    (window-right thumbnails-window)))
        (if load-directory (call-interactively 'image-dired))

        (persp-add-buffer `(,thumbnails-buffer ,display-buffer))

        ;; setup thumbnail window
        (with-selected-window thumbnails-window
          (switch-to-buffer thumbnails-buffer)

          (unless (eq major-mode 'image-dired-thumbnail-mode)
            (image-dired-thumbnail-mode))

          ;; set number of columns in view
          (let ((image-dired-thumbs-per-row dired-slideshow|thumbnail-column-count))
            (image-dired-line-up))

          (let* ((thumbnail-window-width (* image-dired-thumb-width dired-slideshow|thumbnail-column-count))
                  (delta-width (- thumbnail-window-width (window-pixel-width))))
            (unless (> (abs delta-width) (window-pixel-width))
              (window-resize thumbnails-window delta-width t nil t)))

          (window-preserve-size thumbnails-window t)
          (and dired-slideshow|dedicate-image-windows (spacemacs/toggle-current-window-dedication)))

        ;; setup display window
        (with-selected-window display-window
          (switch-to-buffer display-buffer)

          (and dired-slideshow|dedicate-image-windows (spacemacs/toggle-current-window-dedication))

          (unless (eq major-mode 'image-dired-display-image-mode)
            (image-dired-display-image-mode)))

        (select-window thumbnails-window)

        (message "completed creation of slideshow layout"))))
#+end_src

* Package Config
** calendar
#+begin_src emacs-lisp :tangle yes
#+end_src
** dired
#+begin_src emacs-lisp :tangle yes
  (use-package dired
    :config
    (require 'dired-x)
    (setq ls-lisp-dirs-first t)
    (setq ls-lisp-use-insert-directory-program t)
    (setq dired-listing-switches "-laXhv --group-directories-first")
    (add-hook 'dired-mode-hook 'dired-omit-mode)
    (setq dired-omit-files (concat dired-omit-files
                                   "\\|^__pycache__$"
                                   "\\|^\\.pytest_cache$"
                                   "\\|^\\.sass-cache$"
                                   "\\|^\\.git$"
                                   "\\|^Pipfile"))
    :bind* (:map dired-mode-map
            ;; remove dir-tree from dired buffer
            ("C-M-d" . dired-kill-subdir) ; TODO consider switching to C-M-d, usse C-d to scroll
            ;; support vim like movement functions
            ("g"   . nil) ;; reassign to use as prefix
            ("gr"  . revert-buffer)
            ("gg"  . evil-goto-first-line)
            ("G"   . evil-goto-line)
            ("n"   . evil-search-next)
            ("N"   . evil-search-previous)
            ("M-n" . dired-next-marked-file)
            ("M-n" . dired-prev-marked-file)
            ("C-h" . dired-goto-min-subdir)
            ("C-j" . dired-next-subdir)
            ("M-j" . dired-next-dirline)
            ("M-k" . dired-prev-dirline)
            ("C-k" . dired-prev-subdir)
            ("C-l" . dired-goto-max-subdir)))
#+end_src
*** image-dired
#+begin_src emacs-lisp :tangle yes
(use-package image-dired
  :config
  ;;; fixed weird moves line, not thumbnail
  (defun image-dired-slideshow-step ()
    "Step to next file, if `image-dired-slideshow-times' has not been reached."
    (if (< image-dired-slideshow-count image-dired-slideshow-times)
        (progn
          (message "%s" (1+ image-dired-slideshow-count))
          (setq image-dired-slideshow-count (1+ image-dired-slideshow-count))
          (image-dired-display-next-thumbnail-original))
      (image-dired-slideshow-stop)))

  (evil-define-key '(normal visual) image-dired-thumbnail-mode-map
    "q" nil

    "h" 'image-dired-backward-image
    "j" 'image-dired-next-line
    "k" 'image-dired-previous-line
    "l" 'image-dired-forward-image
    (kbd "<left>")  'image-dired-forward-image
    (kbd "<right>") 'image-dired-previous-image

    "x" 'image-dired-delete-char
    "m" 'image-dired-mark-thumb-original-file
    "u" 'image-dired-unmark-thumb-original-file
    "c" 'image-dired-comment-thumbnail
    "d" 'image-dired-flag-thumb-original-file
    "D" 'image-dired-thumbnail-set-image-description
    "s" 'image-dired-slideshow-start
    "t" 'image-dired-toggle-mark-thumb-original-file
    "gr" 'image-dired-refresh-thumb
    "gc" 'image-dired-create-thumbs
    "gg" #'(lambda () (interactive) (evil-goto-first-line) (evil-beginning-of-line))
    "G"  #'(lambda () (interactive) (end-of-buffer) (image-dired-backward-image))

    (kbd "C-s") 'image-save ; NOTE originally was bound to o

    (kbd "<C-SPC>")    'image-dired-mark-thumb-original-file
    (kbd "<M-SPC>")    'image-dired-unmark-thumb-original-file

    (kbd "<C-return>") 'image-dired-display-current-image-full
    (kbd "<RET>")      'image-dired-display-thumbnail-original-image
    (kbd "C-l")        'image-dired-display-next-thumbnail-original
    (kbd "C-h")        'image-dired-display-previous-thumbnail-original
    ;;; column view aliases
    "J" 'image-dired-display-next-thumbnail-original
    "K" 'image-dired-display-previous-thumbnail-original
    ;; "o" 'image-dired-display-thumbnail-original-image
    "v" 'image-dired-display-thumbnail-original-image

    (kbd "<mouse-1>") 'image-dired-mouse-select-thumbnail
    (kbd "<mouse-2>") 'image-dired-mouse-display-image)

  (spacemacs/declare-prefix-for-mode 'image-dired-thumbnail-mode
    "mt" "tagging" "tag/describe images")
  (spacemacs/declare-prefix-for-mode 'image-dired-thumbnail-mode
    "me" "edit" "edit images")

  (spacemacs/set-leader-keys-for-major-mode 'image-dired-thumbnail-mode
    "g" 'image-dired-jump-original-dired-buffer
    "m" 'image-dired

    "td" 'image-dired-thumbnail-set-image-description
    "tt"  'image-dired-tag-thumbnail
    "tT"  'image-dired-tag-thumbnail-remove

    "el" 'image-dired-rotate-thumbnail-left
    "eL" 'image-dired-rotate-original-left
    "er" 'image-dired-rotate-thumbnail-right
    "eR" 'image-dired-rotate-original-right

    "." 'image-dired-track-original-file
    "o" 'image-dired-thumbnail-display-external

    ;; [re]set number of columns per row
    "s" 'image-dired-line-up-interactive
    "S" 'image-dired-line-up-dynamic)

  ;;; image view
  (evil-define-key 'normal image-dired-display-image-mode-map
    "f" 'image-dired-display-current-image-full
    "F" 'image-dired-display-current-image-sized
    "s" 'image-dired-display-current-image-sized

    "h" 'image-scroll-right
    "l" 'image-scroll-left
    "k" 'image-scroll-down
    "j" 'image-scroll-up
    ;; horizontal line by line movement
    (kbd "C-d") 'image-scroll-up
    (kbd "C-u") 'image-scroll-down
    (kbd "C-e") 'image-next-line
    (kbd "C-y") 'image-previous-line
    ;; Arrow Keys Alias hjkl
    (kbd "<left>")  'image-backward-hscroll
    (kbd "<right>") 'image-forward-hscroll
    (kbd "<up>")    'image-scroll-down
    (kbd "<down>")  'image-scroll-up)

  (spacemacs/set-leader-keys-for-major-mode 'image-dired-display-image-mode
    "h" 'image-bol ; far left   edge
    "j" 'image-eob ; far bottom edge
    "k" 'image-bob ; far top    edge
    "l" 'image-eol ; far right  edge
    "g" 'image-dired-jump-thumbnail-buffer))
#+end_src
** isearch
#+begin_src emacs-lisp :tangle yes
(use-package isearch
  ;; TODO look into more bindings
  :bind (:map isearch-mode-map
         ("DEL" . isearch-delete-char)))

#+end_src
** languages
*** c
#+begin_src emacs-lisp :tangle yes
(use-package cc-mode
  :bind* (:map c-mode-map
          ("M-j"   . nil)
          ("C-M-h" . nil)))
#+end_src
*** shell-script
#+begin_src emacs-lisp :tangle yes
(use-package sh-script
  :config
  (spacemacs/set-leader-keys-for-major-mode 'sh-mode
    (kbd "TAB") 'sh-if
    "(" 'sh-function
    "+" 'sh-add
    ":" 'sh-set-shell
    "<" 'sh-learn-line-indent
    ">" 'sh-learn-buffer-indent
    "=" 'sh-set-indent
    "?" 'sh-show-indent

    (kbd "C-\\") 'sh-backslash-region
    (kbd "C-c") 'sh-case
    (kbd "C-d") 'sh-cd-here
    (kbd "C-f") 'sh-for
    (kbd "C-l") 'sh-indexed-loop
    (kbd "C-n") 'sh-send-line-or-region-and-step
    (kbd "C-o") 'sh-while-getopts
    (kbd "C-r") 'sh-repeat
    (kbd "C-s") 'sh-select
    (kbd "C-t") 'sh-temp-file
    (kbd "C-u") 'sh-until
    (kbd "C-x") 'executable-interpret
    (kbd "C-z") 'sh-show-shell))
#+end_src
*** markdown
#+begin_src emacs-lisp :tangle yes
  (use-package markdown
    :config
    (evil-define-key 'normal markdown-mode-map
      "gj" nil ; outline-forward-same-level
      "gk" nil ; outline-backward-same-level
      )
    :bind (:map markdown-mode-map
           ("M-n" . nil)
           ("M-N" . nil)
           ("M-j" . nil)
           ("M-k" . nil)
           ("C-<up>"   . markdown-move-up)
           ("C-<down>" . markdown-move-down)
           ("C-<left>" . markdown-promote)
           ("C-<right>" . markdown-demote)))
#+end_src
** magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :bind* (:map magit-mode-map
          ("p" . evil-search-previous)
          ("n" . evil-search-next)
          ("P" . magit-push)
          ;; "C-j" magit-section-forward-sibling
          ;; "C-k" magit-section-backward-sibling
          ("M-j" . magit-section-forward-sibling)
          ("M-k" . magit-section-backward-sibling)
          ;; toggle children doesn't seem to work
          ("C-r" . magit-section-hide-children) ; recursive close
          ("C-e" . magit-section-show-children) ; recursive expand
          ("M-r" . magit-section-hide-children) ; Meta aliases
          ("M-e" . magit-section-show-children) ; Meta aliases
          ;; visit and expand
          ("RET"   . magit-section-toggle)
          ("TAB"   . magit-section-toggle)
          ("M-RET" . magit-visit-thing)

          :map magit-log-mode-map
          ("RET" . magit-visit-thing)))
#+end_src
** proced
#+begin_src emacs-lisp :tangle yes
(use-package proced
  :config
  (evil-set-initial-state 'proced-mode 'normal)

  (evil-define-key 'normal proced-mode-map
    "q" 'quit-window
    (kbd "C-?") 'proced-help

    (kbd "<C-SPC>") 'proced-mark
    "a" 'proced-mark
    "A" 'proced-mark-all
    "u" 'proced-unmark
    "U" 'proced-unmark-all
    "p" 'proced-mark-parents
    "P" 'proced-mark-children
    "M" 'proced-toggle-marks
    (kbd "<DEL>") 'proced-unmark-backward

    "x" 'proced-send-signal
    (kbd "C-k") 'proced-send-signal

    (kbd "<M-SPC>") 'proced-toggle-tree
    "gr" 'revert-buffer

    "r" 'proced-refine
    "R" 'proced-renice

    "o" 'proced-omit-processes

    (kbd "<C-M-SPC>") 'proced-format-interactive

    "sS" 'proced-sort-interactive
    "sc" 'proced-sort-pcpu
    "sm" 'proced-sort-pmem
    "sp" 'proced-sort-pid
    "ss" 'proced-sort-start
    "st" 'proced-sort-time
    "su" 'proced-sort-user
    "S"  'proced-filter-interactive))
#+end_src
** projectile
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :config
    (projectile-register-project-type 'rake '("rakefile")
                                      :compile "rake build"
                                      :test    "rake test"
                                      :run     "rake run"
                                      :test-suffix ".spec")
    (setq projectile-project-search-path '("~/programming/projects/"
                                           "~/programming/repos"
                                           "~/programming/"))
    ;; (setq dotspacemacs-search-tools `("rg" "ag" "pt" "ack" "grep"))
    (unless (eq system-type 'gnu/linux)
      (setq projectile-generic-command "find . -type f -print0")))
#+end_src
** spacemacs
globally assigned spacemacs dependent configuration.

#+begin_src emacs-lisp :tangle yes
  (spacemacs/declare-prefix "o" "custom" "custom functions")
  (spacemacs/declare-prefix "of" "format" "format document")
  (spacemacs/declare-prefix "oe" "emacs" "emacs related")
  (spacemacs/declare-prefix "od" "diff" "diff and merge")
  (spacemacs/declare-prefix "ow" "window" "window based")
  (spacemacs/declare-prefix "ot" "text" "text attributes")
  (spacemacs/declare-prefix "M" "modes" "mode shortcuts")
  (spacemacs/declare-prefix "Md" "dired" "dired editable mode")
  (spacemacs/declare-prefix "M-t" "timers" "org mode timer control")

  (spacemacs/set-leader-keys
    ;;; Globally Useful
    "." 'repeat
    "-" 'line-width
    "fF"  'find-file-at-point
    "o C-M-k" 'kill-all-windows-and-return-to-home
    "wT" 'force-set-all-visible-windows-dedication
    "otp" 'describe-text-properties
    "otf" 'list-faces
    "&" 'async-shell-command

    ;;; Buffer Manipulation
    "bm" 'buffer-menu
    "bM" 'goto-messages-buffer
    "b M-k" 'spacemacs/kill-other-buffers
    "bk" 'kill-this-buffer-and-window-maybe
    "bK" 'kill-this-buffer ; keeps window open

    ;;; processes
    "ac" 'calendar
    "af" 'list-faces-display
    "ae" 'package-list-packages
    "am" 'man
    "aM" 'helm-man-woman
    "at" 'helm-top
    "aC" 'calc-dispatch
    "a M-c" 'customize

    ;;; files
    "fi" 'helm-semantic-or-imenu
    "fI" 'imenu-list
    "f M-f" 'find-name-dired
    "f M-r" 'revert-buffer

    ;;; Buffer
    ;; jumping
    "jb" 'frog-jump-buffer
    "bj" 'frog-jump-buffer ; alias
    ;; Restore Jb Binding Replaced Above
    "jB" 'avy-pop-mark
    ;; perspectives
    "ba" 'persp-add-current-buffer
    "bA" 'persp-add-buffer
    "br" 'persp-remove-current-buffer
    "bR" 'persp-remove-buffer
    "bS" 'helm-regexp

    ;;; Text Formatting Shortcuts
    "oft" 'remove-all-trailing-whitespace
    "ofC" 'capitalize-region
    "ofu" 'upcase-region
    "ofd" 'downcase-region
    "ofc" 'toggle-comment-at-point
    "ofp" 'pad-line-with-space-to-length
    "ofP" 'pad-line-with-char-to-length
    ;; Remove Existing Unused Bindings
    "xu" nil ; was upcase-region
    "xU" nil ; was downcase-region
    ;; diff and working with files edited outside of emacs
    "odf" 'ediff-current-file
    "odF" 'diff-buffer-with-file
    "odb" 'ediff-buffers
    "odw" 'ediff-windows
    "odv" 'vc-ediff
    "odV" 'vc-diff

    ;;; Emacs Related
    "oef" 'make-frame
    "oeF" 'delete-frame

    ;;; magit
    "gm" 'magit-dispatch
    "g!" 'magit-run

    ;;; projectile
    "pp" 'projectile-run-project
    "pP" 'helm-projectile-switch-project
    "pt" 'projectile-test-project
    "pT" 'neotree-find-project-root
    "p/" 'spacemacs/helm-project-smart-do-search

    ;;; timers
    "M-t s" 'org-timer-start
    "M-t e" 'org-timer-stop
    "M-t c" 'org-timer-set-timer
    "M-t t" 'org-timer-pause-or-continue
    "M-t i" 'org-timer

    ;;; Mode Shortcuts
    "Mz" 'zone ; not really a mode
    "Ml" 'emacs-lisp-mode
    "Mc" 'c++-mode
    "MC" 'c-mode
    "Mf" 'fundamental-mode
    "Mp" 'python-mode
    "Mr" 'ruby-mode
    "Ms" 'shell-script-mode
    "Mw" 'whitespace-mode
    "Mo" 'org-mode
    "Mi" 'imenu
    "Mh" 'hexl-mode
    "MI" 'imenu-list
    "M M-d" 'decipher
    "M M-r" 'toggle-rot13-mode
    ;; qverq
    "Mdd" 'toggle-editable-dired
    "Mde" 'invoke-editable-dired
    "Md <escape>" 'wdired-abort-changes
    "Mdq" 'wdired-abort-changes ; alias
    )
#+end_src
** tags
#+begin_src emacs-lisp :tangle yes
  (use-package ctags-update
    :config
    (ctags-global-auto-update-mode)
    (setq tags-revert-without-query 1)

    ; you need manually create TAGS in your project
    (setq ctags-update-prompt-create-tags nil))
#+end_src
** transient
#+begin_src emacs-lisp :tangle yes
(use-package transient
  :bind* (:map transient-base-map
          ;;; Escape means quit too you know
          ("ESC" . transient-quit-one)))
#+end_src
** version-control
#+begin_src emacs-lisp :tangle yes
(use-package vc
  :config
  (require 'vc-git)
  ;;; include vc leader key in defaults leader keys
  (spacemacs/declare-prefix "V" "version control")
  (spacemacs/set-leader-keys "V" vc-prefix-map)
  (define-key vc-prefix-map (kbd "C-=") 'vc-ediff)
  (define-key vc-prefix-map "r" 'vc-rename-file)
  (define-key vc-prefix-map "R" 'vc-retrieve-tag)

  ;;; diff files
  ;; (evil-define-key 'normal diff-mode-map
  ;;   (kbd "C-q") 'quit-window)

  ;;; annotations
  (evil-set-initial-state 'vc-annotate-mode 'normal)
  (evil-define-key 'normal vc-annotate-mode-map
    "gr" 'revert-buffer
    "d" 'vc-annotate-show-diff-revision-at-line
    "D" 'vc-annotate-show-changeset-diff-revision-at-line
    "t" 'vc-annotate-toggle-annotation-visibility

    (kbd "C-j") 'vc-annotate-next-revision ;; older revisions
    (kbd "C-k") 'vc-annotate-prev-revision ;; newer revisions
    )
  (spacemacs/set-leader-keys-for-major-mode 'vc-annotate-mode
    ;;; unbound functions
    ;; vc-dir-query-replace-regexp
    ;; vc-dir-search
    ;; vc-dir-isearch
    ;; vc-dir-isearch-regexp
    "m" 'vc-next-action
    "l" 'vc-annotate-show-log-revision-at-line
    "d" 'vc-annotate-show-diff-revision-at-line
    "gg"    'vc-annotate-goto-line
    "gc"    'vc-annotate-revision-at-line
    "gp"    'vc-annotate-revision-previous-to-line
    "g SPC" 'vc-annotate-working-revision)

  ;;; vc-directory
  (evil-set-initial-state 'vc-dir-mode 'normal)
  (evil-define-key 'normal vc-dir-mode-map
    ;;; Unbound Functions
    ;; vc-dir-query-replace-regexp
    ;; vc-dir-search
    ;; vc-dir-isearch
    ;; vc-dir-isearch-regexp
    "a" 'vc-register ;; git add FILE
    "d" 'vc-diff
    "i" 'vc-register
    ;; "q" 'vc-dir-kill-dir-status-process
    "i" 'vc-dir-ignore
    "x"  'vc-dir-kill-line
    "gr" 'revert-buffer

    "A" 'vc-dir-mark-all-files
    "m" 'vc-dir-mark
    "U" 'vc-dir-unmark-all-files
    "u" 'vc-dir-unmark
    "t" 'vc-dir-toggle-mark
    (kbd "<backspace>") 'vc-dir-unmark-file-up

    "p" 'vc-pull
    "P" 'vc-push

    "o" 'vc-dir-display-file
    (kbd "RET") 'vc-dir-find-file

    (kbd "C-j") 'vc-dir-next-line
    (kbd "C-k") 'vc-dir-previous-line
    (kbd "M-j") 'vc-dir-next-directory
    (kbd "M-k") 'vc-dir-previous-directory)

  (spacemacs/set-leader-keys-for-major-mode 'vc-dir-mode
    "i" 'vc-log-incoming
    "o" 'vc-log-incoming
    "l" 'vc-print-log
    "L" 'vc-print-root-log
    "D" 'vc-root-diff
    "d" 'vc-diff
    "h" 'vc-dir-hide-up-to-date
    "u" 'vc-update ;; don't understand
    "m" 'vc-next-action)

  ;;; history + log
  ;; despite being different modes and using different maps, theses both incorporate
  ;; basically the same functions to accomplish the same things, so use the same config
  ;; for both of them.
  (dolist (tuple `((vc-git-region-history-mode . ,vc-git-region-history-mode-map)
                   (vc-git-log-view-mode       . ,vc-git-log-view-mode-map)))
    (let ((mode (car tuple))
          (kmap (cdr tuple)))
      (evil-set-initial-state mode 'normal)
      ;; NOTE have to use * or kmap won't be evaluated
      (evil-define-key* 'normal kmap
        ;;; WARN unknown functions
        ;;    * log-view-modify-change-comment
        "q" 'quit-window
        "d" 'log-view-diff
        "o" 'log-view-find-revision ; open current file at current commit

        (kbd "<return>") 'log-view-toggle-entry-display
        (kbd "<tab>")    'log-view-toggle-entry-display

        ;; move to next message, then reallign to top
        ;; (kbd "C-j") #'(lambda () (interactive) (log-view-msg-next)
        ;;                 (call-interactively 'evil-scroll-line-to-top))
        (kbd "C-j") 'log-view-msg-next
        (kbd "C-k") 'log-view-msg-prev

        (kbd "C-M-j") 'log-view-file-next
        (kbd "C-M-k") 'log-view-file-prev

        (kbd "M-j") 'diff-hunk-next
        ;; TODO reallign diff to propper location on move down without trapping on a single diff
        ;; (kbd "M-j") #'(lambda () (interactive) (diff-hunk-next)
        ;;                 (call-interactively 'evil-scroll-line-to-top)
        ;;                 (evil-previous-line 3))
        (kbd "M-k") #'(lambda () (interactive) (diff-hunk-prev) (evil-previous-line 3)))

      (spacemacs/set-leader-keys-for-major-mode mode
        "r" 'revert-buffer
        "p" 'log-view-diff-changeset
        "a" 'log-view-annotate-version
        "m" 'log-view-toggle-mark-entry
        "s" 'diff-goto-source)))

  ;;; making commits... why name it log :P
  (evil-define-key 'normal log-edit-mode-map
    (kbd "C-q")   'log-edit-kill-buffer
    (kbd "C-n")   'log-edit-next-comment
    (kbd "C-p")   'log-edit-previous-comment
    (kbd "C-M-n") 'log-edit-comment-search-forward
    (kbd "C-M-p") 'log-edit-comment-search-backward
    (kbd "M-0")   'evil-beginning-of-line)
  (evil-redirect-digit-argument log-edit-mode-map "0" 'log-edit-beginning-of-line)

  (dolist (mode '(vc-git-log-edit-mode))
    ;; spacemacs doesn't inherit major leader keys so you'll have to
    ;; allocate the same keys for each vc system you use.
    (spacemacs/declare-prefix-for-mode mode "mi" "insert" "insert shortcuts")
    (spacemacs/set-leader-keys-for-major-mode mode
      "d" 'log-edit-show-diff
      "f" 'log-edit-show-files
      "?" 'log-edit-mode-help
      "SPC" 'log-edit-done
      (kbd "DEL") 'log-edit-kill-buffer

      "ic" 'log-edit-insert-changelog
      "if" 'log-edit-insert-filenames
      "iC" 'log-edit-insert-changelog-entries
      "iT" 'log-edit-insert-cvs-rcstemplate
      "it" 'log-edit-insert-cvs-template
      "iF" 'log-edit-insert-filenames-without-changelog
      "im" 'log-edit-insert-message-template))

  ;; then allocate unique bindings for each individual vc system
  (spacemacs/declare-prefix-for-mode 'vc-git-log-edit-mode "mt" "toggle" "toggle commit status")
  (spacemacs/set-leader-keys-for-major-mode 'vc-git-log-edit-mode
    "ta" 'vc-git-log-edit-toggle-amend
    "ts" 'vc-git-log-edit-toggle-signoff))
#+end_src
