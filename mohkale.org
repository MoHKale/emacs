# -*- mode: org; encoding: utf-8 -*-
#+TITLE: mohkale.org

#+PROPERTY: header-args    :tangle yes

* Spacemacs
** Layouts
*** Image Dired
A layout to use spacemacs like an image viewer. Layout will be setup with image thumbnails in a left aligned window and the actual image will be shown in the right window.

#+begin_src emacs-lisp :tangle yes
  (defvar dired-slideshow|thumbnail-column-count 2
    "number of columns of thumbnails shown on each row")

  (defvar dired-slideshow|dedicate-image-windows t
    "whether to dedicate thumbnail and display windows")

  ;; NOTE keep setq because defvar doesn't work for repeated calls
  ;; (setq dired-slideshow|thumbnail-column-count 3)
  ;; (setq dired-slideshow|dedicate-image-windows t)

  (spacemacs|define-custom-layout "@dired-slideshow"
    :binding "s"
    :body
    (kill-all-windows-and-return-to-home) ; splitting issues with layout

    (let* ((thumbnails-buffer-name "*image-dired*")
            (display-buffer-name "*image-dired-display-image*")

            ;; only load when buffer doesn't exist and user allows it
            (load-directory (and (not (get-buffer thumbnails-buffer-name))
                                (y-or-n-p "would you like to load an image directory")))

            (thumbnails-buffer (get-buffer-create thumbnails-buffer-name))
            (display-buffer (get-buffer-create display-buffer-name)))
      (split-window-right) ; left window is for thumbnails, right for display

      (let* ((thumbnails-window (selected-window))
              (display-window    (window-right thumbnails-window)))
        (if load-directory (call-interactively 'image-dired))

        (persp-add-buffer `(,thumbnails-buffer ,display-buffer))

        ;; setup thumbnail window
        (with-selected-window thumbnails-window
          (switch-to-buffer thumbnails-buffer)

          (unless (eq major-mode 'image-dired-thumbnail-mode)
            (image-dired-thumbnail-mode))

          ;; set number of columns in view
          (let ((image-dired-thumbs-per-row dired-slideshow|thumbnail-column-count))
            (image-dired-line-up))

          (let* ((thumbnail-window-width (* image-dired-thumb-width dired-slideshow|thumbnail-column-count))
                  (delta-width (- thumbnail-window-width (window-pixel-width))))
            (unless (> (abs delta-width) (window-pixel-width))
              (window-resize thumbnails-window delta-width t nil t)))

          (window-preserve-size thumbnails-window t)
          (and dired-slideshow|dedicate-image-windows (spacemacs/toggle-current-window-dedication)))

        ;; setup display window
        (with-selected-window display-window
          (switch-to-buffer display-buffer)

          (and dired-slideshow|dedicate-image-windows (spacemacs/toggle-current-window-dedication))

          (unless (eq major-mode 'image-dired-display-image-mode)
            (image-dired-display-image-mode)))

        (select-window thumbnails-window)

        (message "completed creation of slideshow layout"))))
#+end_src

* Package Config
** spacemacs
globally assigned spacemacs dependent configuration.

#+begin_src emacs-lisp :tangle yes
  (spacemacs/declare-prefix "o" "custom" "custom functions")
  (spacemacs/declare-prefix "of" "format" "format document")
  (spacemacs/declare-prefix "oe" "emacs" "emacs related")
  (spacemacs/declare-prefix "od" "diff" "diff and merge")
  (spacemacs/declare-prefix "ow" "window" "window based")
  (spacemacs/declare-prefix "ot" "text" "text attributes")
  (spacemacs/declare-prefix "M" "modes" "mode shortcuts")
  (spacemacs/declare-prefix "Md" "dired" "dired editable mode")
  (spacemacs/declare-prefix "M-t" "timers" "org mode timer control")

  (spacemacs/set-leader-keys
    ;;; Globally Useful
    "." 'repeat
    "-" 'line-width
    "fF"  'find-file-at-point
    "o C-M-k" 'kill-all-windows-and-return-to-home
    "wT" 'force-set-all-visible-windows-dedication
    "otp" 'describe-text-properties
    "otf" 'list-faces
    "&" 'async-shell-command

    ;;; Buffer Manipulation
    "bm" 'buffer-menu
    "bM" 'goto-messages-buffer
    "b M-k" 'spacemacs/kill-other-buffers
    "bk" 'kill-this-buffer-and-window-maybe
    "bK" 'kill-this-buffer ; keeps window open

    ;;; processes
    "ac" 'calendar
    "af" 'list-faces-display
    "ae" 'package-list-packages
    "am" 'man
    "aM" 'helm-man-woman
    "at" 'helm-top
    "aC" 'calc-dispatch
    "a M-c" 'customize

    ;;; files
    "fi" 'helm-semantic-or-imenu
    "fI" 'imenu-list
    "f M-f" 'find-name-dired
    "f M-r" 'revert-buffer

    ;;; Buffer
    ;; jumping
    "jb" 'frog-jump-buffer
    "bj" 'frog-jump-buffer ; alias
    ;; Restore Jb Binding Replaced Above
    "jB" 'avy-pop-mark
    ;; perspectives
    "ba" 'persp-add-current-buffer
    "bA" 'persp-add-buffer
    "br" 'persp-remove-current-buffer
    "bR" 'persp-remove-buffer
    "bS" 'helm-regexp

    ;;; Text Formatting Shortcuts
    "oft" 'remove-all-trailing-whitespace
    "ofC" 'capitalize-region
    "ofu" 'upcase-region
    "ofd" 'downcase-region
    "ofc" 'toggle-comment-at-point
    "ofp" 'pad-line-with-space-to-length
    "ofP" 'pad-line-with-char-to-length
    ;; Remove Existing Unused Bindings
    "xu" nil ; was upcase-region
    "xU" nil ; was downcase-region
    ;; diff and working with files edited outside of emacs
    "odf" 'ediff-current-file
    "odF" 'diff-buffer-with-file
    "odb" 'ediff-buffers
    "odw" 'ediff-windows
    "odv" 'vc-ediff
    "odV" 'vc-diff

    ;;; Emacs Related
    "oef" 'make-frame
    "oeF" 'delete-frame

    ;;; magit
    "gm" 'magit-dispatch
    "g!" 'magit-run

    ;;; projectile
    "pp" 'projectile-run-project
    "pP" 'helm-projectile-switch-project
    "pt" 'projectile-test-project
    "pT" 'neotree-find-project-root
    "p/" 'spacemacs/helm-project-smart-do-search

    ;;; timers
    "M-t s" 'org-timer-start
    "M-t e" 'org-timer-stop
    "M-t c" 'org-timer-set-timer
    "M-t t" 'org-timer-pause-or-continue
    "M-t i" 'org-timer

    ;;; Mode Shortcuts
    "Mz" 'zone ; not really a mode
    "Ml" 'emacs-lisp-mode
    "Mc" 'c++-mode
    "MC" 'c-mode
    "Mf" 'fundamental-mode
    "Mp" 'python-mode
    "Mr" 'ruby-mode
    "Ms" 'shell-script-mode
    "Mw" 'whitespace-mode
    "Mo" 'org-mode
    "Mi" 'imenu
    "Mh" 'hexl-mode
    "MI" 'imenu-list
    "M M-d" 'decipher
    "M M-r" 'toggle-rot13-mode
    ;; qverq
    "Mdd" 'toggle-editable-dired
    "Mde" 'invoke-editable-dired
    "Md <escape>" 'wdired-abort-changes
    "Mdq" 'wdired-abort-changes ; alias
    )
#+end_src