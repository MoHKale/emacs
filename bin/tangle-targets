#!/usr/bin/env -S emacs --no-site-file --script
;; -*- mode: emacs-lisp -*- vim: syntax=lisp filetype=lisp
;;
;; A script to open and attempt to tangle an org-mode file but instead of
;; tangling the files it instead lists each file that would be tangled too
;; in newline delimited output.
;;
;; This script was mostly adapted from `org-babel-tangle', advised to not
;; perform any actual tangling.

;; Remove manual interaction needed to get emacs to continue working.
(setq org-confirm-babel-evaluate nil
      ;; See [[file:~/.config/emacs/init.org::setup-paths][setup-paths]].
      comp-eln-load-path (append (list (concat user-emacs-directory "var/eln-cache"))
                                 (cdr (bound-and-true-p comp-eln-load-path)))
      checking-tangle-targets+ t
      create-lockfiles nil
      make-backup-files nil
      comp-deferred-compilation nil)

(require 'cl-lib)

(require 'org)
(require 'ob-tangle)

(defun true (&rest args) t)
(defalias #'yes-or-no-p #'true)
(defalias #'y-or-n-p    #'true)

(advice-add #'org-babel-tangle :override
            (defun org-babel-tangle+ (&optional arg target-file lang-re)
              (run-hooks 'org-babel-pre-tangle-hook)
              (save-restriction
                (save-excursion
                  (let ((block-counter 0)
                        (org-babel-default-header-args
                         (if target-file
                             (org-babel-merge-params org-babel-default-header-args
                                                     (list (cons :tangle target-file)))
                           org-babel-default-header-args))
                        (tangle-file nil)
                        path-collector)
                    (mapc ;; map over all languages
                     (lambda (by-lang)
                       (let* ((lang (car by-lang))
                              (specs (cdr by-lang))
                              (ext (or (cdr (assoc lang org-babel-tangle-lang-exts)) lang))
                              (lang-f (org-src-get-lang-mode lang))
                              she-banged)
                         (mapc
                          (lambda (spec)
                            (let ((get-spec (lambda (name) (cdr (assoc name (nth 4 spec))))))
                              (let* ((tangle (funcall get-spec :tangle))
                                     (she-bang (let ((sheb (funcall get-spec :shebang)))
                                                 (when (> (length sheb) 0) sheb)))
                                     (tangle-mode (funcall get-spec :tangle-mode))
                                     (base-name (cond
                                                 ((string= "yes" tangle)
                                                  (file-name-sans-extension
                                                   (nth 1 spec)))
                                                 ((string= "no" tangle) nil)
                                                 ((> (length tangle) 0) tangle)))
                                     (file-name (when base-name
                                                  ;; decide if we want to add ext to base-name
                                                  (if (and ext (string= "yes" tangle))
                                                      (concat base-name "." ext) base-name))))
                                (when file-name
                                  (unless (assoc file-name path-collector)
                                    (let ((standard-output t))
                                      (princ (concat (buffer-file-name) ":" (expand-file-name file-name) "\n")))
                                    (push (cons file-name tangle-mode) path-collector))))))
                          specs)))
                     (org-babel-tangle-collect-blocks lang-re tangle-file))
                    (mapcar #'car path-collector))))))

(let ((standard-output 'external-debugging-output)
      (config-file (expand-file-name
                    (if (> (length argv) 1)
                        (string-join (cdr argv) " ")
                      (concat user-emacs-directory "init.org")))))
  (message "Checking tangle-targets: %s" config-file)
  (org-babel-tangle-file config-file))

(setq argv nil) ;; unset argv to prevent `normal-top-level' from crashing.
